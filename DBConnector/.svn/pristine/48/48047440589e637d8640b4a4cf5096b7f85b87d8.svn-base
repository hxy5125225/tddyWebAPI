using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Npgsql;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DBConnector.SQLServer
{
    public class SQLResouce
    {
        public string ConnectString;
        public string DatabaseName;
        public int Context;
        public string UnitSerialNumber;
        public string CurrentCity;
        public int PresentYear;
        public int CurrentYear;
        public int DbType;
        public SQLResouce(string ConnectString, string DatabaseName, string UnitSerialNumber, string CurrentCity, int Context, int PresentYear, int CurrentYear,int Dbtype)
        {
            this.ConnectString = ConnectString;
            this.DatabaseName = DatabaseName;
            this.UnitSerialNumber = UnitSerialNumber;
            this.CurrentCity = CurrentCity;
            this.Context = Context;
            this.PresentYear = PresentYear;
            this.CurrentYear = CurrentYear;
            this.DbType = Dbtype;
        }


        public Dictionary<int, System.Data.DataTable> BuildHTopoDatas(System.Data.DataTable alldatas)
        {
            Dictionary<int, System.Data.DataTable> dic_data = new Dictionary<int, System.Data.DataTable>();
            dic_data.Add(0, null); dic_data.Add(1, null); dic_data.Add(2, null);
            try
            {
                System.Data.DataTable dt;
                dt = BuildNewTable(alldatas, alldatas.Select(" 设备类型='1'"));
                dic_data[0] = dt;
                dt = BuildNewTable(alldatas, alldatas.Select(" 设备类型='0'"));
                dic_data[1] = dt;
                dt = BuildNewTable(alldatas, alldatas.Select(" 设备类型='7'"));
                dic_data[2] = dt;
            }
            catch (System.Exception ex)
            {

            }
            return dic_data;
        }

        public int GetTopoDatasource(out double loadrate, out int segment_cap, out int segment_num, out double stuck_neck_loadrate, out Dictionary<int, System.Data.DataTable> smart_dic, out Dictionary<int, System.Data.DataTable> delete_dic, out Dictionary<int, System.Data.DataTable> topodata_dic, out List<string> FIDS, int flag, string feedername = "")
        {
            System.Data.DataTable topodt, smartdt = new DataTable(), deletetd = new DataTable();
            loadrate = 0.1;
            segment_cap = 1;
            segment_num = 1;
            stuck_neck_loadrate = 1;
            FIDS = new List<string>();
            smart_dic = new Dictionary<int, DataTable>();
            delete_dic = new Dictionary<int, DataTable>();
            topodata_dic = new Dictionary<int, DataTable>();
            if (this.DbType == 0)
            {
                SqlConnection connection = TddyLocalDBHelper.InitSqlConnection(ConnectString, DatabaseName, Context);//启动数据库连接;
                runProcBuildTopoGraphMsg_update(0, ConnectString, UnitSerialNumber, DatabaseName);
                topodt = ExecuteTddyDataTable(0, ConnectString, System.Data.CommandType.Text, string.Format(TddyProCal.typical_parameter_data_ource, CurrentCity), null);
                loadrate = double.Parse(topodt.Rows[0][0].ToString());
                segment_cap = (int)double.Parse(topodt.Rows[1][0].ToString());
                segment_num = (int)double.Parse(topodt.Rows[2][0].ToString());
                stuck_neck_loadrate = !topodt.Columns.Contains("卡脖子负载率") || topodt.Rows[3][0].ToString() == "" ? 0.6 : double.Parse(topodt.Rows[3][0].ToString());

                if (flag == 3 && !TddyLocalDBHelper.IsChanged(ConnectString, DatabaseName, UnitSerialNumber, CurrentCity, Context) && Context != 0) return -1;
                if (feedername == "")
                {
                    DateTime _starTime = DateTime.Now;
                    GraphProcedure.dropTempTableByName(connection, null, "##Temp_TOPO", UnitSerialNumber, DatabaseName, CurrentCity);
                    GraphProcedure.GengenerateRegionTopologyData(0, ConnectString, UnitSerialNumber, DatabaseName, PresentYear, TddyLocalDBHelper.GetUpdateTime("拓扑", ConnectString, DatabaseName, UnitSerialNumber, Context), LightweightRAS.PublicKeyDecrypt(GZipUtil.UnZip(TddyProCal.Generate_Region_wide_topology_datasource)));
                    TimeSpan timeSpan = DateTime.Now - _starTime;
                    topodt = TddyLocalDBHelper.ExecuteTddyDataTable(connection, null, System.Data.CommandType.Text, string.Format(TddyProCal.Equipment_Data_Index, DatabaseName, UnitSerialNumber), null);
                    foreach (System.Data.DataRow row in topodt.Rows)
                    {
                        FIDS.Add(row["设备名称"].ToString().ToLower());
                    }
                    topodt = TddyLocalDBHelper.ExecuteTddyDataTable(connection, null, System.Data.CommandType.Text, TddyProCal.Region_wide_topology_datasource, null);
                    if (Context == 0)
                    {
                        smartdt = TddyLocalDBHelper.ExecuteTddyDataTable(connection, null, System.Data.CommandType.Text, TddyProCal.Region_wide_topology_datasource_dis, null);
                        smart_dic = BuildTopoDatas(smartdt, 1);
                        deletetd = TddyLocalDBHelper.ExecuteTddyDataTable(connection, null, System.Data.CommandType.Text, TddyProCal.Region_wide_topology_delete_datasource, null);
                        delete_dic = BuildTopoDatas(deletetd, 2);
                    }
                }
                else
                {
                    GraphProcedure.dropTempTableByName(connection, null, "##TempLineTopo", UnitSerialNumber, DatabaseName, CurrentCity);
                    GraphProcedure.GengenerateSingleTopologyDataCheck(0, ConnectString, UnitSerialNumber, DatabaseName, CurrentYear, feedername, TddyLocalDBHelper.GetUpdateTime("拓扑", ConnectString, DatabaseName, UnitSerialNumber, Context), LightweightRAS.PublicKeyDecrypt(GZipUtil.UnZip("")));
                    topodt = TddyLocalDBHelper.ExecuteTddyDataTable(connection, null, System.Data.CommandType.Text, TddyProCal.Single_line_topology_datasource, null);
                }
                topodata_dic = BuildTopoDatas(topodt);
            }
            else
            {
                topodata_dic = new Dictionary<int, System.Data.DataTable>();
                using (NpgsqlConnection cn = new NpgsqlConnection("Server=172.16.144.252;Port=19200;User Id=gis;Password=GIS20_sig;Database=fzgis;Encoding=UNICODE"))
                {
                    cn.Open();
                    NpgsqlCommand cmd = new NpgsqlCommand(TddyProCal.dl_subs_sources, cn);
                    DataTable datatable = new DataTable();
                    NpgsqlDataAdapter adapter = new NpgsqlDataAdapter(cmd);
                    DataSet daset = new DataSet();
                    adapter.Fill(daset);
                    datatable = daset.Tables[0];
                    topodata_dic.Add(0, datatable);
                    cmd.Parameters.Clear();
                    cmd.Dispose();


                    cmd = new NpgsqlCommand(LightweightRAS.PublicKeyDecrypt(GZipUtil.UnZip(TddyProCal.subno_sources)), cn);
                    datatable = new DataTable();
                    adapter = new NpgsqlDataAdapter(cmd);
                    daset = new DataSet();
                    adapter.Fill(daset);
                    datatable = daset.Tables[0];
                    topodata_dic.Add(5, datatable);
                    cmd.Parameters.Clear();
                    cmd.Dispose();

                    cmd = new NpgsqlCommand(LightweightRAS.PublicKeyDecrypt(GZipUtil.UnZip(TddyProCal.dl_lines_sources)), cn);
                    adapter = new NpgsqlDataAdapter(cmd);
                    daset = new DataSet();
                    adapter.Fill(daset);
                    datatable = daset.Tables[0];
                    System.Data.DataTable dt;
                    if (flag == 0)
                    {
                        dt = BuildNewTable(datatable, datatable.Select(" devicetype=7 or devicetype=3 or  devicetype=5"));
                        topodata_dic.Add(2, dt);
                        dt = new DataTable();
                        topodata_dic.Add(4, dt);
                    }
                    else
                    {
                        topodata_dic.Add(0, new DataTable());
                        topodata_dic.Add(2, new DataTable());
                        topodata_dic.Add(4, new DataTable());
                    }
                    dt = BuildNewTable(datatable, datatable.Select(" devicetype=2"));
                    topodata_dic.Add(1, dt);
                    dt = new DataTable();
                    topodata_dic.Add(3, dt);
                    cmd.Parameters.Clear();
                    cmd.Dispose();
                }
            }
            return 0;
        }

        public Dictionary<int, System.Data.DataTable> BuildTopoDatas(System.Data.DataTable alldatas, int flag = 0)
        {
            Dictionary<int, System.Data.DataTable> dic_data = new Dictionary<int, System.Data.DataTable>();
            try
            {
                System.Data.DataTable dt;
                if (flag == 0 || flag == 2)
                {
                    dt = BuildNewTable(alldatas, alldatas.Select(" 设备类型='变电站'"));
                    dic_data.Add(0, dt);

                    dt = BuildNewTable(alldatas, alldatas.Select(" 设备类型='开关设施'"));
                    dic_data.Add(2, dt);

                    dt = BuildNewTable(alldatas, alldatas.Select(" 设备类型='电源'"));
                    dic_data.Add(4, dt);
                }
                else
                {
                    dic_data.Add(0, new DataTable());
                    dic_data.Add(2, new DataTable());
                    dic_data.Add(4, new DataTable());
                }
                dt = BuildNewTable(alldatas, alldatas.Select(" 设备类型='中压线路'"));
                dic_data.Add(1, dt);
                dt = BuildNewTable(alldatas, alldatas.Select(" 设备类型='配电设施'"));
                dic_data.Add(3, dt);
            }
            catch (System.Exception ex)
            {

            }
            return dic_data;
        }

        public System.Data.DataTable BuildNewTable(System.Data.DataTable projects, System.Data.DataRow[] dt)
        {
            System.Data.DataTable newdt = new System.Data.DataTable();
            newdt = projects.Clone();
            for (int i = 0; i < dt.Length; i++)
            {
                newdt.ImportRow((System.Data.DataRow)dt[i]);
            }
            return newdt;
        }
        public void runProcWTKShengChengWenTiProcedure(int dbtype, string connect, string UnitSerialNumber, string DatabaseName)
        {
            try
            {
                SqlParameter[] parms = { new SqlParameter("@Area", UnitSerialNumber) };
                ExecuteNonQuery(dbtype, connect, CommandType.StoredProcedure, DatabaseName + "." + "[Proc_WTK_ShengChengWenTi]", parms);
            }
            catch (System.Exception ex) { }
        }


        /// <summary>
        /// 打开或退出软件时清空临时表
        /// </summary>
        /// <param name="connection"></param>
        /// <param name="sqltransaction"></param>
        public void runProcDropUndoTable(int dbtype, string connect, string UnitSerialNumber, string DatabaseName)
        {
            try
            {
                ExecuteNonQuery(dbtype, connect, CommandType.StoredProcedure, DatabaseName + "." + "[Proc_DropUndoTable]", null);
            }
            catch (System.Exception ex) { }
        }
        public void runProcBuildTopoGraphMsg_update(int dbtype, string connect, string UnitSerialNumber, string DatabaseName)
        {
            try
            {

                SqlParameter[] parms = { new SqlParameter("@CountyID", UnitSerialNumber) };

                ExecuteNonQuery(dbtype, connect, CommandType.StoredProcedure, DatabaseName + "." + "[Proc_BuildTopoGraphMsg_update]", parms);
            }
            catch (System.Exception ex) { }
        }
        private static int ExecuteNonQuery(int dbtype, string conntect, CommandType commandType, string commandText, params SqlParameter[] parms)
        {
            int retval = -1;
            try
            {
                if (dbtype == 0)//sqlserver
                {
                    using (SqlConnection cn = new SqlConnection(conntect))
                    {
                        using (SqlCommand cmd = cn.CreateCommand())
                        {
                            cmd.CommandType = commandType;
                            cmd.CommandText = commandText;
                            cmd.Parameters.AddRange(parms);
                            cn.Open();
                            retval = cmd.ExecuteNonQuery();
                        }
                    }
                }
                else//PG dbtype == 1
                {
                    using (NpgsqlConnection cn = new NpgsqlConnection(conntect))
                    {
                        using (NpgsqlCommand cmd = new NpgsqlCommand())
                        {
                            cmd.CommandType = commandType;
                            cmd.CommandText = commandText;
                            cmd.Parameters.Add(parms);
                            cn.Open();
                            retval = cmd.ExecuteNonQuery();
                        }
                    }
                }
            }
            catch (System.Exception e) { }
            return retval;
        }
        public DataTable ExecuteTddyDataTable(int dbtype, string conntect, CommandType commandType, string commandText, params SqlParameter[] parms)
        {

            DataTable datatable = new DataTable();
            try
            {
                if (dbtype == 0)//sqlserver
                {
                    using (SqlConnection cn = new SqlConnection(conntect))
                    {
                        using (SqlCommand cmd = cn.CreateCommand())
                        {
                            cmd.Connection = cn;
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = commandText;// 设置命令文本(存储过程名或SQL语句)
                            cmd.CommandType = commandType; // 设置命令类型.
                            if (parms != null && parms.Length > 0) cmd.Parameters.Add(parms);
                            cn.Open();
                            SqlDataReader dataReader = cmd.ExecuteReader();
                            ///动态添加表的数据列
                            for (int i = 0; i < dataReader.FieldCount; i++)
                            {
                                DataColumn myDataColumn = new DataColumn();
                                myDataColumn.DataType = dataReader.GetFieldType(i);
                                myDataColumn.ColumnName = dataReader.GetName(i);
                                datatable.Columns.Add(myDataColumn);
                            }
                            ///添加表的数据
                            while (dataReader.Read())
                            {
                                DataRow myDataRow = datatable.NewRow();
                                for (int i = 0; i < dataReader.FieldCount; i++)
                                {
                                    myDataRow[i] = dataReader[i];
                                }
                                datatable.Rows.Add(myDataRow);
                                myDataRow = null;
                            }
                            dataReader.Close();
                        }
                    }
                }
                else if (dbtype == 1)//PG
                {
                    using (NpgsqlConnection cn = new NpgsqlConnection(conntect))
                    {
                        using (NpgsqlCommand cmd = new NpgsqlCommand())
                        {
                            cmd.Connection = cn;
                            cmd.CommandTimeout = 0;
                            cmd.CommandText = commandText;// 设置命令文本(存储过程名或SQL语句)
                            cmd.CommandType = commandType; // 设置命令类型.
                            if (parms != null && parms.Length > 0) cmd.Parameters.Add(parms);
                            cn.Open();
                            NpgsqlDataReader dataReader = cmd.ExecuteReader();
                            ///动态添加表的数据列
                            for (int i = 0; i < dataReader.FieldCount; i++)
                            {
                                DataColumn myDataColumn = new DataColumn();
                                myDataColumn.DataType = dataReader.GetFieldType(i);
                                myDataColumn.ColumnName = dataReader.GetName(i);
                                datatable.Columns.Add(myDataColumn);
                            }
                            ///添加表的数据
                            while (dataReader.Read())
                            {
                                DataRow myDataRow = datatable.NewRow();
                                for (int i = 0; i < dataReader.FieldCount; i++)
                                {
                                    myDataRow[i] = dataReader[i];
                                }
                                datatable.Rows.Add(myDataRow);
                                myDataRow = null;
                            }
                            dataReader.Close();
                        }
                    }
                }
                else if (dbtype == 3)//oracle
                {


                }
                else//mysql dbtype == 4
                {


                }
            }
            catch (System.Exception ex) { }
            return datatable;
        }
        public void ExecuteTableToDBTable(SqlConnection connection, System.Data.DataTable dt, string tableName)
        {
            using (SqlBulkCopy bulkCopy = new SqlBulkCopy(connection))
            {
                try
                {
                    bulkCopy.BulkCopyTimeout = dt.Rows.Count;
                    bulkCopy.DestinationTableName = tableName;//要插入的表的表名
                    bulkCopy.BatchSize = dt.Rows.Count;
                    for (int i = 0; i < dt.Columns.Count; i++)
                    {
                        bulkCopy.ColumnMappings.Add(dt.Columns[i].ColumnName, dt.Columns[i].ColumnName);
                    }
                    bulkCopy.WriteToServer(dt);
                }
                catch (Exception ex)
                {

                }
                finally
                {
                }
            }
        }

        public void GetPublishParam(out int arrow, out double branchratio, out int istrunkline, out int isnewdraw, out int trangraph, out int trantext, out int switchtext, string pubkey, string ConnectString, string DatabaseName, string UnitSerialNumber, int context)
        {
            arrow = 1;
            branchratio = 1;
            istrunkline = 1;
            isnewdraw = 2;
            trangraph = 1;
            trantext = 1;
            switchtext = 1;
            string sql = "select 应用范围 from " + DatabaseName + ".典型参数表  where 单位='" + UnitSerialNumber + "' and 参数名称='" + pubkey + "'";
            SqlConnection connection = TddyLocalDBHelper.InitSqlConnection(ConnectString, DatabaseName, context);//启动数据库连接
            System.Data.DataTable dt = TddyLocalDBHelper.ExecuteDataTable(connection, CommandType.Text, sql);
            if (dt.Rows.Count > 0)
            {
                JObject json = (JObject)JsonConvert.DeserializeObject(dt.Rows[0][0].ToString());
                if (json.Property("新建线路显示(1：红色,2：虚线)") == null)
                {
                    json = (JObject)JsonConvert.DeserializeObject("{\"新建线路显示(1：红色,2：虚线)\": 1,\"电缆线路显示(1：箭头,2：虚线)\": 1,  \"分支占比(0-1)\": 1, \"包含分支(包含1,不包含0)\": 1, \"绘制开关设施名称(1：绘制,0：不绘制)\": 1, \"绘制配电设施(1：绘制,0：不绘制)\": 1, \"绘制配电设施名称(1：绘制,0：不绘制)\": 1 }");
                }
                isnewdraw = int.Parse(json["新建线路显示(1：红色,2：虚线)"].ToString());
                arrow = int.Parse(json["电缆线路显示(1：箭头,2：虚线)"].ToString());
                branchratio = double.Parse(json["分支占比(0-1)"].ToString());
                istrunkline = int.Parse(json["包含分支(包含1,不包含0)"].ToString());
                if (json.Property("绘制开关设施名称(1：绘制,0：不绘制)") != null) switchtext = int.Parse(json["绘制开关设施名称(1：绘制,0：不绘制)"].ToString());
                if (json.Property("绘制配电设施(1：绘制,0：不绘制)") != null) trangraph = int.Parse(json["绘制配电设施(1：绘制,0：不绘制)"].ToString());
                if (json.Property("绘制配电设施名称(1：绘制,0：不绘制)") != null) trantext = int.Parse(json["绘制配电设施名称(1：绘制,0：不绘制)"].ToString());
            }
        }

        public List<int> ConfigPlanningLevelYear(string ConnectString, string DatabaseName, string UnitSerialNumber, int context, int flag, List<int> years = null)
        {
            List<int> year = new List<int>();
            try
            {
                if (string.IsNullOrEmpty(UnitSerialNumber)) return year;

                string sql = "SELECT 应用范围  FROM " + DatabaseName + ".典型参数表 where 序号='" + UnitSerialNumber + "' and 参数名称='规划水平年'";

                string Connection = ConnectString;
                SqlConnection connection = TddyLocalDBHelper.InitSqlConnection(ConnectString, DatabaseName, context);//启动数据库连接;
                System.Data.DataTable dt = TddyLocalDBHelper.ExecuteDataTable(connection, CommandType.Text, sql);
                if (flag == 0)//查询
                {
                    dt = TddyLocalDBHelper.ExecuteDataTable(connection, CommandType.Text, sql);
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        year = JsonConvert.DeserializeObject<List<int>>(dt.Rows[0][0].ToString());
                    }
                }
                else if (flag == 1)//插入
                {
                    sql = "insert into   " + DatabaseName + ".典型参数表 (应用范围,序号,参数名称)  values('{0}','{1}','规划水平年')";
                    if (dt != null && dt.Rows.Count > 0)
                    {
                        sql = "update   " + DatabaseName + ".典型参数表 set  应用范围='{0}' where 序号='{1}' and 参数名称='规划水平年'";
                    }
                    sql = string.Format(sql, Newtonsoft.Json.JsonConvert.SerializeObject(years), UnitSerialNumber);
                    TddyLocalDBHelper.ExecuteTddyNonQuery(connection, null, sql, null);
                }
                else if (flag == 2)//更新
                {
                    sql = "update   " + DatabaseName + ".典型参数表 set  应用范围='{0}' where 序号='{1}' and 参数名称='规划水平年'";
                    sql = string.Format(sql, Newtonsoft.Json.JsonConvert.SerializeObject(years), UnitSerialNumber);
                    TddyLocalDBHelper.ExecuteTddyNonQuery(connection, null, sql, null);
                }
            }
            catch
            {
            }
            return year;
        }

    }
}
