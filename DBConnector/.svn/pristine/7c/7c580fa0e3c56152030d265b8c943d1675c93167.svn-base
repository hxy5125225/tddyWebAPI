using DBConnector.Oracle;

using DBConnector.PG;

using LogLibrary;

using Newtonsoft.Json;

using Newtonsoft.Json.Linq;

using Oracle.ManagedDataAccess.Client;

using RestSharp;

using System;

using System.Collections.Generic;

using System.Data;

using System.Linq;

using System.Text;

using System.Threading.Tasks;



namespace DBConnector

{

    public class InterfaceClass

    {

        public int callLoad;

        public string loadTime;

        public decimal taskCount;



        public void InitialParameter()

        {
            ConfigClass.Initial_PG_Config();
        }

        public Dictionary<int, System.Data.DataTable> GetData(string taskId, out string parameter, out string dept_code, out string sg_code, out string message)

        {

            DateTime _starTime = DateTime.Now;

            TimeSpan timeSpan = TimeSpan.Zero;

            Dictionary<int, System.Data.DataTable> topodata = new Dictionary<int, System.Data.DataTable>();

            Npgsql.NpgsqlConnection GhdwConn = null;

            OracleConnection oracleConn = null;

            if (taskId == "") taskId = "123123123111222333111"; //任务ID

            parameter = "";

            dept_code = "";

            sg_code = "";

            string dwxh = "";

            message = "";

            LogHelper.WriteInfo("是否计算负荷（0不计算，1计算）：" + callLoad);

            try

            {

                DataTable dt = new DataTable();

                #region 数据库启动连接 

                InitialParameter();

                PGGhdwConn pggh = new PGGhdwConn();

                GhdwConn = pggh.conn;

                OracleConn oracle = new OracleConn();

                oracleConn = oracle.conn;

                #endregion

                #region 任务查询 fzgis_ghdw数据库 获取parameter dwxh

                DataTable dt_PG_Task = PG.PGClass.QueryNpgDatabase(GhdwConn, string.Format(ConfigClass.PG_QuerySql_Task, taskId));

                LogHelper.WriteInfo("[" + taskId + "]dt_PG_Task:" + dt_PG_Task.Rows.Count);

                if (dt_PG_Task == null || dt_PG_Task.Rows.Count == 0) return topodata;

                bool isOne = true;

                if (dt_PG_Task.Rows[0]["is_base"].ToString() == "1")

                {

                    parameter = "task_id='" + dt_PG_Task.Rows[0]["task_id"] + "'";

                }

                else

                {

                    StringBuilder sb = new StringBuilder("(");

                    StringBuilder hsb = new StringBuilder("(");

                    int count = dt_PG_Task.Rows.Count;

                    for (int i = 0; i < count; i++)

                    {

                        if (string.IsNullOrEmpty(dt_PG_Task.Rows[i]["task_id"].ToString()) || string.IsNullOrEmpty(dt_PG_Task.Rows[i]["hash_part"].ToString())) continue;

                        if (i == count - 1)

                        {

                            sb.Append("'" + dt_PG_Task.Rows[i]["task_id"] + "'");

                            hsb.Append(dt_PG_Task.Rows[i]["hash_part"]);

                        }

                        else

                        {

                            sb.Append("'" + dt_PG_Task.Rows[i]["task_id"] + "',");

                            hsb.Append(dt_PG_Task.Rows[i]["hash_part"] + ",");

                        }

                    }

                    if (sb[sb.Length - 1].ToString() == ",")

                        sb.Remove(sb.Length - 1, 1);

                    sb.Append(")");

                    if (hsb[hsb.Length - 1].ToString() == ",")

                        hsb.Remove(hsb.Length - 1, 1);

                    hsb.Append(")");

                    parameter = "(CASE WHEN task_id = '" + taskId + "' THEN 1 = 1 ELSE(indate = udate OR udate > to_timestamp('" + dt_PG_Task.Rows[0]["topodate"] + "', 'yyyy-MM-dd hh24:mi:ss')) END) AND task_id IN " + sb.ToString() + " AND hash_part IN " + hsb.ToString();

                }



                dwxh = dt_PG_Task.Rows[0]["dwxh"].ToString();

                LogHelper.WriteInfo("dwxh:" + dwxh);

                #endregion

                #region 查询省份ID 获取dept_code year

                DataTable dt_PG_ProvinceID = PG.PGClass.QueryNpgDatabase(GhdwConn, string.Format(ConfigClass.PG_QuerySql_ProvinceID, taskId));

                LogHelper.WriteInfo("dt_PG_ProvinceID:" + dt_PG_ProvinceID.Rows.Count);

                if (dt_PG_ProvinceID == null || dt_PG_ProvinceID.Rows.Count == 0) return topodata;

                dept_code = dt_PG_ProvinceID.Rows[0]["sg_code"].ToString();

                sg_code = dept_code;

                //int year = int.Parse(dt_PG_ProvinceID.Rows[0]["year"].ToString());

                #endregion

                #region 创建临时表 

                //创建临时表 PG: topo_sb_line_oid

                PG.PGClass.CreateTempTable(GhdwConn, ConfigClass.PG_CreateTempTable);

                DataTable DDD = PGClass.QueryNpgDatabase(GhdwConn, "select * from topo_sb_line_oid");

                //创建临时表 PG: topo_pdss

                PG.PGClass.CreateTempTable(GhdwConn, ConfigClass.PG_CreateTempTablePdss);

                //创建临时表Oracle: topo_sb_line_sbid

                Oracle.OracleClass.CreateTempTable(oracleConn);

                LogHelper.WriteInfo("创建临时表:成功");

                #endregion 

                #region 查询变电站参数表 

                DataTable dtpara_Sub = PG.PGClass.QueryNpgDatabase(GhdwConn, string.Format(ConfigClass.PG_QuerySql_Substation, parameter, dwxh));

                LogHelper.WriteInfo("dtpara_Sub数量:" + dtpara_Sub.Rows.Count);

                //dtpara_Sub  xl_sbid devicetype

                Oracle.OracleClass.ContrastTableAndWrite(dtpara_Sub, oracleConn, ConfigClass.dicContrastOracleTempTable, "topo_sb_line_sbid");

                DataTable dt_Oracle_Sub = Oracle.OracleClass.QueryOracleDatabase(string.Format(ConfigClass.Oracle_Query_BDZDACX, dept_code), oracleConn);//查询变电站Oracle 

                DataTable dddddd = OracleClass.QueryOracleDatabase("select Count(*) from topo_sb_line_sbid", oracleConn);

                LogHelper.WriteTrans("topo_sb_line_sbid数量：" + dddddd.Rows[0][0]);

                #endregion

                #region 获取接口数据

                //2、通过接口返回来的json转换成表

                DataTable dtTempt = GetTableByCondition(dtpara_Sub, "devicetype=1");

                LogHelper.WriteInfo("dtTempt数量:" + dtTempt.Rows.Count);

                _starTime = DateTime.Now;

                dt = GetDataTableByPara1(dtTempt);

                timeSpan = DateTime.Now - _starTime;

                string s1 = string.Format("获取接口数据，共耗时{0}分{1}秒{2}毫秒", timeSpan.Minutes, timeSpan.Seconds, timeSpan.Milliseconds);

                LogHelper.WriteInfo(string.Format("获取接口数据，共耗时{0}分{1}秒{2}毫秒", timeSpan.Minutes, timeSpan.Seconds, timeSpan.Milliseconds));

                LogHelper.WriteInfo("dt数量:" + dt.Rows.Count);

                if (dt.Rows.Count == 0) return topodata;

                DeleteInvalidData(ref dt, ref dtTempt); //删除无效数据 

                DataTable dt_1 = DataTableClass.JoinTable(dt, dtTempt.DefaultView.ToTable(false, new string[] { "typeid", "xl_cxkg", "sbdydj", "xl_oid" }), new List<string>() { "cxkg", "cxkglx" }, new List<string>() { "xl_cxkg", "typeid" }).DefaultView.ToTable(false, new string[] { "oid", "equips", "typeid", "cxkg", "cxkglx", "sbdydj", "xl_oid" });//拼接  

                dt_1.Columns["sbdydj"].ColumnName = "dydj";



                //将接口返回的数据插入临时表

                PG.PGClass.WriteToServer(dt_1, "topo_sb_line_oid", GhdwConn);

                PGClass.ExecuteNoneQuery(ConfigClass.PG_Delete_InvalidData,GhdwConn);

                #endregion

                #region 馈线  

                DataTable dt_pg_mxh = PG.PGClass.QueryNpgDatabase(GhdwConn, string.Format(ConfigClass.PG_Query_CXMXH, parameter));//查询母线号

                DataTable dt_Oracle_Feeder = Oracle.OracleClass.QueryOracleDatabase(string.Format(ConfigClass.Oracle_QueryFeederSql, dept_code, loadTime), oracleConn);//查询oracle馈线 

                #endregion 

                #region 线段信息  

                _starTime = DateTime.Now;

                DataTable dt_PG_CXXDXX = PG.PGClass.QueryNpgDatabase(GhdwConn, String.Format(ConfigClass.PG_Query_XDDA, parameter, dwxh));

                timeSpan = DateTime.Now - _starTime;

                string s2 = string.Format("获取线段数据，共耗时{0}分{1}秒{2}毫秒", timeSpan.Minutes, timeSpan.Seconds, timeSpan.Milliseconds);

                LogHelper.WriteInfo("线段数据数据:" + dt_PG_CXXDXX.Rows.Count);

                //清空oracle临时表将dt_PG_CXXDXX插入临时表中（devicetype sbid）

                Oracle.OracleClass.ExecuteNoneQuery(ConfigClass.Oracle_ClearTempTable, oracleConn);

                Oracle.OracleClass.ContrastTableAndWrite(dt_PG_CXXDXX, oracleConn, ConfigClass.dicContrastOracleTempTableXDXX, "topo_sb_line_sbid");

                DataTable dt_Oracle_CXXDXX = Oracle.OracleClass.QueryOracleDatabase(string.Format(ConfigClass.Oracle_Query_XDDA, dept_code), oracleConn);

                #endregion 

                #region 配电设施

                //DataTable dt_PG_Trans = PG.PGClass.QueryNpgDatabase(cn, ConfigClass.PG_Query_Trans);

                DataTable dt_Oracle_Trans = Oracle.OracleClass.QueryOracleDatabase(string.Format(ConfigClass.Oracle_Query_Trans, dept_code), oracleConn);

                PG.PGClass.WriteToServer(GetTableByCondition(dt_PG_CXXDXX, "devicetype=5"), "topo_pdss", GhdwConn);

                //DataTable dtest1 = PG.PGClass.QueryNpgDatabase(GhdwConn, "select * from topo_pdss ");//查询oracle临时表记录

                #endregion

                #region 开关设施

                //查出设备类型为4、5 的数据放入临时表

                _starTime = DateTime.Now;
                DataTable dt_PG_Switch = PG.PGClass.QueryNpgDatabase(GhdwConn, string.Format(ConfigClass.PG_Query_Switch, parameter, dwxh));

                timeSpan = DateTime.Now - _starTime;
                string s3 = string.Format("dt_PG_Switch，共耗时{0}分{1}秒{2}毫秒", timeSpan.Minutes, timeSpan.Seconds, timeSpan.Milliseconds);

                LogHelper.WriteInfo(s3);
                Oracle.OracleClass.ContrastTableAndWrite(GetTableByCondition(dt_PG_Switch, "devicetype=4"), oracleConn, ConfigClass.dicContrastOracleTempTableXDXX, "topo_sb_line_sbid");
                DataTable dt_Oracle_Switch = Oracle.OracleClass.QueryOracleDatabase(string.Format(ConfigClass.Oracle_Query_Switch, dept_code), oracleConn);

                #endregion 
                DataTable dtResult_Sub = DataTableClass.JoinTable(GetTableByCondition(dtpara_Sub, "devicetype=0"), dt_Oracle_Sub, "sbid", "DWZY_ID");//拼接 
                DataTable dtResult_Feeder1 = DataTableClass.JoinTable(dtTempt, dt_pg_mxh, new List<string>() { "xl_cxkg", "xl_cxkglx" }, new List<string>() { "cxkg", "cxkglx" });//拼接  
                DataTable dtResult_Feeder2 = DataTableClass.JoinTable(dtResult_Feeder1, dt_Oracle_Feeder, "sbid", "dwzy_id"); //拼接
                DataTable dtResult_XD = DataTableClass.JoinTable(GetTableByCondition(dt_PG_CXXDXX, "devicetype=2"), dt_Oracle_CXXDXX, "sbid", "DWZY_ID");//拼接
                DataTable dtResult_Trans = DataTableClass.JoinTable(GetTableByCondition(dt_PG_CXXDXX, "devicetype=5"), dt_Oracle_Trans, "sbid", "dwzy_id");
                DataTable dataTable = GetTableByCondition(dt_PG_CXXDXX, "devicetype=3");
                dataTable.Columns["oid"].ColumnName = "dm_id";

                //将线段信息devicetype为3的和dt_PG_Switch合并
                dt_PG_Switch.Merge(dataTable, false, MissingSchemaAction.Ignore);
                DataTable dtResult_Switch_1 = DataTableClass.JoinTable(dt_PG_Switch, dt_Oracle_Switch, "sbid", "dwzy_id"); //拼接 
                timeSpan = DateTime.Now - _starTime;
                LogHelper.WriteInfo(string.Format("1、数据整理，共耗时{0}分{1}秒{2}毫秒", timeSpan.Minutes, timeSpan.Seconds, timeSpan.Milliseconds));

                #region 数据入库

                ////配电设施数据入库 

                ///

                //PG.PGClass.ExecuteNoneQuery(string.Format(ConfigClass.PG_Delete_Sql, "topo_zyxl.topo_pdss", ConfigClass.dwxh, ConfigClass.year), GhdwConn);

                //PG.PGClass.ExecuteNoneQuery(string.Format(ConfigClass.PG_Insert_Trans, parameter), GhdwConn);

                //#region 数据拼接 数据入库

                //Task.Run(() =>

                //{



                //    PG.PGConn pgcg = new PG.PGConn();

                //    try

                //    {

                //        //变电站数据入库 

                //        PG.PGClass.ExecuteNoneQuery(string.Format(ConfigClass.PG_Delete_Sql, "topo_zyxl.topo_bdz", ConfigClass.dwxh, ConfigClass.year), pgcg.conn);

                //        PG.PGClass.ContrastTableAndWrite(dtResult_Sub, pgcg.conn, ConfigClass.dicContrastTopoBdz, "topo_zyxl.topo_bdz");

                //        //中压线路数据入库 

                //        PG.PGClass.ExecuteNoneQuery(string.Format(ConfigClass.PG_Delete_Sql, "topo_zyxl.topo_zyxl", ConfigClass.dwxh, ConfigClass.year), pgcg.conn);

                //        PG.PGClass.ContrastTableAndWrite(dtResult_Feeder2, pgcg.conn, ConfigClass.dicContrastTopoZyxl, "topo_zyxl.topo_zyxl");

                //        //开关设施数据入库 

                //        PG.PGClass.ExecuteNoneQuery(string.Format(ConfigClass.PG_Delete_Sql, "topo_zyxl.topo_kgss", ConfigClass.dwxh, ConfigClass.year), pgcg.conn);

                //        PG.PGClass.ContrastTableAndWrite(GetTableByCondition(dtResult_Switch_1, "rows=1 and (devicetype=3 or devicetype=4)"), pgcg.conn, ConfigClass.dicContrastTopoKgss, "topo_zyxl.topo_kgss");



                //    }

                //    catch (Exception ex)

                //    {



                //        throw new Exception(ex.StackTrace+ex.Message);

                //    }

                //    finally

                //    {

                //        pgcg.conn.Dispose();

                //    }

                //});

                #endregion

                // DataTable dtFeeder = GetTableByCondition(dtResult_Feeder2, "XLSX = '公用'  OR  XLSX is null");

                _starTime = DateTime.Now;

                DataTable dtTransLoad = DataTableClass.CreateTransLoadTable();

                if (callLoad == 1)

                {

                    GetLoadDataByTask(dtResult_Feeder2, dtResult_Trans, dept_code, dept_code, ref dtTransLoad, taskId, taskCount);//配变负荷

                    timeSpan = DateTime.Now - _starTime;

                    LogHelper.WriteInfo(string.Format("2、获取配电LOAD，共耗时{0}分{1}秒{2}毫秒", timeSpan.Minutes, timeSpan.Seconds, timeSpan.Milliseconds));

                }

                //PGClass.ExecuteNoneQuery("delete from wjfx.t_tx_znyc_pdfh where  task_id='" + taskId + "'", GhdwConn);

                //PGClass.WriteToServer(dtTransLoad, "wjfx.t_tx_znyc_pdfh", GhdwConn);

                List<string> listCondition = new List<string>() { "oid", "sbzlx" };

                DataTable dtTrans1 = DataTableClass.JoinTable(dtResult_Trans, dtTransLoad, listCondition, listCondition);

                DataTable dtJson = dtTrans1;

                dtJson.Columns.Remove("shape");

                LogHelper.WriteTrans("dtTrans1 JSON：" + JsonConvert.SerializeObject(dtJson));

                topodata.Add(0, dtResult_Sub);//0:变电站 

                topodata.Add(1, dtResult_XD);//1:

                topodata.Add(2, dtResult_Switch_1);//2:开关设施 3、4 

                topodata.Add(3, dtTrans1);//3:配电设施5

                topodata.Add(4, new DataTable());//4:电源6 

                DataTable dtDevice7 = GetTableByCondition(dt_PG_CXXDXX, "devicetype=7");

                topodata.Add(5, dtDevice7);//5:母线号dtResult_XD里面的devicetype为7的 

                topodata.Add(6, dtResult_Feeder2);//6:馈线  

                LogHelper.WriteInfo("dtResult_Sub数量:" + dtResult_Sub.Rows.Count);

                LogHelper.WriteInfo("dtResult_XD数量:" + dtResult_XD.Rows.Count);

                LogHelper.WriteInfo("dtResult_Switch_1数量:" + dtResult_Switch_1.Rows.Count);

                LogHelper.WriteInfo("dtTrans1数量:" + dtTrans1.Rows.Count);

                LogHelper.WriteInfo("dtDevice7数量:" + dtDevice7.Rows.Count);

                LogHelper.WriteInfo("dtFeeder数量:" + dtResult_Feeder2.Rows.Count);

            }

            catch (Exception ex)

            {
                LogHelper.WriteError("异常：", ex);
                throw new Exception(ex.StackTrace + Environment.NewLine + ex.Message);
            }

            finally

            {

                if (GhdwConn != null) GhdwConn.Dispose();

                if (oracleConn != null) oracleConn.Dispose();

            }

            return topodata;

        }

        private string GetEquipId(DataRow[] drs)

        {

            StringBuilder sb = new StringBuilder();

            foreach (DataRow dr in drs)

            {

                if (dr["OBJ_ID"] == DBNull.Value) continue;

                sb.Append(dr["OBJ_ID"] + ",");

            }

            if (sb.Length > 0)

                sb.Remove(sb.Length - 1, 1);

            return sb.ToString();

        }



        private void GetTransLoad(DataRow[] drs, string sgcode, string periods, string deptcode, ref DataTable dt, string taskId)

        {

            string data = "";

            LoadData loadData = new LoadData();

            loadData.srvCode = "00000001";

            loadData.equipType = "0302";

            loadData.equipId = GetEquipId(drs);

            loadData.sgcode = sgcode;

            loadData.funcCode = "01";

            loadData.periods = periods;

            loadData.deptcode = deptcode;

            loadData.type = "01";

            loadData.serialNo = "FF000000-0000-0050-0000-000000000600-02216";

            LoadInfo info = new LoadInfo();

            info.user = "8ad5979d66ec89dd016936e0524b5e07";

            info.serviceCode = "ele_calc_run_service_zb";//固定值

            info.data = new List<LoadData>() { loadData };

            data = JsonConvert.SerializeObject(info);

            string redata = "";

            try

            {

                //redata = "{ \"data\": [        {            \"11111111\": {                \"k_10_7\": 94.968            },            \"11111112\": {                \"k_10_7\": 94.968            },            \"11111113\": {                \"k_10_7\": 94.968            },            \"11111114\": {                \"k_10_7\": 94.968            }}    ],    \"failCode\": \"001\"}"; 

                var client = new RestClient(ConfigClass.LoadDataIp);
                var request = new RestRequest(Method.POST);
                request.Timeout = 10000;
                request.AddParameter("application/json", data, ParameterType.RequestBody);
                var response = client.Execute(request);
                redata = response.Content;
                //以上为负荷预测接口调用
                Dictionary<string, object> ddd = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, object>>(redata);

                if (ddd == null || !ddd.ContainsKey("data")) return;
                JArray array = JArray.Parse(ddd["data"].ToString());
                double value = 0;

                foreach (var a in array)

                {

                    if (a == null) continue;

                    foreach (var aa in a.Children())

                    {

                        if (aa == null) continue;

                        JsonConvert.DeserializeObject<Dictionary<string, double>>(aa.First.ToString()).TryGetValue("k_10_7", out value);

                        GetTransData(drs, ((JProperty)aa).Name, value, ref dt, taskId);

                    }

                }

                LogHelper.WriteInfo("负荷参数:" + data + Environment.NewLine + "输出值：" + redata);



            }

            catch (Exception ex)

            {

                throw new Exception(ex.StackTrace + Environment.NewLine + ex.Message);

            }

        }

        public struct FeederLog

        {

            public object oid;

            public object load;

        }

        private void GetTransData(DataRow[] drs, string name, double value, ref DataTable dt, string taskId)

        {

            foreach (DataRow dr in drs)

            {

                object objId = dr["OBJ_ID"];

                if (objId == DBNull.Value) continue;

                if (objId.ToString() != name) continue;

                dt.Rows.Add(new object[] { dr["oid"], dr["sbzlx"], value, taskId });

            }

        }

        public void GetLoadDataByTask(DataTable dtFeeder, DataTable dtTrans, string sgcode, string deptcode, ref DataTable dt, string taskId, decimal taskCount)

        {

            LogHelper.WriteTrans("1、进入调用配变负荷方法");
            LogHelper.WriteTrans("2、配变负荷接口地址：" + ConfigClass.LoadDataIp);

            try

            {

                int totalCount = dtFeeder.Rows.Count;
                decimal count = Math.Ceiling((decimal)(totalCount / taskCount));
                int nums = 0;
                List<Task<DataTable>> list = new List<Task<DataTable>>();
                for (int i = 0; i < taskCount; i++)
                {

                    DataTable dt1 = dtFeeder.Clone();
                    for (int j = 0; j < totalCount; j++)
                    {

                        if (j >= count * i && j < count * (i + 1))
                        {

                            dt1.Rows.Add(dtFeeder.Rows[j].ItemArray);

                        }

                    }

                    Task<DataTable> t1 = new Task<DataTable>(() =>

                    {

                        return QueryTransLoad(dt1, dtTrans, sgcode, deptcode, taskId);

                    });
                    t1.Start();
                    list.Add(t1);
                }

                Task.WaitAll(list.ToArray());
                for (int i = 0; i < list.Count; i++)
                {
                    dt.Merge(list[i].Result);
                }
            }

            catch (Exception ex)
            {
                LogHelper.WriteError("GetLoadData异常", ex);
                throw new Exception(ex.StackTrace + Environment.NewLine + ex.Message);
            }

            finally
            {
                LogHelper.WriteTrans("3、配变负荷获取结束！");
            }
        }

        public DataTable QueryTransLoad(DataTable dtFeeder, DataTable dtTrans, string sgcode, string deptcode, string taskId)

        {

            DataTable dt = DataTableClass.CreateTransLoadTable();

            string condition = "";

            foreach (DataRow dataRow in dtFeeder.Rows)

            {

                if (dataRow["OBJ_ID"] != DBNull.Value && dataRow["TIME_MAX"] != DBNull.Value)

                {

                    condition = "cxkg=" + dataRow["xl_cxkg"] + " and cxkglx=" + dataRow["typeid"];

                    DataRow[] drs = dtTrans.Select(condition);

                    if (drs.Length == 0) continue;

                    GetTransLoad(drs, sgcode, dataRow["TIME_MAX"].ToString(), deptcode, ref dt, taskId);

                }

            }

            return dt;

        }



        public void GetLoadData(DataTable dtFeeder, DataTable dtTrans, string sgcode, string deptcode, ref DataTable dt, string taskId)

        {

            LogHelper.WriteTrans("1、进入调用配变负荷方法");

            LogHelper.WriteTrans("2、配变负荷接口地址：" + ConfigClass.LoadDataIp);

            try

            {

                string condition = "";

                foreach (DataRow dataRow in dtFeeder.Rows)

                {

                    if (dataRow["OBJ_ID"] != DBNull.Value && dataRow["TIME_MAX"] != DBNull.Value)

                    {

                        condition = "cxkg=" + dataRow["xl_cxkg"] + " and cxkglx=" + dataRow["typeid"];

                        DataRow[] drs = dtTrans.Select(condition);

                        if (drs.Length == 0) continue;

                        GetTransLoad(drs, sgcode, dataRow["TIME_MAX"].ToString(), deptcode, ref dt, taskId);

                    }

                }

            }

            catch (Exception ex)

            {

                LogHelper.WriteError("GetLoadData异常", ex);

                throw new Exception(ex.StackTrace + Environment.NewLine + ex.Message);

            }

            finally

            {

                LogHelper.WriteTrans("3、配变负荷获取结束！");

            }

        }

        public Dictionary<long, double> GetFeederLoadData(DataTable dtFeeder, List<long> oids, string sgcode, string deptcode, out int status,ref int m)

        {

            LogHelper.WriteFeeder("1、馈线负荷地址：" + ConfigClass.LoadDataIp);

            Dictionary<long, double> dic = new Dictionary<long, double>();

            status = 0;

            try

            {

                if (oids == null || oids.Count == 0)

                {

                    LogHelper.WriteFeeder("oids为空");

                    return dic;

                }

                DateTime _starTime = DateTime.Now;

                TimeSpan timeSpan = TimeSpan.Zero;

                long xl_oid = 0;

                Dictionary<string, long> dicObj = new Dictionary<string, long>();

                Dictionary<long, double> dicX = new Dictionary<long, double>();

                StringBuilder sb = new StringBuilder();

                string periods = "";

                long temp_oid = 0;

                foreach (DataRow item in dtFeeder.Rows)

                {

                    object id = item["xl_oid"];

                    if (id == DBNull.Value) continue;

                    temp_oid = Convert.ToInt64(id.ToString());

                    if (temp_oid == 0) continue; 

                    if (!oids.Contains(temp_oid)) continue;

                    if (temp_oid == oids[0])

                    { 

                        xl_oid = temp_oid;

                        periods = item["TIME_MAX"].ToString();

                        if (string.IsNullOrEmpty(periods))

                        {

                            LogHelper.WriteFeeder("最大时刻为空：" + periods);

                            return dic;

                        }

                        continue;

                    } 

                    if (string.IsNullOrEmpty(item["OBJ_ID"].ToString())) continue;

                    dicObj.Add(item["OBJ_ID"].ToString(), temp_oid); 

                    dicX.Add(temp_oid, item["XEDL"] == DBNull.Value ? 0 :Convert.ToDouble(item["XEDL"].ToString()));

                    sb.Append(item["OBJ_ID"].ToString() + ",");

                } 

                if (sb.Length == 0) return dic;

                sb.Remove(sb.Length - 1, 1);

                LoadData loadData = new LoadData();

                loadData.srvCode = "00000002";

                loadData.equipType = "0304";

                loadData.equipId = sb.ToString();

                loadData.sgcode = sgcode;

                loadData.funcCode = "01";

                loadData.periods = periods;

                loadData.deptcode = deptcode;

                loadData.type = "01";

                loadData.serialNo = "FF000000-0000-0050-0000-000000000600-02216";

                LoadInfo info = new LoadInfo();

                info.user = "8ad5979d66ec89dd016936e0524b5e07";

                info.serviceCode = "ele_calc_run_service_zb";//固定值

                info.data = new List<LoadData>() { loadData };

                string data = JsonConvert.SerializeObject(info);

                string redata = "";

                var client = new RestClient(ConfigClass.LoadDataIp);

                var request = new RestRequest(Method.POST);

                request.Timeout = 10000;

                request.AddParameter("application/json", data, ParameterType.RequestBody);

                var response = client.Execute(request);

                redata = response.Content;

                if (string.IsNullOrEmpty(redata))

                {

                    LogHelper.WriteFeeder("查询结果为空，参数为：" + data);

                }

                Dictionary<string, object> ddd = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, object>>(redata);

                if (ddd == null || !ddd.ContainsKey("data"))

                {

                    LogHelper.WriteFeeder("查询结果:" + redata);

                    return dic;

                }

                JArray array = JArray.Parse(ddd["data"].ToString());

                double value = 0;

                double xedl = 0;

                List<FeederLog> logs = new List<FeederLog>();

                foreach (var a in array)

                {

                    if (a == null) continue;

                    foreach (var aa in a.Children())

                    {

                        if (aa == null) continue;

                        JsonConvert.DeserializeObject<Dictionary<string, double>>(aa.First.ToString()).TryGetValue("k_10_7", out value);

                        value = value * 1000;

                        long oid = 0;

                        dicObj.TryGetValue(((JProperty)aa).Name, out oid);

                        dicX.TryGetValue(oid, out xedl);

                        dic.Add(oid, (xedl - value) <= 0 ? 0 : (xedl - value)); 

                    }

                }

                LogHelper.WriteFeeder("线路参数：" + data + Environment.NewLine + "线路输出：" + redata);

                timeSpan = DateTime.Now - _starTime;
                m= m+ timeSpan.Milliseconds+ timeSpan.Seconds*1000+timeSpan.Minutes * 60 * 1000;
                LogHelper.WriteInfo(string.Format("获取线路" + xl_oid + "联络线路LOAD，共耗时{0}分{1}秒{2}毫秒", timeSpan.Minutes, timeSpan.Seconds, timeSpan.Milliseconds));

            }

            catch (Exception ex)

            {

                LogHelper.WriteError("GetFeederLoadData异常：", ex);

                //status = -1;

                //throw new Exception(ex.StackTrace + Environment.NewLine + ex.Message);

            }

            return dic;

        }

        public struct FeederInfos

        {

            public long oid;//当前线路的oid

            public string TIME_MAX;//当前线路的最大时刻

            public double XEDL;//限额电流

            public object OBJ_ID;//OBJ_ID

        }

        public Dictionary<long, Dictionary<long, double>> GetFeederLoadDataByTask(DataTable dtFeeder, Dictionary<long, List<long>> dicFeeders, string sgcode, string deptcode, out int status, decimal taskCount)

        {

            LogHelper.WriteFeeder("1、馈线负荷地址：" + ConfigClass.LoadDataIp);

            Dictionary<long, Dictionary<long, double>> dic = new Dictionary<long, Dictionary<long, double>>();

            status = 0;

            if (dicFeeders == null || dicFeeders.Count == 0)

            {

                LogHelper.WriteFeeder("馈线集合为空或者null");

                return dic;

            }

            DateTime _starTime = DateTime.Now;

            TimeSpan timeSpan = TimeSpan.Zero;

            int totalCount = dicFeeders.Count;

            decimal count = Math.Ceiling(totalCount / taskCount);

            Dictionary<long, FeederInfos> listInfo = new Dictionary<long, FeederInfos>();

            foreach (DataRow item in dtFeeder.Rows)

            {

                if (string.IsNullOrEmpty(item["OBJ_ID"].ToString())) continue;

                FeederInfos info = new FeederInfos();

                info.oid = (long)item["xl_oid"];

                info.TIME_MAX = item["TIME_MAX"].ToString();

                info.XEDL = item["XEDL"] == DBNull.Value ? 0 : Convert.ToDouble(item["XEDL"].ToString());

                info.OBJ_ID = item["OBJ_ID"];

                listInfo.Add(info.oid, info);

            }

            LogHelper.WriteFeeder("获取馈线的信息数量为：" + listInfo.Count);

            List<Task<Dictionary<long, Dictionary<long, double>>>> list = new List<Task<Dictionary<long, Dictionary<long, double>>>>();

            for (int i = 0; i < taskCount; i++)

            {

                Dictionary<long, List<long>> dics = new Dictionary<long, List<long>>();

                int j = 0;

                foreach (var item in dicFeeders.Keys)

                {

                    if (j >= count * i && j < count * (i + 1))

                    {

                        dics.Add(item, dicFeeders[item]);

                    }

                    j++;

                }

                Task<Dictionary<long, Dictionary<long, double>>> t1 = new Task<Dictionary<long, Dictionary<long, double>>>(() =>

                {

                    LogHelper.WriteFeeder("线程开始：");

                    Dictionary<long, Dictionary<long, double>> pairs = new Dictionary<long, Dictionary<long, double>>();

                    foreach (var item in dics.Keys)

                    {

                        pairs.Add(item, GetFeederLoadByOne(listInfo, item, dics[item], sgcode, deptcode));

                    }

                    return pairs;

                });

                t1.Start();

                list.Add(t1);

            }

            Task.WaitAll(list.ToArray());

            for (int i = 0; i < list.Count; i++)

            {

                var result = list[i].Result;

                foreach (var item in result)

                {

                    dic.Add(item.Key, item.Value);

                }

            }

            timeSpan = DateTime.Now - _starTime;

            LogHelper.WriteInfo(string.Format("获取线路联络线路LOAD，共耗时{0}分{1}秒{2}毫秒", timeSpan.Minutes, timeSpan.Seconds, timeSpan.Milliseconds));

            return dic;

        }

        public Dictionary<long, double> GetFeederLoadByOne(Dictionary<long, FeederInfos> listInfo, long xl_oid, List<long> oids, string sgcode, string deptcode)

        {

            Dictionary<long, double> dic = new Dictionary<long, double>();

            Dictionary<object, long> dicObj = new Dictionary<object, long>();

            Dictionary<long, double> dicX = new Dictionary<long, double>();

            try

            {

                StringBuilder sb = new StringBuilder();

                for (int i = 0; i < oids.Count; i++)

                {

                    if (!listInfo.ContainsKey(oids[i])) continue;

                    if (i == oids.Count - 1)

                    {

                        sb.Append(listInfo[oids[i]].OBJ_ID);

                    }

                    else

                    {

                        sb.Append(listInfo[oids[i]].OBJ_ID + ",");

                    }

                    dicObj.Add(listInfo[oids[i]].OBJ_ID, listInfo[oids[i]].oid);

                    dicX.Add(listInfo[oids[i]].oid, listInfo[oids[i]].XEDL);

                }

                if (sb.Length == 0) return dic;

                LogHelper.WriteFeeder("获取参数：");

                LoadData loadData = new LoadData();

                loadData.srvCode = "00000002";

                loadData.equipType = "0304";

                loadData.equipId = sb.ToString();

                loadData.sgcode = sgcode;

                loadData.funcCode = "01";

                loadData.periods = listInfo[xl_oid].TIME_MAX;

                loadData.deptcode = deptcode;

                loadData.type = "01";

                loadData.serialNo = "FF000000-0000-0050-0000-000000000600-02216";

                LoadInfo info = new LoadInfo();

                info.user = "8ad5979d66ec89dd016936e0524b5e07";

                info.serviceCode = "ele_calc_run_service_zb";//固定值

                info.data = new List<LoadData>() { loadData };

                string data = JsonConvert.SerializeObject(info);

                string redata = "";

                var client = new RestClient(ConfigClass.LoadDataIp);

                var request = new RestRequest(Method.POST);

                request.Timeout = 10000;

                request.AddParameter("application/json", data, ParameterType.RequestBody);

                var response = client.Execute(request);

                redata = response.Content;

                if (string.IsNullOrEmpty(redata))

                {

                    LogHelper.WriteFeeder("查询返回值为空!请手动验证" + Environment.NewLine + "参数为：" + data);

                }

                //redata = "{ \"data\":  [{\"ABCDEFGHIJKLMN0\": {\"k_10_7\": 4.968},\"ABCDEFGHIJKLMN1\": {\"k_10_7\": 14.968},\"ABCDEFGHIJKLMN2\": {\"k_10_7\": 24.968},\"ABCDEFGHIJKLMN3\": {\"k_10_7\": 34.968}, 	\"ABCDEFGHIJKLMN4\": {\"k_10_7\": 44.968},\"ABCDEFGHIJKLMN5\": {\"k_10_7\": 54.968},\"ABCDEFGHIJKLMN6\": {\"k_10_7\": 64.968},\"ABCDEFGHIJKLMN7\": {\"k_10_7\": 74.968},\"ABCDEFGHIJKLMN8\": {\"k_10_7\": 84.968}, 	\"ABCDEFGHIJKLMN9\": {\"k_10_7\": 94.968}, 	}   	],    \"failCode\": \"001\"}";

                Dictionary<string, object> ddd = Newtonsoft.Json.JsonConvert.DeserializeObject<Dictionary<string, object>>(redata);

                if (ddd == null || !ddd.ContainsKey("data")) return dic;

                JArray array = JArray.Parse(ddd["data"].ToString());

                double value = 0;

                double xedl = 0;

                foreach (var a in array)

                {

                    if (a == null) continue;

                    foreach (var aa in a.Children())

                    {

                        if (aa == null) continue;

                        JsonConvert.DeserializeObject<Dictionary<string, double>>(aa.First.ToString()).TryGetValue("k_10_7", out value);

                        value = value * 1000;

                        long oid = 0;

                        dicObj.TryGetValue(((JProperty)aa).Name, out oid);

                        if (oid == 0) continue;

                        dicX.TryGetValue(oid, out xedl);

                        dic.Add(oid, (xedl - value) <= 0 ? 0 : (xedl - value));

                    }

                }

                LogHelper.WriteFeeder("线路参数：" + data + Environment.NewLine + "线路输出：" + redata);

            }

            catch (Exception ex)

            {

                LogHelper.WriteError("GetFeederLoadData异常：", ex);

                //status = -1;

                //throw new Exception(ex.StackTrace + Environment.NewLine + ex.Message);

            }



            return dic;

        }







        /// <summary>

        /// 删除无效数据

        /// </summary>

        /// <param name="dt">接口表</param>

        /// <param name="dtTempt"></param>

        private void DeleteInvalidData(ref DataTable dt, ref DataTable dtTempt)

        {

            try

            {

                var query = from t in dt.Select("equips='stopequips'").CopyToDataTable().AsEnumerable()

                            group t by new { t1 = t.Field<long>("cxkg"), t2 = t.Field<long>("cxkglx") } into m

                            select new

                            {

                                oid = m.First().Field<long>("oid"),

                                equips = m.First().Field<string>("equips"),

                                typeid = m.First().Field<long>("typeid"),

                                cxkg = m.Key.t1,

                                cxkglx = m.Key.t2,

                                rowcount = m.Count()

                            };

                DataTable ddd = new DataTable();

                ddd.Columns.Add("cxkg", typeof(long));

                ddd.Columns.Add("cxkglx", typeof(long));

                foreach (var item in query.ToList())

                {

                    if (item.rowcount > 1)

                    {

                        ddd.Rows.Add(new object[] { item.cxkg, item.cxkglx });

                    }

                }

                string str = "xl_cxkg={0} and typeid={1}";

                string str1 = "cxkg={0} and cxkglx={1}";

                foreach (DataRow item in ddd.Rows)

                {

                    DataRow[] dr = dtTempt.Select(string.Format(str, item["cxkg"], item["cxkglx"]));

                    if (dr.Length > 0)

                    {

                        for (int i = 0; i < dr.Length; i++)

                        {

                            dtTempt.Rows.Remove(dr[i]);

                        }

                    }

                    DataRow[] dr1 = dt.Select(string.Format(str1, item["cxkg"], item["cxkglx"]));

                    if (dr1.Length > 0)

                    {

                        for (int i = 0; i < dr1.Length; i++)

                        {

                            dt.Rows.Remove(dr1[i]);

                        }

                    }

                }



            }

            catch (Exception ex)

            {

                throw new Exception(ex.StackTrace + Environment.NewLine + ex.Message);

            }

        }



        /// <summary>

        /// 根据条件筛选并返回表

        /// </summary>

        /// <param name="dt">原始表</param>

        /// <param name="condition">条件</param>

        /// <returns></returns>

        private static DataTable GetTableByCondition(DataTable dt, string condition)

        {

            DataRow[] dr = dt.Select(condition);

            return dr.Length == 0 ? dt.Clone() : dr.CopyToDataTable();

        }

        private DataTable GetDataTableByPara(DataTable dtpara_Sub)

        {

            DataTable dt = new DataTable();

            dt.Columns.Add("oid", typeof(long));

            dt.Columns.Add("equips", typeof(string));

            dt.Columns.Add("typeid", typeof(long));

            dt.Columns.Add("cxkg", typeof(long));

            dt.Columns.Add("cxkglx", typeof(long));

            List<DeviceInfo> listInfo = new List<DeviceInfo>();

            List<object> listOid = new List<object>();

            DeviceInfo devInfo;

            foreach (DataRow drpara in dtpara_Sub.Rows)

            {

                if (drpara["typeid"].ToString() == "0") continue;

                if (listOid.Contains(drpara["xl_cxkg"])) continue;

                listOid.Add(drpara["xl_cxkg"]);

                devInfo = new DeviceInfo();

                devInfo.typeid = (long)drpara["typeid"];

                devInfo.oid = (long)drpara["xl_cxkg"];

                listInfo.Add(devInfo);

            }

            listOid.Clear();

            if (listInfo.Count == 0) return dt;

            string condition = "&condition=(sbtype = 311000 and fsbzlx in (30000000) ) &topoState=3";

            ParaInfo paraInfo = new ParaInfo();

            paraInfo.equip = listInfo;

            string parameter = JsonConvert.SerializeObject(paraInfo);

            string url = ConfigClass.ServerDataIp + parameter + condition;

            LogHelper.WriteInfo("url:" + url);

            var client = new RestClient(url);

            var request = new RestRequest();

            request.Timeout = 10000;

            RestResponse response = (RestResponse)client.Execute(request);

            if (response.Content == null) return dt;

            INFO info = JsonConvert.DeserializeObject<INFO>(response.Content);

            if (info == null) return dt;

            List<ResultValue> list = info.resultValue;

            ;

            if (list == null) return dt;

            foreach (ResultValue result in list)

            {

                if (result == null) continue;

                if (result.resultValue == null) continue;

                foreach (ResultValueInfo resInfo in result.resultValue)

                {

                    if (resInfo == null) continue;

                    if (resInfo.lastequips != null)

                    {

                        foreach (DeviceInfo item in resInfo.lastequips)

                        {

                            dt.Rows.Add(new object[] { item.oid, "lastequips", item.typeid, result.oid, result.typeid });

                        }

                    }

                    if (resInfo.otherequips != null)

                    {

                        foreach (DeviceInfo item in resInfo.otherequips)

                        {

                            dt.Rows.Add(new object[] { item.oid, "otherequips", item.typeid, result.oid, result.typeid });

                        }

                    }

                    if (resInfo.stopequips != null)

                    {

                        foreach (DeviceInfo item in resInfo.stopequips)

                        {

                            dt.Rows.Add(new object[] { item.oid, "stopequips", item.typeid, result.oid, result.typeid });

                        }

                    }

                }

            }

            return dt;

        }

        private DataTable GetDataTableByPara1(DataTable dtpara_Sub)
        {

            DataTable dt = new DataTable();

            dt.Columns.Add("oid", typeof(long));

            dt.Columns.Add("equips", typeof(string));

            dt.Columns.Add("typeid", typeof(long));

            dt.Columns.Add("cxkg", typeof(long));

            dt.Columns.Add("cxkglx", typeof(long));

            List<DeviceInfo> listInfo = new List<DeviceInfo>();

            List<object> listOid = new List<object>();

            string parameter;

            string url = "";

            DeviceInfo devInfo;

            

            string condition = "&condition=(sbtype = 311000 and fsbzlx in (30000000) ) &topoState=3";

             ConfigClass.ServerDataIp = " http://172.16.144.246/mygisserver/?request=SearchByCondition&equipparams=";//运行时注释掉

            foreach (DataRow drpara in dtpara_Sub.Rows)

            {

                try

                {

                    if (drpara["typeid"].ToString() == "0") continue;

                    if (listOid.Contains(drpara["xl_cxkg"])) continue;

                    listOid.Add(drpara["xl_cxkg"]);

                    devInfo = new DeviceInfo();

                    devInfo.typeid = (long)drpara["typeid"];

                    devInfo.oid = (long)drpara["xl_cxkg"];

                    listInfo.Add(devInfo);

                    ParaInfo paraInfo = new ParaInfo();

                    paraInfo.equip = new List<DeviceInfo>() { devInfo };

                    parameter = JsonConvert.SerializeObject(paraInfo);

                    url = ConfigClass.ServerDataIp + parameter + condition;

                    LogHelper.WriteInfo("url:" + url);

                    var client = new RestClient(url);

                    var request = new RestRequest();

                    request.Timeout = 10000;

                    RestResponse response = (RestResponse)client.Execute(request);

                    if (response.Content == null) continue;

                    ResultValueInfo resInfo = JsonConvert.DeserializeObject<ResultValueInfo>(response.Content);

                    if (resInfo == null) continue;

                    if (resInfo.lastequips != null)

                    {

                        foreach (DeviceInfo item in resInfo.lastequips)

                        {

                            dt.Rows.Add(new object[] { item.oid, "lastequips", item.typeid, devInfo.oid, devInfo.typeid });

                        }

                    }

                    if (resInfo.otherequips != null)

                    {

                        foreach (DeviceInfo item in resInfo.otherequips)

                        {

                            dt.Rows.Add(new object[] { item.oid, "otherequips", item.typeid, devInfo.oid, devInfo.typeid });

                        }

                    }

                    if (resInfo.stopequips != null)

                    {

                        foreach (DeviceInfo item in resInfo.stopequips)

                        {

                            dt.Rows.Add(new object[] { item.oid, "stopequips", item.typeid, devInfo.oid, devInfo.typeid });

                        }

                    }

                }

                catch (Exception ex)

                {

                    LogHelper.WriteError("url查询异常，url：" + url, ex);

                }

            }

            listOid.Clear();

            return dt;

        }

    }

}

