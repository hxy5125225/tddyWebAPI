using Npgsql;
using NpgsqlTypes;
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace DBConnector.PG
{
    public class PGClass
    {
        public static string task_id ="l111111111132";
        /// <summary>
        /// 查询数据库
        /// </summary>
        /// <param name="sql">sql脚本</param>
        /// <returns>DataTable</returns>
        public static DataTable QueryNpgDatabase(string sql)
        {
            DataTable dt = new DataTable();
            try
            {
                using (NpgsqlConnection cn = new NpgsqlConnection(ConfigClass.PGConString))
                {
                    cn.Open();
                    using (NpgsqlCommand cmd = new NpgsqlCommand(sql, cn))
                    {
                        using (NpgsqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (!reader.HasRows) return dt;
                            object[] value = new object[reader.FieldCount];
                            dt = CreateTableBySchemaTable(reader.GetSchemaTable());
                            while (reader.Read())
                            {
                                reader.GetValues(value);
                                dt.LoadDataRow(value, true);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {

                throw new Exception(ex.StackTrace);
            }
            return dt;

        }
        /// <summary>
        /// 查询数据库
        /// </summary>
        /// <param name="cn">NpgsqlConnection连接</param>
        /// <param name="sql">sql脚本</param>
        /// <returns>DataTable</returns>
        public static DataTable QueryNpgDatabase(NpgsqlConnection cn, string sql)
        {
            DataTable dt = new DataTable();
            int count = 0;
           
            try
            {
                if (cn.State != ConnectionState.Open)
                    cn.Open();
                using (NpgsqlCommand cmd = new NpgsqlCommand(sql, cn))
                {
                    using (NpgsqlDataReader reader = cmd.ExecuteReader())
                    {
                        if (!reader.HasRows) return dt;
                       
                        object[] value = new object[reader.FieldCount];
                        dt = CreateTableBySchemaTable(reader.GetSchemaTable());
                        while (reader.Read())
                        {
                            reader.GetValues(value);
                            dt.LoadDataRow(value, true);
                        }
                    }
                }
            }
            catch (Exception ex)
            {

                throw new Exception(ex.StackTrace);
            }
            return dt;
        }
        public static DataTable CreateTableBySchemaTable(DataTable pSchemaTable)
        {
            DataTable dtReturn = new DataTable();
            DataColumn dc = null;
            DataRow dr = null;
            for (int i = 0; i < pSchemaTable.Rows.Count; i++)
            {
                dr = pSchemaTable.Rows[i];
                dc = new DataColumn(dr["ColumnName"].ToString(), dr["DataType"] as Type);
                dtReturn.Columns.Add(dc);
            }
            dr = null;
            dc = null;
            return dtReturn;
        }
        public static void ExecuteNoneQuery(DataTable dt)
        {
            using (NpgsqlConnection cn = new NpgsqlConnection(ConfigClass.PGConString))
            {
                cn.Open();
                foreach (DataRow dr in dt.Rows)
                {
                    //oid,equips,typeid,chkg)
                    string sql = string.Format(ConfigClass.PG_InsertSql, dr["oid"].ToString(), dr["equips"].ToString(), dr["typeid"].ToString(), dr["cxkg"].ToString());
                    using (NpgsqlCommand cmd = new NpgsqlCommand(sql, cn))
                    {
                        cmd.CommandType = CommandType.Text;
                        cmd.ExecuteNonQuery();
                    }
                }
            }

        }
        public static void ExecuteNoneQuery(string sql)
        {
            using (NpgsqlConnection cn = new NpgsqlConnection(ConfigClass.PGConString))
            {
                cn.Open();
                using (NpgsqlCommand cmd = new NpgsqlCommand(sql, cn))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
            }

        }
        public static void ExecuteNoneQuery(string sql, NpgsqlConnection cn)
        {
            if (string.IsNullOrEmpty(sql)) return; 
            try
            {
                if (cn.State != ConnectionState.Open)
                    cn.Open();
                using (NpgsqlCommand cmd = new NpgsqlCommand(sql, cn))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
            }
            catch (Exception ex)
            {

                throw new Exception(ex.Message);
            }
        }
        /// <summary>
        /// 创建临时表
        /// </summary>
        public static void CreateTempTable(NpgsqlConnection cn)
        {
            using (NpgsqlCommand cmd = new NpgsqlCommand(ConfigClass.PG_CreateTempTable, cn))
            {
                cmd.CommandType = CommandType.Text;
                cmd.ExecuteNonQuery();
            }
        }
        public static void CreateTempTable(DataTable dt, ref UserInfo userInfo)
        {
            using (NpgsqlConnection cn = new NpgsqlConnection(ConfigClass.PGConString))
            {
                cn.Open();
                using (NpgsqlCommand cmd = new NpgsqlCommand(ConfigClass.PG_CreateTempTable, cn))
                {
                    cmd.CommandType = CommandType.Text;
                    cmd.ExecuteNonQuery();
                }
                WriteToServer<ServerDBInfo>(dt, 1, cn);
                
                userInfo.dtFeeder = QueryNpgDatabase(cn, LightweightRAS.PublicKeyDecrypt(GZipUtil.UnZip(ConfigClass.PG_Qurey_XDXX)));
                //DataTable s = QueryNpgDatabase(cn, "select * from topo_sb_line_oid");
                userInfo.dtSwitch = QueryNpgDatabase(cn, LightweightRAS.PublicKeyDecrypt(GZipUtil.UnZip(ConfigClass.PG_Qurey_KGXX)));
            }
        }
        public static void CreateTopoWjfx(DataTable dt)
        {
            using (NpgsqlConnection cn = new NpgsqlConnection(ConfigClass.PGConString))
            {
                cn.Open();
                WriteToServer<TopoWjfx>(dt, 2, cn);

            }
        }

        public static string GetDeleteSql(DataRow[] dataRows)
        {
            return "delete from {0} where task_id=111111111133";
            if (dataRows==null||dataRows.Length == 0) return ""; 
            string sql = "delete from {0} where task_id in (";
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < dataRows.Length; i++)
            {
                if (i == dataRows.Length - 1)
                {
                    sb.Append("'" + dataRows[i]["bdz_id"] + "')");
                }
                else
                {
                    sb.Append("'" + dataRows[i]["bdz_id"] + "',");
                }
            } 
            sql += sb.ToString();
            return sql;
        }


        /// <summary>
        /// 批量写入
        /// tabType:
        ///         1:表1
        ///         2：表2
        ///         3：表3
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="data"></param>
        /// <param name="tabType"></param>
        public static void WriteToServer<T>(DataTable data, int tabType, NpgsqlConnection conn)
        {
            try
            {
                string DestinationTableName = "topo_zyxl.topo_sb_line_oid";
                string sql = "";
                if (tabType == 1)
                {
                    DestinationTableName = "topo_sb_line_oid";
                    sql = "SELECT oid,equips,typeid,cxkg  FROM {0} LIMIT 1";
                }
                else if (tabType == 2)
                {
                    DestinationTableName = "topo_zyxl.topo_zyxl_wjfx";
                    sql = "SELECT oid,fdxx,fxx,geojson,type  FROM {0} LIMIT 1";
                }
                else if (tabType == 3)
                {
                    DestinationTableName = "";
                    sql = "SELECT oid,equips,typeid,cxkg,年份,start_conn ,end_conn ,sbzlx,type, devicetype, devicename ,blackname,kgzt ,sbid ,xlcd   FROM {0} LIMIT 1";
                }
                if (string.IsNullOrEmpty(DestinationTableName)) return;
                System.Reflection.PropertyInfo[] properties = typeof(T).GetProperties();
                int colCount = properties.Length;

                NpgsqlDbType[] types = new NpgsqlDbType[colCount];
                int[] lengths = new int[colCount];
                string[] fieldNames = new string[colCount];
                using (var cmd = new NpgsqlCommand(string.Format(sql, DestinationTableName), conn))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        if (rdr.FieldCount != colCount)
                        {
                            throw new ArgumentOutOfRangeException("dataTable", "Column count in Destination Table does not match column count in source table.");
                        }
                        var columns = rdr.GetColumnSchema();
                        for (int i = 0; i < colCount; i++)
                        {
                            if (tabType == 2)
                            {
                                if (i == 1 || i == 3 || i == 2)
                                {
                                    types[i] = columns[i].NpgsqlDbType != null ? (NpgsqlDbType)columns[i].NpgsqlDbType : NpgsqlDbType.Json;
                                }
                                else
                                {
                                    types[i] = (NpgsqlDbType)columns[i].NpgsqlDbType;
                                }
                            }
                            else
                            {
                                types[i] = (NpgsqlDbType)columns[i].NpgsqlDbType;
                            }
                            lengths[i] = columns[i].ColumnSize == null ? 0 : (int)columns[i].ColumnSize;
                            fieldNames[i] = columns[i].ColumnName;
                        }
                    }

                }
                var sB = new StringBuilder(fieldNames[0]);
                for (int p = 1; p < colCount; p++)
                {
                    sB.Append(", " + fieldNames[p]);
                }
                using (var writer = conn.BeginBinaryImport("COPY " + DestinationTableName + " (" + sB.ToString() + ") FROM STDIN (FORMAT BINARY)"))
                {
                    object value;
                    foreach (DataRow t in data.Rows)
                    {
                        writer.StartRow();

                        for (int i = 0; i < colCount; i++)
                        {
                            value = t[i];
                            if (value == null)
                            {
                                writer.WriteNull();
                            }
                            else
                            {
                                switch (types[i])
                                {
                                    case NpgsqlDbType.Bigint:
                                        writer.Write((long)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Bit:
                                        if (lengths[i] > 1)
                                        {
                                            writer.Write((byte[])value, types[i]);
                                        }
                                        else
                                        {
                                            writer.Write((byte)value, types[i]);
                                        }
                                        break;
                                    case NpgsqlDbType.Boolean:
                                        writer.Write((bool)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Bytea:
                                        writer.Write((byte[])value, types[i]);
                                        break;
                                    case NpgsqlDbType.Char:
                                        if (properties[i].GetType() == typeof(string))
                                        {
                                            writer.Write((string)value, types[i]);
                                        }
                                        else if (properties[i].GetType() == typeof(Guid))
                                        {
                                            writer.Write(value.ToString(), types[i]);
                                        }

                                        else if (lengths[i] > 1)
                                        {
                                            writer.Write((char[])value, types[i]);
                                        }
                                        else
                                        {

                                            var s = ((string)value.ToString()).ToCharArray();
                                            writer.Write(s[0], types[i]);
                                        }
                                        break;
                                    case NpgsqlDbType.Time:
                                    case NpgsqlDbType.Timestamp:
                                    case NpgsqlDbType.TimestampTz:
                                    case NpgsqlDbType.Date:
                                        writer.Write((DateTime)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Double:
                                        writer.Write((double)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Integer:
                                        try
                                        {
                                            if (properties[i].GetType() == typeof(int))
                                            {
                                                writer.Write((int)value, types[i]);
                                                break;
                                            }
                                            else if (properties[i].GetType() == typeof(string))
                                            {
                                                var swap = Convert.ToInt32(value);
                                                writer.Write((int)swap, types[i]);
                                                break;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            string sh = ex.Message;
                                        }

                                        writer.Write((object)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Interval:
                                        writer.Write((TimeSpan)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Numeric:
                                    case NpgsqlDbType.Money:
                                        writer.Write((double)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Real:
                                        writer.Write((Single)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Smallint:

                                        try
                                        {
                                            if (properties[i].GetType() == typeof(byte))
                                            {
                                                var swap = Convert.ToInt16(value);
                                                writer.Write((short)swap, types[i]);
                                                break;
                                            }
                                            writer.Write((short)value, types[i]);
                                        }
                                        catch (Exception ex)
                                        {
                                            string ms = ex.Message;
                                        }

                                        break;
                                    case NpgsqlDbType.Varchar:
                                    case NpgsqlDbType.Text:
                                        writer.Write((string)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Uuid:
                                        writer.Write((Guid)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Xml:
                                        writer.Write((string)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Json:
                                        writer.Write(value, types[i]);
                                        break;
                                    case NpgsqlDbType.Jsonb:
                                        writer.Write(value, types[i]);
                                        break;
                                }
                            }
                        }
                    }
                    writer.Complete();
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error executing NpgSqlBulkCopy.WriteToServer().  See inner exception for details", ex);
            }
        } 
        public static void WriteToServer(DataTable data, string DestinationTableName, NpgsqlConnection conn)
        {
            try
            {
                if (data == null || data.Rows.Count == 0) return; 
                if (string.IsNullOrEmpty(DestinationTableName)) return;
                DataColumnCollection collection = data.Columns;
                System.Type[] dbTypes = new System.Type[collection.Count];
                int colCount = collection.Count;
                List<string> listName = new List<string>();
                for (int i = 0; i < colCount; i++)
                {
                    dbTypes[i] = collection[i].DataType;
                    listName.Add(collection[i].ColumnName);
                }
                NpgsqlDbType[] types = new NpgsqlDbType[colCount];
                int[] lengths = new int[colCount];
                string[] fieldNames = new string[colCount];

                using (var cmd = new NpgsqlCommand(string.Format(ConfigClass.Query_Columns, DestinationTableName), conn))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        var columns = rdr.GetColumnSchema();
                        int count = 0;
                        for (int i = 0; i < columns.Count; i++)
                        {
                            if (!listName.Contains(columns[i].ColumnName)) continue;
                            int c = listName.IndexOf(columns[i].ColumnName);
                            types[c] = (NpgsqlDbType)columns[i].NpgsqlDbType;
                            lengths[c] = columns[i].ColumnSize == null ? 0 : (int)columns[i].ColumnSize;
                            fieldNames[c] = columns[i].ColumnName;
                            count++;
                        }
                    }

                }
                var sB = new StringBuilder(fieldNames[0]);
                for (int p = 1; p < colCount; p++)
                {
                    sB.Append(", " + fieldNames[p]);
                }
                using (var writer = conn.BeginBinaryImport("COPY " + DestinationTableName + " (" + sB.ToString() + ") FROM STDIN (FORMAT BINARY)"))
                {
                    object value;
                    foreach (DataRow t in data.Rows)
                    {
                        writer.StartRow();

                        for (int i = 0; i < colCount; i++)
                        {
                            value = t[fieldNames[i]];
                            if (value == null)
                            {
                                writer.WriteNull();
                            }
                            else
                            {
                                switch (types[i])
                                {
                                    case NpgsqlDbType.Bigint:
                                        writer.Write(string.IsNullOrEmpty(value.ToString()) ? 0 : (long)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Bit:
                                        if (lengths[i] > 1)
                                        {
                                            writer.Write((byte[])value, types[i]);
                                        }
                                        else
                                        {
                                            writer.Write((byte)value, types[i]);
                                        }
                                        break;
                                    case NpgsqlDbType.Boolean:
                                        writer.Write((bool)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Bytea:
                                        writer.Write((byte[])value, types[i]);
                                        break;
                                    case NpgsqlDbType.Char:
                                        if (dbTypes[i] == typeof(string))
                                        {
                                            writer.Write((string)value, types[i]);
                                        }
                                        else if (dbTypes[i] == typeof(Guid))
                                        {
                                            writer.Write(value.ToString(), types[i]);
                                        }

                                        else if (lengths[i] > 1)
                                        {
                                            writer.Write((char[])value, types[i]);
                                        }
                                        else
                                        {

                                            var s = ((string)value.ToString()).ToCharArray();
                                            writer.Write(s[0], types[i]);
                                        }
                                        break;
                                    case NpgsqlDbType.Time:
                                    case NpgsqlDbType.Timestamp:
                                    case NpgsqlDbType.TimestampTz:
                                    case NpgsqlDbType.Date:
                                        writer.Write((DateTime)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Double:
                                        writer.Write((double)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Integer:
                                        try
                                        {
                                            if (dbTypes[i] == typeof(int))
                                            {
                                                writer.Write((int)value, types[i]);
                                                break;
                                            }
                                            else if (dbTypes[i] == typeof(string))
                                            {
                                                var swap = Convert.ToInt32(value);
                                                writer.Write((int)swap, types[i]);
                                                break;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            string sh = ex.Message;
                                        }

                                        writer.Write((object)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Interval:
                                        writer.Write((TimeSpan)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Numeric:
                                    case NpgsqlDbType.Money:
                                        writer.Write((decimal)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Real:
                                        writer.Write((Single)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Smallint:

                                        try
                                        {
                                            if (dbTypes[i] == typeof(byte))
                                            {
                                                var swap = Convert.ToInt16(value);
                                                writer.Write((short)swap, types[i]);
                                                break;
                                            }
                                            writer.Write((Int32)value, types[i]);
                                        }
                                        catch (Exception ex)
                                        {
                                            string ms = ex.Message;
                                        }

                                        break;
                                    case NpgsqlDbType.Varchar:
                                    case NpgsqlDbType.Text:
                                        writer.Write((string)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Uuid:
                                        writer.Write((Guid)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Xml:
                                        writer.Write((string)value, types[i]);
                                        break;
                                }
                            }
                        }
                    }
                    writer.Complete();
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error executing NpgSqlBulkCopy.WriteToServer().  See inner exception for details", ex);
            }
        }

        public static void WriteToServer(DataTable data, string DestinationTableName,string connString)
        {
            NpgsqlConnection conn = null;
            try
            {
                if (data == null || data.Rows.Count == 0) return;
                if (string.IsNullOrEmpty(DestinationTableName)) return;
                DataColumnCollection collection = data.Columns;
                System.Type[] dbTypes = new System.Type[collection.Count];
                int colCount = collection.Count;
                List<string> listName = new List<string>();
                for (int i = 0; i < colCount; i++)
                {
                    dbTypes[i] = collection[i].DataType;
                    listName.Add(collection[i].ColumnName);
                }
                NpgsqlDbType[] types = new NpgsqlDbType[colCount];
                int[] lengths = new int[colCount];
                string[] fieldNames = new string[colCount];
                conn = new NpgsqlConnection(connString);
                conn.Open();
                using (var cmd = new NpgsqlCommand(string.Format(ConfigClass.Query_Columns, DestinationTableName), conn))
                {
                    using (var rdr = cmd.ExecuteReader())
                    {
                        var columns = rdr.GetColumnSchema();
                        int count = 0;
                        for (int i = 0; i < columns.Count; i++)
                        {
                            if (!listName.Contains(columns[i].ColumnName)) continue;
                            types[count] = (NpgsqlDbType)columns[i].NpgsqlDbType;
                            lengths[count] = columns[i].ColumnSize == null ? 0 : (int)columns[i].ColumnSize;
                            fieldNames[count] = columns[i].ColumnName;
                            count++;
                        }
                    }

                }
                var sB = new StringBuilder(fieldNames[0]);
                for (int p = 1; p < colCount; p++)
                {
                    sB.Append(", " + fieldNames[p]);
                }
                using (var writer = conn.BeginBinaryImport("COPY " + DestinationTableName + " (" + sB.ToString() + ") FROM STDIN (FORMAT BINARY)"))
                {
                    object value;
                    foreach (DataRow t in data.Rows)
                    {
                        writer.StartRow();

                        for (int i = 0; i < colCount; i++)
                        {
                            value = t[fieldNames[i]];
                            if (value == null)
                            {
                                writer.WriteNull();
                            }
                            else
                            {
                                switch (types[i])
                                {
                                    case NpgsqlDbType.Bigint:
                                        writer.Write(string.IsNullOrEmpty(value.ToString()) ? 0 : (long)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Bit:
                                        if (lengths[i] > 1)
                                        {
                                            writer.Write((byte[])value, types[i]);
                                        }
                                        else
                                        {
                                            writer.Write((byte)value, types[i]);
                                        }
                                        break;
                                    case NpgsqlDbType.Boolean:
                                        writer.Write((bool)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Bytea:
                                        writer.Write((byte[])value, types[i]);
                                        break;
                                    case NpgsqlDbType.Char:
                                        if (dbTypes[i] == typeof(string))
                                        {
                                            writer.Write((string)value, types[i]);
                                        }
                                        else if (dbTypes[i] == typeof(Guid))
                                        {
                                            writer.Write(value.ToString(), types[i]);
                                        }

                                        else if (lengths[i] > 1)
                                        {
                                            writer.Write((char[])value, types[i]);
                                        }
                                        else
                                        {

                                            var s = ((string)value.ToString()).ToCharArray();
                                            writer.Write(s[0], types[i]);
                                        }
                                        break;
                                    case NpgsqlDbType.Time:
                                    case NpgsqlDbType.Timestamp:
                                    case NpgsqlDbType.TimestampTz:
                                    case NpgsqlDbType.Date:
                                        writer.Write((DateTime)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Double:
                                        writer.Write((double)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Integer:
                                        try
                                        {
                                            if (dbTypes[i] == typeof(int))
                                            {
                                                writer.Write((int)value, types[i]);
                                                break;
                                            }
                                            else if (dbTypes[i] == typeof(string))
                                            {
                                                var swap = Convert.ToInt32(value);
                                                writer.Write((int)swap, types[i]);
                                                break;
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            string sh = ex.Message;
                                        }

                                        writer.Write((object)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Interval:
                                        writer.Write((TimeSpan)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Numeric:
                                    case NpgsqlDbType.Money:
                                        writer.Write((decimal)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Real:
                                        writer.Write((Single)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Smallint:

                                        try
                                        {
                                            if (dbTypes[i] == typeof(byte))
                                            {
                                                var swap = Convert.ToInt16(value);
                                                writer.Write((short)swap, types[i]);
                                                break;
                                            }
                                            writer.Write((short)value, types[i]);
                                        }
                                        catch (Exception ex)
                                        {
                                            string ms = ex.Message;
                                        }

                                        break;
                                    case NpgsqlDbType.Varchar:
                                    case NpgsqlDbType.Text:
                                        writer.Write((string)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Uuid:
                                        writer.Write((Guid)value, types[i]);
                                        break;
                                    case NpgsqlDbType.Xml:
                                        writer.Write((string)value, types[i]);
                                        break;
                                }
                            }
                        }
                    }
                    writer.Complete();
                }
            }
            catch (Exception ex)
            {
                throw new Exception("Error executing NpgSqlBulkCopy.WriteToServer().  See inner exception for details", ex);
            }
            finally {

                conn.Dispose();
            }
        }

        /// <summary>
        /// 结果写进数据库表
        /// </summary>
        /// <param name="dt">DataTable dt</param>
        /// <param name="con">NpgsqlConnection con</param>
        /// <param name="dicName">Dictionary<string,string> dicName;自定义生成的表格和数据库表格表头的对应字典</param>
        /// <param name="dicType">Dictionary<string ,System.Type> dicType；自定义数据库表格字段与类型的对应字典</param>
        /// /// <param name="tableName">string tableName；要插入的表格名称</param>
        public static void ContrastTableAndWrite(DataTable dt,NpgsqlConnection con,Dictionary<Dictionary<string,System.Type>,string> dicName,string tableName)
        {
            try
            {
                //1、创建对应数据库字段的表结构
                DataTable dtNew = new DataTable();
                foreach (var item in dicName)
                {
                    dtNew.Columns.Add(item.Key.First().Key, item.Key.First().Value);
                }
                //2、转换数据
                foreach (DataRow dr in dt.Rows)
                {
                    DataRow row = dtNew.NewRow();
                    foreach (var item in dicName)
                    {
                        row[item.Key.First().Key] = dr[item.Value];
                    }
                    dtNew.Rows.Add(row);
                }

                WriteToServer(dtNew, tableName, con);
            }
            catch (Exception ex)
            {
                string message = "";
            }
        }
        /// <summary>
        /// 拆分表格并插入到WJFX断面的各个表中
        /// </summary>
        /// <param name="dt">DataTable</param>
        public static void SplitTableSave_WJFX(DataTable dt,DataTable dtfd,DataTable dtfz)
        {
            try
            {
                using (NpgsqlConnection cn = new NpgsqlConnection(ConfigClass.PGGHConString))
                { 
                    string sql = "delete from {0} where task_id='"+ task_id + "'";
                    ExecuteNoneQuery(string.Format(sql, "wjfx.t_tx_zwyc_fd"), cn);
                    WriteToServer(dtfd, "wjfx.t_tx_zwyc_fd", cn);
                    ExecuteNoneQuery(string.Format(sql, "wjfx.t_tx_zwyc_fz"), cn);
                    WriteToServer(dtfz, "wjfx.t_tx_zwyc_fz", cn);

                    DataTable t_tx_znyc_dz = dt.Select("typeid =311000").CopyToDataTable();
                    t_tx_znyc_dz.Columns.Remove("typeid");
                    ExecuteNoneQuery(string.Format(sql, "wjfx.t_tx_znyc_dz"), cn);
                    WriteToServer(t_tx_znyc_dz, "wjfx.t_tx_znyc_dz", cn);

                    DataTable t_tx_zwyc_dld = dt.Select("typeid =201000").CopyToDataTable();
                    t_tx_zwyc_dld.Columns.Remove("typeid");
                    ExecuteNoneQuery(string.Format(sql, "wjfx.t_tx_zwyc_dld"), cn);
                    WriteToServer(t_tx_zwyc_dld, "wjfx.t_tx_zwyc_dld", cn);

                    DataTable t_tx_zwyc_dxd = dt.Select("typeid =101000").CopyToDataTable();
                    t_tx_zwyc_dxd.Columns.Remove("typeid");
                    ExecuteNoneQuery(string.Format(sql, "wjfx.t_tx_zwyc_dxd"), cn);
                    WriteToServer(t_tx_zwyc_dxd, "wjfx.t_tx_zwyc_dxd", cn);

                    DataTable t_tx_zwyc_zsbyq = dt.Select("typeid =110000").CopyToDataTable();
                    t_tx_zwyc_zsbyq.Columns.Remove("typeid");
                    ExecuteNoneQuery(string.Format(sql, "wjfx.t_tx_zwyc_zsbyq"), cn);
                    WriteToServer(t_tx_zwyc_zsbyq, "wjfx.t_tx_zwyc_zsbyq", cn);

                    DataTable t_tx_zwyc_zsdlq = dt.Select("typeid =111000").CopyToDataTable();
                    t_tx_zwyc_zsdlq.Columns.Remove("typeid");
                    ExecuteNoneQuery(string.Format(sql, "wjfx.t_tx_zwyc_zsdlq"), cn);
                    WriteToServer(t_tx_zwyc_zsdlq, "wjfx.t_tx_zwyc_zsdlq", cn);

                    DataTable t_tx_zwyc_zsfhkg = dt.Select("typeid =112000").CopyToDataTable();
                    t_tx_zwyc_zsfhkg.Columns.Remove("typeid");
                    ExecuteNoneQuery(string.Format(sql, "wjfx.t_tx_zwyc_zsfhkg"), cn);
                    WriteToServer(t_tx_zwyc_zsfhkg, "wjfx.t_tx_zwyc_zsfhkg", cn);

                    DataTable t_tx_zwyc_zsglkg = dt.Select("typeid =113000").CopyToDataTable();
                    t_tx_zwyc_zsglkg.Columns.Remove("typeid");
                    ExecuteNoneQuery(string.Format(sql, "wjfx.t_tx_zwyc_zsglkg"), cn);
                    WriteToServer(t_tx_zwyc_zsglkg, "wjfx.t_tx_zwyc_zsglkg", cn);

                    DataTable t_tx_zwyc_zwljx = dt.Select("typeid =130000").CopyToDataTable();
                    t_tx_zwyc_zwljx.Columns.Remove("typeid");
                    ExecuteNoneQuery(string.Format(sql, "wjfx.t_tx_zwyc_zwljx"), cn);
                    WriteToServer(t_tx_zwyc_zwljx, "wjfx.t_tx_zwyc_zwljx", cn);
                }
            } catch (Exception ex) 
            {
                //throw new Exception(ex.StackTrace+"\n"+ex.Message);
            }
        }
    }
    public class DBINFO
    {
        public long oid { get; set; }
        public string equips { get; set; }
        public long typeid { get; set; }
        public long cxkg { get; set; }
        public int 年份 { get; set; }
        public string start_conn { get; set; }
        public string end_conn { get; set; }
        public long sbzlx { get; set; }
        public string type { get; set; }
        //public string shape { get; set; }
        public int devicetype { get; set; }
        public string devicename { get; set; }
        public string blackname { get; set; }
        public int kgzt { get; set; }
        public string sbid { get; set; }
        public double xlcd { get; set; }
        //public string NAME { get; set; }
    }
    public class ServerDBInfo
    {
        public long oid { get; set; }
        public string equips { get; set; }
        public long typeid { get; set; }
        public long cxkg { get; set; }
    }
    public class CSINFO
    {
        public long oid { get; set; }
        public string sbmc { get; set; }
        public long dydj { get; set; }
        public long sbzlx { get; set; }
        public long ssdz { get; set; }
        public long ssjg { get; set; }
        public long kgzt { get; set; }
    }
    public class TOPO_BDZ
    {
        public long oid { get; set; }
        public string id { get; set; }
        public string sbmc { get; set; }
        public string sbsx { get; set; }
        public string sblx { get; set; }
        public string dydj { get; set; }
        public int zbts { get; set; }
        public string rlgc { get; set; }
        public decimal zbrl { get; set; }
        public long dm_id { get; set; }
    }
    public class TOPO_ZYXL
    {
        public long oid { get; set; }
        public string id { get; set; }
        public string sbmc { get; set; }
        public string ssbdz { get; set; }
        public string mxh { get; set; }
        public string dydj { get; set; }
        public string xlsx { get; set; }
        public decimal xedl { get; set; }
        public long cxkgid { get; set; }
        public long dm_id { get; set; }
    }
    public class TopoWjfx
    {
        public long oid { get; set; }
        public string fxx { get; set; }
        public string fdxx { get; set; }
        public string geojson { get; set; }
        public int type { get; set; }
    }
}
