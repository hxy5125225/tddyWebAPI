using Npgsql;
using Oracle.ManagedDataAccess.Client;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace DBConnector
{
    public class ConfigClass
    {
        /// <summary>
        /// PG连接字符串
        /// </summary>
        public static string PGConString { get; set; }
        public static string PG_GHDW_ConString { get; set; }
        public static string OracleConString { get; set; }
        public static string ServerDataIp { get; set; }
        public static string LoadDataIp { get; set; }
        public static string taskId { get; set; }
        public static string OracleIP { get; set; }
        public static string ORACLEPORT { get; set; }
        public static string ORACLESERVERNAME { get; set; }
        public static string ORACLEUSERID { get; set; }
        public static string ORACLEPASSWORD { get; set; }

        /// <summary>
        /// 初始化数据库连接
        /// </summary>
        /// <param name="ip"></param>
        /// <param name="port"></param>
        /// <param name="userId"></param>
        /// <param name="pwd"></param>
        /// <param name="dbName"></param>
        /// <param name="type">0：PG   1：PG_GHDW   2:Oracle</param>
        public static void Initial_PG_Config()
        {
            PGConString = ConfigClass.GetEnvironment("TDDY_PG");
            PG_GHDW_ConString = ConfigClass.GetEnvironment("TDDY_PG_GH");
            ServerDataIp = ConfigClass.GetEnvironment("TDDY_TOPO_URL");
            LoadDataIp = ConfigClass.GetEnvironment("TDDY_LOAD_URL");
            OracleIP = ConfigClass.GetEnvironment("TDDY_ORACLE_HOST");
            ORACLEPORT = ConfigClass.GetEnvironment("TDDY_ORACLE_PORT");
            ORACLESERVERNAME = ConfigClass.GetEnvironment("TDDY_ORACLE_SERVICE_NAME");
            ORACLEUSERID = ConfigClass.GetEnvironment("TDDY_ORACLE_USER_ID");
            ORACLEPASSWORD = ConfigClass.GetEnvironment("TDDY_ORACLE_PASSWORD");
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                OracleConString = "Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.16.144.251)(PORT=11521))(CONNECT_DATA=(SERVICE_NAME=pis)));Persist Security Info=True;User ID=pis;Password=New_2#4dba;";
            }
            else
            {
                OracleConString = "Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=" + OracleIP + ")(PORT=" + ORACLEPORT + "))(CONNECT_DATA=(SERVICE_NAME=" + ORACLESERVERNAME + ")));Persist Security Info=True;User ID=" + ORACLEUSERID + ";Password=" + ORACLEPASSWORD + ";";
            }
        }
        /// <summary>
        /// 负荷的接口的url
        /// </summary>
        public static string interfaceUrl_FH { get; set; } 
        //单位序号

        #region PG


        public static string PG_QuerySql
        {
            get
            {
                return "WITH line_id AS ( SELECT 130000108631 AS cxkg UNION ALL SELECT 130000120112 AS cxkg ) SELECT * FROM ( SELECT 2022 AS 年份, cxkg, equips, oid, start_conn, end_conn, sbzlx, type, ST_asText (shape) AS shape, devicetype, ( CASE WHEN devicetype = 3 THEN '开关' || RIGHT (CAST(oid AS VARCHAR), 4) ELSE NULL END ) AS devicename, ( CASE WHEN devicetype = 3 THEN '未配置终端分段开关' ELSE NULL END ) AS blackname, ( CASE WHEN kgzt = 536870912 THEN 0 ELSE 1 END ) AS kgzt, sbid, xlcd FROM ( SELECT a.cxkg, a.equips, a.oid, split_part ( get_conn_str (CONNECTION), ',', 2 ) AS start_conn, split_part ( get_conn_str (CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-断路器' AS type, 3 AS devicetype, shape, kgzt, CAST (NULL AS bigint) AS ssdz, b.sbid, 0.0 AS xlcd FROM ( SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 111000 AND cxkg IN (SELECT cxkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSDLQ b ON a.oid = b.oid UNION ALL SELECT a.cxkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '站外-超连接线' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 140000 AND cxkg IN(SELECT cxkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZWCLJX b ON a.oid = b.oid UNION ALL SELECT a.cxkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '站外-连接线' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 130000 AND cxkg IN(SELECT cxkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZWLJX b ON a.oid = b.oid UNION ALL SELECT a.cxkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '站外-电缆段' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, ST_Length(shape) AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 201000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_DLD b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '导线段' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, ST_Length(shape) AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 101000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_DXD b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-隔离开关' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 113000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSGLKG b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-负荷开关' AS type, 3 AS devicetype, shape, kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 112000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSFHKG b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-跌落式熔断器' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 115000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSDLSRDQ b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-连接线' AS type, 2 AS devicetype, b.shape, NULL AS kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 360000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZNYC_ZNLJX b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-断路器' AS type, ( CASE WHEN C.sbzlx = 30000000 THEN 2 ELSE 7 END ) AS devicetype, b.shape, NULL AS kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 305000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZNYC_DLQ b ON a.oid = b.oid LEFT JOIN dwzy.T_TX_ZNYC_DZ c ON b.ssdz = c.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-隔离开关' AS type, 2 AS devicetype, b.shape, kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 306000 AND chkg IN(SELECT chkg FROM line_id)) a INNER JOIN dwzy.T_TX_ZNYC_GLKG b ON a.oid = b.oid AND(b.sbzlx = 36000000 OR b.sbzlx = 30600000) UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-负荷开关' AS type, 7 AS devicetype, b.shape, kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 307000 AND chkg IN(SELECT chkg FROM line_id)) a INNER JOIN dwzy.t_tx_znyc_fhkg b ON a.oid = b.oid AND b.sbzlx = 30700000 UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站外-柱上变压器' AS type, 5 AS devicetype, b.shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 110000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.t_tx_zwyc_zsbyq b ON a.oid = b.oid ) c ) e";
            }
        }
        public static string PG_Delete_Sql = "delete from {0} where dwxh='{1}' and year ={2}";
        /// <summary>
        /// 查询变电站
        /// </summary>
        public static string PG_QuerySql_Substation = "WITH bdz_info AS (SELECT oid,sbmc,sbid,st_centroid (shape) AS shape,sbzlx,dydj FROM sxgis.v_t_tx_znyc_dz WHERE sbzlx=30000000 AND dydj IN (25,30,32,33) AND data_flag !=3 AND {0}) SELECT oid,ID,'{1}' AS dwxh,YEAR,sbzlx,bdz_id,dydj,sbdydj,ssdz,xl_oid,xl_cxkg,xl_cxkglx,typeid,sbmc,sbid,shape,devicetype FROM (SELECT to_char(CURRENT_DATE,'yyyy') || B.cxkglx || B.cxkg AS oid,'' || B.cxkglx || B.cxkg AS ID,to_char(CURRENT_DATE,'yyyy') :: INT AS YEAR,B.sbzlx,A.oid AS bdz_id,(CASE B.dydj WHEN 21 THEN '6' WHEN 30 THEN '24' ELSE '10' END) AS dydj,B.dydj AS sbdydj,'' || A.sbzlx || A.oid AS ssdz,B.oid AS xl_oid,B.cxkg AS xl_cxkg,B.cxkglx AS xl_cxkglx,B.cxkglx/100 AS typeid,B.sbmc,B.sbid,CAST (NULL AS geometry) AS shape,1 AS devicetype,ROW_NUMBER () OVER (PARTITION BY B.cxkg,B.cxkglx ORDER BY B.sbmc) AS ROWS FROM bdz_info A INNER JOIN (SELECT cxkglx,cxkg,sbzlx,oid,dydj,sbmc,sbid,qsdz FROM sxgis.v_t_tx_zwyc_xl WHERE dydj IN (21,22,24) AND data_flag !=3 AND {0}) B ON A.oid=B.qsdz UNION ALL SELECT to_char(CURRENT_DATE,'yyyy') || sbzlx || oid AS oid,'' || sbzlx || oid AS ID,to_char(CURRENT_DATE,'yyyy') :: INT AS YEAR,sbzlx,oid AS bdz_id,(CASE dydj WHEN 25 THEN '35' WHEN 30 THEN '66' WHEN 33 THEN '220' ELSE '110' END) AS dydj,dydj AS sbdydj,sbid AS ssdz,NULL AS xl_oid,NULL AS xl_cxkg,NULL AS xl_cxkglx,NULL AS typeid,sbmc,sbid,shape,0 AS devicetype,ROW_NUMBER () OVER (PARTITION BY oid,sbzlx) AS ROWS FROM bdz_info) A WHERE ROWS=1;";

        public static string PG_QuerySql_Task = "WITH tmp AS (SELECT* FROM sxgis.t_task_info WHERE task_id='{0}') SELECT qy_id AS dwxh, task_id, ABS (MOD(hashtext(task_id), 64)) AS hash_part, is_base, to_char(task_date, 'yyyy-MM-dd hh24:mi:ss') AS topodate FROM tmp UNION ALL SELECT b.qy_id AS dwxh, A.task_id, ABS (MOD (hashtext (A.task_id),64)) AS hash_part, b.is_base,to_char(b.task_date,'yyyy-MM-dd hh24:mi:ss') AS topodate FROM sxgis.t_task_info A, tmp b WHERE A.f_task_id= b.ssbase AND A.is_del= '2' AND A.qy_id= b.qy_id UNION ALL    SELECT b.qy_id AS dwxh, A.task_id, ABS (MOD (hashtext (A.task_id),64)) AS hash_part, b.is_base,to_char(b.task_date,'yyyy-MM-dd hh24:mi:ss') AS topodate FROM sxgis.t_task_info A, tmp b WHERE A.ssbase= b.ssbase AND A.is_del= '2' AND A.qy_id= b.qy_id AND A.task_date<b.task_date";
        public static string PG_QuerySql_ProvinceID = "select sg_code from ghdw.t_val_task_info_new_jc where task_id = '{0}'";
        /// <summary>
        /// 查询馈线
        /// </summary>
        public static string PG_QuerySql_Feeder
        {
            get
            {
                return "WITH line_info AS (SELECT oid,cxkg,cxkglx,cxjg,sbmc,qsdz,sbid FROM dwzy.T_TX_ZWYC_XL WHERE dydj=22 AND cxkg IN (120000109511,120000097278,120000097369)) SELECT B.oid AS bdz_id,B.sbmc AS bdz_mc,B.sbid AS bdz_sbid,NULL AS xl_oid,NULL AS xl_cxkg,NULL AS xl_cxkglx,NULL AS xl_mc,NULL AS xl_sbid,st_centroid (shape) AS shape,0 AS devicetype,111111111133 AS task_id FROM (SELECT DISTINCT qsdz FROM line_info) A INNER JOIN dwzy.T_TX_ZNYC_DZ B ON A.qsdz=B.oid UNION ALL SELECT B.oid AS bdz_id,B.sbmc AS bdz_mc,B.sbid AS bdz_sbid,A.oid AS xl_oid,A.cxkg AS xl_cxkg,A.cxkglx AS xl_cxkglx,A.sbmc AS xl_mc,A.sbid AS xl_sbid,NULL AS shape,1 AS devicetype,111111111133 AS task_id FROM line_info A INNER JOIN dwzy.T_TX_ZNYC_DZ B ON A.qsdz=B.oid;";
            }
        }
        public static string PG_InsertSql
        {
            get
            {
                return "INSERT INTO topo_zyxl.topo_sb_oid (oid,equips,typeid,cxkg)VALUES('{0}','{1}','{2}','{3}')";
            }
        }
        public static string PG_Query_CXMXH { get { return "SELECT bdz_id,mx_id,mx_mc,cxkg,cxkglx FROM (SELECT B.ssdz AS bdz_id,B.oid AS mx_id,B.sbmc AS mx_mc,A.cxkg,cxkglx,ROW_NUMBER () OVER (PARTITION BY A.cxkg,A.cxkglx,B.ssdz ORDER BY B.sbmc) AS num FROM (SELECT*FROM TOPO_SB_LINE_OID WHERE equips='stopequips' AND typeid=311000) A LEFT JOIN (SELECT ssdz,oid,sbmc FROM sxgis.v_t_tx_znyc_mx WHERE data_flag !=3 AND {0}) B ON A.oid=B.oid) A WHERE num=1"; } }
        /// <summary>
        /// 创建PG临时表
        /// </summary>
        public static string PG_CreateTempTable
        {
            get
            {
                return "create temporary table topo_sb_line_oid(oid bigint,equips varchar(200),typeid bigint,cxkg bigint,cxkglx bigint,dydj bigint) ;";
            }
        }
        public static string PG_CreateTempTable_PDBYQ
        {
            get
            { 
                return "create temporary table temp_znyc_pdbyq(oid bigint,sbzlx bigint,sfzg int2,sfzclj int2,ssfd bigint,ssfz bigint,ssdz bigint,ssdkx bigint) ;";
            }
        }
        /// <summary>
        /// 创建PG临时表
        /// </summary>
        public static string PG_CreateTempTablePdss
        {
            get
            {

                return "CREATE TEMPORARY TABLE topo_pdss (dwxh VARCHAR (255),YEAR int4,cxkg int8,cxkglx int8,typeid int8,oid int8,start_conn int8,end_conn int8,sbzlx int8,shape geometry ,devicetype int4,devicename VARCHAR (255) ,TYPE VARCHAR (255) ,blackname VARCHAR (255)  ,sbid VARCHAR  ,ssdz int8,xltype VARCHAR (255) ,xl_length numeric(10,2) ,ROWS int8,pdrl int4,pdsx VARCHAR (255)  )";
            }
        }
        /// <summary>
        /// 创建Oracle临时表
        /// </summary>
        public static string Oracle_CreateTempTable
        {
            get
            {
                return "create global temporary table topo_sb_line_sbid(type int,sbid varchar(200)) On Commit Preserve Rows";
            }
        }
        /// <summary>
        /// 获取Docker容器环境变量
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns> 
        /// key只能是 TDDY_PG 研发环境、内网环境、生产环境PG数据库
        /// TDDY_ORACLE  研发环境、内网环境、生产环境PG数据库
        /// TDDY_TOPO_URL   研发环境、内网环境、生产环境拓扑服务接口地址
        /// TDDY_LOAD_URL   生产环境负荷接口地址
        public static string GetEnvironment(string key)
        {
            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))
            {
                if (key == "TDDY_PG") return "Server=172.16.144.252;Port=19200;UserId=gis;Password=GIS20_sig;Database=fzgis;Encoding=UTF8;CommandTimeout=300;Pooling=true;MaxPoolSize=75;";
                else if (key == "TDDY_PG_GH") return "Server=172.16.144.252;Port=19200;UserId=gis;Password=GIS20_sig;Database=fzgis_ghdw;Encoding=UTF8;CommandTimeout=300;Pooling=true;MaxPoolSize=75;";
                else if (key == "TDDY_ORACLE") return "Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.16.144.251)(PORT=11521))(CONNECT_DATA=(SERVICE_NAME=pis)));Persist Security Info=True;User ID=pis;Password=New_2#4dba;";
                else if (key == "TDDY_TOPO_URL") return "http://172.16.144.246/mygisserver/?request=SearchByConditionBatch&equipparams=";
                else return "http://172.16.144.246/mygisserver/?request=SearchByConditionBatch&equipparams=";
            }
            else
            {
                return Environment.GetEnvironmentVariable(key, EnvironmentVariableTarget.Process);
            }
        }

        public static string Oracle_ExistTempTable
        {
            get
            {
                return "select count(1) from user_tables where table_name=upper('topo_sb_line_sbid')";
            }
        }
        /// <summary>
        /// 清空oracle临时表的数据
        /// </summary>
        public static string Oracle_ClearTempTable
        {
            get
            {
                return "delete from topo_sb_line_sbid";
            }
        }
        public static string Query_Columns { get { return "SELECT *  FROM {0} LIMIT 1"; } }
        public static string PG_Qurey_XDXX
        {
            get
            {

                return "";
            }
        }
        public static string PG_Qurey_KGXX { get { return "H4sIAAAAAAAEAA2TN5KDQADAHkRhMrgkZxYvmY5ocgYDr797gAqNRv2iEcjy+yjvwJ5gOfbnK5hCSTrhR60Ez8xnx79tQl8VsgHfpmvO4Mar6uWLNO7wbsHG04k2d7Pzj7JxK6e2l8eLmhfgh7DwRP3GVuuAs5LEWfvNejAEcqd7dP0JF9UNK/7keHBLBvyO7CaKukAL1+Mp9eAzzLytexMHV+YSPkofVyrQ5YdVBvZKqIXvyDhkCVhffXXXaIe0whx8R7sIloROJ6dhN0a29XbKA4S8MWa+JsJBJZjfVj6PNtJ74y67K8kyESi3aQHKrJdqYkkWAaXrt6RlNKXBAzRLn8UlfhaasYSWEDdG693rSBF1iT/C/qt565IUapFujyESVsxEI6SDZwhPYBrJSSajsYnlafq4CCGtrN8RI28Uu+DLRRiGbpwIbs5Z68xho9pMsKouMNhgb5miovV9qpLBTs4DYHlp1unemrU1IdfVhBM6QWE3ndtmnJaYKmR+F232ot1jxkiNgV5HA6lp3CxLvZte7jvfIYX7emejAZ6Cwqw1jOn7oMhp5LxCiEUk9Em5gl/Ug2lTdqQ7Vw6dfmN3NxH0Ad/RHI2XFgWOgJ7fgpPcoCLMaLAouq/HXguRHA8e2iUebxcio2qYdUmrHRG+iErAudtvAFgemHIlJUKkWxbd4jKjUWkUdlc1/TrP3JTxc9i4C+Cw/NI2L35N9J3nSzvB+Qtge0jnd/ZXrjVKK9/NnXzZ9+vZ2qabImp84lxQ993C9Pb13h4G/qPM3sz0MxvIJwnponjSfwduqy6hZNOcBfLrxbKRVx6ngkk2oqB9f3vePHA1ctytJXAUUQs0M7RFuOhxajqv9HUV+btr8vod4XAdAhD3ybSL0Gm0ZWj52Ig1K1An/BJgGUBS0R9UwUHxRlbLkOOx8cr05J3Nlz0MxMWHUlTV7fZQrsKUa7Wg2/OvtR8RI79jDJfma5kjBFt18j2SRNvjWq7GrGUPIuojKCDIOFPwTSsbeeBB5gbdZB5xcK9Zqoa6NybWsCoQaf+Dh6jCBEnu8YLM0YghZT6hxWlFg3V5P7tKqYdJIUD+JKRqJbiI8vDJoiADu8nDie+3U9EPM+u8j1xKaqtm4Jr5qfE+fczNcX1tOdrBhsL+f8Kztk3eAB2bH55rx8DtRSGm6Ar4xfhFOPfV1zfyo/fPa6ZwlTA4mc+5pUSHVFSgTkdt3jca1yAmHMlbplTiXqGK6Nzk/+CgIdyDMHAlkuLaSDqlzMrIPFy/J3tVBcK9bXQrV9qSiSQMRN7BqOUEjh4txInEh59NiTetdWzfBnwpJBIzHxhD3SHq6tekt42l3cXC/INWUl9N7GKws/Md9Y71LI003FTwVxGp4qh86i4hT/xHJdsl/Mwlz7YIHuO6o2ZxEyGLZWpSA7YeuJvihFMq9Wk9RUklAfBip8vRhzWfzHUf6rsIsEoGNrgkGuBlqqTU+s2U6/RtNMvlAgR+ZvnuTqsjd2lNc5hGYcbsJTYLl7byhue/aKuOLezk7c3l8jzQM3cN6seSbxFNsiDRUkCTQ0C8dv8EWYckIUrX4BVJO33Mf8MPZxcABgAA"; } }
        public static string PG_Query_Trans { get { return "SELECT a.cxkg,a.oid,(CASE b.sbzlx WHEN 11000001 THEN '专用' WHEN 11000000 THEN '公用' ELSE '' END) 属性,b.sbzlx,a.oid AS ssdz,b.sbid,0 AS type FROM ( SELECT* FROM topo_sb_line_oid WHERE typeid = 110000) a INNER JOIN dwzy.T_TX_ZWYC_ZSBYQ b ON a.oid = b.oid AND b.sbzlx = '83020005' UNION ALL SELECT a.cxkg,a.oid,(CASE WHEN b.sbzlx IN(30200000,30200001,30200002) THEN '公用' ELSE '专用' END) 属性,b.sbzlx,b.ssdz,b.sbid,1 AS type FROM( SELECT * FROM topo_sb_line_oid WHERE typeid = 302000) a INNER JOIN dwzy.T_TX_ZNYC_PDBYQ b ON a.oid = b.oid"; } }
        public static string Oracle_Query_Trans = "SELECT dwzy_id,OBJ_ID,pdrl,pdsx FROM (SELECT A.SBID AS dwzy_id,OBJ_ID,(CASE WHEN ratedmva IS NULL THEN 315 ELSE ratedmva END) AS pdrl,(CASE WHEN pub_priv_flag=0 THEN '专用' ELSE '公用' END) AS pdsx,row_number () OVER (partition BY A.SBID ORDER BY A.SBID) AS num FROM (SELECT SBID FROM topo_sb_line_sbid WHERE TYPE=5 AND SBID IS NOT NULL) A LEFT JOIN equ_te_dist_trans B ON B.SG_CODE ='{0}' AND A.SBID =B.dwzy_id) A WHERE num= 1";
        #endregion
        public static string DestinationTableName { get { return "topo_zyxl.topo_xl_ceshi"; } }

        public static string PG_Query_XDDA { get { return "WITH zw_cet AS (SELECT cxkg,cxkglx,typeid,oid,(((0 :: BIT (64)) | get_byte(CONNECTION,1) :: BIT (64)<< 0) | (get_byte(CONNECTION,2) :: BIT (64)<< 8) | (get_byte(CONNECTION,3) :: BIT (64)<< 16) | (get_byte(CONNECTION,4) :: BIT (64)<< 24) | (get_byte(CONNECTION,5) :: BIT (64)<< 32) | (get_byte(CONNECTION,6) :: BIT (64)<< 40) | (get_byte(CONNECTION,7) :: BIT (64)<< 48) | (get_byte(CONNECTION,8) :: BIT (64)<< 56)) :: int8 AS start_conn,(((0 :: BIT (64)) | get_byte(CONNECTION,9) :: BIT (64)<< 0) | (get_byte(CONNECTION,10) :: BIT (64)<< 8) | (get_byte(CONNECTION,11) :: BIT (64)<< 16) | (get_byte(CONNECTION,12) :: BIT (64)<< 24) | (get_byte(CONNECTION,13) :: BIT (64)<< 32) | (get_byte(CONNECTION,14) :: BIT (64)<< 40) | (get_byte(CONNECTION,15) :: BIT (64)<< 48) | (get_byte(CONNECTION,16) :: BIT (64)<< 56)) :: int8 AS end_conn,sbzlx,shape,sbid,xltype,xl_length FROM (SELECT A.cxkg,A.cxkglx,typeid,A.oid,CONNECTION,sbzlx,shape,b.sbid,'其他' AS xltype,0.0 AS xl_length FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=140000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,dydj FROM sxgis.V_T_TX_ZWYC_ZWCLJX WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,CONNECTION,sbzlx,shape,b.sbid,'其他' AS xltype,0.0 AS xl_length FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=130000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,dydj FROM sxgis.V_T_TX_ZWYC_ZWLJX WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,CONNECTION,sbzlx,shape,b.sbid,'中压电缆' AS xltype,st_length (shape) AS xl_length FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=201000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,dydj FROM sxgis.V_T_TX_ZWYC_DLD WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,CONNECTION,sbzlx,shape,b.sbid,'中压架空' AS xltype,st_length (shape) AS xl_length FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=101000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,dydj FROM sxgis.V_T_TX_ZWYC_DXD WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,CONNECTION,sbzlx,shape,b.sbid,'其他' AS xltype,0.0 AS xl_length FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=113000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,dydj FROM sxgis.V_T_TX_ZWYC_ZSGLKG WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,CONNECTION,sbzlx,shape,b.sbid,'其他' AS xltype,0.0 AS xl_length FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=115000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,dydj FROM sxgis.V_T_TX_ZWYC_ZSDLSRDQ WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj) C),kg_cet AS (SELECT cxkg,cxkglx,typeid,oid,(((0 :: BIT (64)) | get_byte(CONNECTION,1) :: BIT (64)<< 0) | (get_byte(CONNECTION,2) :: BIT (64)<< 8) | (get_byte(CONNECTION,3) :: BIT (64)<< 16) | (get_byte(CONNECTION,4) :: BIT (64)<< 24) | (get_byte(CONNECTION,5) :: BIT (64)<< 32) | (get_byte(CONNECTION,6) :: BIT (64)<< 40) | (get_byte(CONNECTION,7) :: BIT (64)<< 48) | (get_byte(CONNECTION,8) :: BIT (64)<< 56)) :: int8 AS start_conn,(((0 :: BIT (64)) | get_byte(CONNECTION,9) :: BIT (64)<< 0) | (get_byte(CONNECTION,10) :: BIT (64)<< 8) | (get_byte(CONNECTION,11) :: BIT (64)<< 16) | (get_byte(CONNECTION,12) :: BIT (64)<< 24) | (get_byte(CONNECTION,13) :: BIT (64)<< 32) | (get_byte(CONNECTION,14) :: BIT (64)<< 40) | (get_byte(CONNECTION,15) :: BIT (64)<< 48) | (get_byte(CONNECTION,16) :: BIT (64)<< 56)) :: int8 AS end_conn,sbzlx,shape,sbid,sbmc FROM (SELECT A.cxkg,A.cxkglx,typeid,A.oid,b.CONNECTION,b.sbzlx,b.shape,b.sbid,b.sbmc FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=111000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,sbmc,dydj FROM sxgis.V_T_TX_ZWYC_ZSDLQ WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,CONNECTION,sbzlx,shape,b.sbid,b.sbmc FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=112000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,sbmc,dydj FROM sxgis.V_T_TX_ZWYC_ZSFHKG WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,CONNECTION,sbzlx,shape,b.sbid,b.sbmc FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=114000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,sbmc,dydj FROM sxgis.V_T_TX_ZWYC_ZSCHQ WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj) C),zn_cet AS (SELECT cxkg,cxkglx,typeid,oid,(((0 :: BIT (64)) | get_byte(CONNECTION,1) :: BIT (64)<< 0) | (get_byte(CONNECTION,2) :: BIT (64)<< 8) | (get_byte(CONNECTION,3) :: BIT (64)<< 16) | (get_byte(CONNECTION,4) :: BIT (64)<< 24) | (get_byte(CONNECTION,5) :: BIT (64)<< 32) | (get_byte(CONNECTION,6) :: BIT (64)<< 40) | (get_byte(CONNECTION,7) :: BIT (64)<< 48) | (get_byte(CONNECTION,8) :: BIT (64)<< 56)) :: int8 AS start_conn,(CASE WHEN LENGTH (CONNECTION)> 19 THEN (((0 :: BIT (64)) | get_byte(CONNECTION,17) :: BIT (64)<< 0) | (get_byte(CONNECTION,18) :: BIT (64)<< 8) | (get_byte(CONNECTION,19) :: BIT (64)<< 16) | (get_byte(CONNECTION,20) :: BIT (64)<< 24) | (get_byte(CONNECTION,21) :: BIT (64)<< 32) | (get_byte(CONNECTION,22) :: BIT (64)<< 40) | (get_byte(CONNECTION,23) :: BIT (64)<< 48) | (get_byte(CONNECTION,24) :: BIT (64)<< 56)) :: int8 ELSE (((0 :: BIT (64)) | get_byte(CONNECTION,9) :: BIT (64)<< 0) | (get_byte(CONNECTION,10) :: BIT (64)<< 8) | (get_byte(CONNECTION,11) :: BIT (64)<< 16) | (get_byte(CONNECTION,12) :: BIT (64)<< 24) | (get_byte(CONNECTION,13) :: BIT (64)<< 32) | (get_byte(CONNECTION,14) :: BIT (64)<< 40) | (get_byte(CONNECTION,15) :: BIT (64)<< 48) | (get_byte(CONNECTION,16) :: BIT (64)<< 56)) :: int8 END) AS end_conn,sbzlx,shape,devicetype,sbid,ssdz FROM (SELECT A.cxkg,A.cxkglx,typeid,A.oid,b.CONNECTION,b.sbzlx,2 AS devicetype,b.shape,b.ssdz,b.sbid FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=360000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,ssdz,dydj FROM sxgis.V_T_TX_ZNYC_ZNLJX WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,b.CONNECTION,b.sbzlx,(CASE WHEN C.sbzlx IN (30000000,30000005,30000006,34300000) THEN 2 ELSE 7 END) AS devicetype,b.shape,b.ssdz,b.sbid FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=305000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,ssdz,dydj FROM sxgis.V_T_TX_ZNYC_DLQ WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj LEFT JOIN (SELECT oid,sbzlx,dydj FROM sxgis.V_T_TX_ZNYC_DZ WHERE data_flag !=3 AND {0}) C ON b.ssdz=C.oid AND A.dydj=C.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,b.CONNECTION,b.sbzlx,2 AS devicetype,b.shape,b.ssdz,b.sbid FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=306000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,ssdz,dydj FROM sxgis.V_T_TX_ZNYC_GLKG WHERE (sbzlx=36000000 OR sbzlx=30600000 or sbzlx=30600003) AND data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,b.CONNECTION,b.sbzlx,2 AS devicetype,b.shape,b.ssdz,b.sbid FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=309000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,ssdz,dydj FROM sxgis.V_T_TX_ZNYC_RDQ WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,b.CONNECTION,b.sbzlx,(CASE WHEN C.sbzlx IN (30000000,30000005,30000006,34300000) THEN 2 ELSE 7 END) AS devicetype,b.shape,b.ssdz,b.sbid FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=307000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,ssdz,dydj FROM sxgis.V_t_tx_znyc_fhkg WHERE (sbzlx=30700000 OR sbzlx=30700002) AND data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj LEFT JOIN (SELECT oid,sbzlx,dydj FROM sxgis.V_T_TX_ZNYC_DZ WHERE data_flag !=3 AND {0}) C ON b.ssdz=C.oid AND A.dydj=C.dydj) C),pd_cet AS (SELECT cxkg,cxkglx,typeid,oid,(((0 :: BIT (64)) | get_byte(CONNECTION,1) :: BIT (64)<< 0) | (get_byte(CONNECTION,2) :: BIT (64)<< 8) | (get_byte(CONNECTION,3) :: BIT (64)<< 16) | (get_byte(CONNECTION,4) :: BIT (64)<< 24) | (get_byte(CONNECTION,5) :: BIT (64)<< 32) | (get_byte(CONNECTION,6) :: BIT (64)<< 40) | (get_byte(CONNECTION,7) :: BIT (64)<< 48) | (get_byte(CONNECTION,8) :: BIT (64)<< 56)) :: int8 AS start_conn,(((0 :: BIT (64)) | get_byte(CONNECTION,9) :: BIT (64)<< 0) | (get_byte(CONNECTION,10) :: BIT (64)<< 8) | (get_byte(CONNECTION,11) :: BIT (64)<< 16) | (get_byte(CONNECTION,12) :: BIT (64)<< 24) | (get_byte(CONNECTION,13) :: BIT (64)<< 32) | (get_byte(CONNECTION,14) :: BIT (64)<< 40) | (get_byte(CONNECTION,15) :: BIT (64)<< 48) | (get_byte(CONNECTION,16) :: BIT (64)<< 56)) :: int8 AS end_conn,sbzlx,shape,devicetype,sbid,ssdz,sbmc FROM (SELECT A.cxkg,A.cxkglx,typeid,A.oid,CONNECTION,b.sbzlx,5 AS devicetype,b.shape,b.sbid,CAST (NULL AS BIGINT) AS ssdz,sbmc FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=110000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,sbmc,dydj FROM sxgis.V_t_tx_zwyc_zsbyq WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj UNION ALL SELECT A.cxkg,A.cxkglx,typeid,A.oid,b.CONNECTION,b.sbzlx,5 AS devicetype,b.shape,b.sbid,b.ssdz,NULL AS sbmc FROM (SELECT oid,typeid,cxkg,cxkglx,dydj FROM topo_sb_line_oid WHERE typeid=302000) A INNER JOIN (SELECT oid,CONNECTION,sbzlx,shape,sbid,ssdz,dydj FROM sxgis.V_T_TX_ZNYC_PDBYQ WHERE data_flag !=3 AND {0}) b ON A.oid=b.oid AND A.dydj=b.dydj) C) SELECT '{1}' AS dwxh,to_char(CURRENT_DATE,'yyyy') :: INT AS YEAR,cxkg,cxkglx,typeid,oid,start_conn,end_conn,sbzlx,shape,2 AS devicetype,'' AS devicename,'' AS TYPE,'' AS blackname,sbid,CAST (NULL AS BIGINT) ssdz,xltype,xl_length,0 AS ROWS FROM zw_cet WHERE end_conn> 0 UNION ALL SELECT '{1}' AS dwxh,to_char(CURRENT_DATE,'yyyy') :: INT AS YEAR,cxkg,cxkglx,typeid,oid,start_conn,end_conn,sbzlx,shape,2 AS devicetype,'' AS devicename,'' AS TYPE,'' AS blackname,sbid,CAST (NULL AS BIGINT) ssdz,'其他' AS xltype,0.0 AS xl_length,0 AS ROWS FROM kg_cet WHERE end_conn> 0 UNION ALL SELECT '{1}' AS dwxh,to_char(CURRENT_DATE,'yyyy') :: INT AS YEAR,cxkg,cxkglx,typeid,oid,start_conn,end_conn,sbzlx,shape,2 AS devicetype,'' AS devicename,'' AS TYPE,'' AS blackname,sbid,CAST (NULL AS BIGINT) ssdz,'其他' AS xltype,0.0 AS xl_length,0 AS ROWS FROM zn_cet WHERE end_conn> 0 UNION ALL SELECT '{1}' AS dwxh,to_char(CURRENT_DATE,'yyyy') :: INT AS YEAR,cxkg,cxkglx,typeid,oid,start_conn,end_conn,sbzlx,shape,2 AS devicetype,'' AS devicename,'' AS TYPE,'' AS blackname,sbid,CAST (NULL AS BIGINT) ssdz,'其他' AS xltype,0.0 AS xl_length,0 AS ROWS FROM pd_cet WHERE end_conn> 0 UNION ALL SELECT '{1}' AS dwxh,to_char(CURRENT_DATE,'yyyy') :: INT AS YEAR,cxkg,cxkglx,typeid,oid,(CASE WHEN start_count< 3 THEN start_conn ELSE end_conn END) AS start_conn,NULL AS end_conn,sbzlx,ST_PointN (shape,2) AS shape,3 devicetype,devicename,'柱上开关' AS TYPE,'未配置终端分段开关' AS blackname,sbid,NULL AS ssdz,'其他' AS xltype,0.0 AS xl_length,ROW_NUMBER () OVER (PARTITION BY oid) AS ROWS FROM (SELECT*,COUNT (1) OVER (PARTITION BY cxkg,cxkglx,start_conn) AS start_count FROM (SELECT cxkg,cxkglx,typeid,oid,sbzlx,start_conn,end_conn,shape,3 AS devicetype,sbid,sbmc AS devicename FROM kg_cet UNION ALL SELECT cxkg,cxkglx,NULL AS typeid,NULL AS oid,NULL AS sbzlx,start_conn,NULL AS end_conn,NULL AS shape,2 AS devicetype,NULL AS sbid,NULL AS devicename FROM zw_cet UNION ALL SELECT cxkg,cxkglx,NULL AS typeid,NULL AS oid,NULL AS sbzlx,end_conn,NULL AS start_conn,NULL AS shape,2 AS devicetype,NULL AS sbid,NULL AS devicename FROM zw_cet) A) b WHERE b.devicetype=3 UNION ALL SELECT '{1}' AS dwxh,to_char(CURRENT_DATE,'yyyy') :: INT AS YEAR,cxkg,cxkglx,typeid,A.oid,start_conn,NULL end_conn,A.sbzlx,NULL AS shape,7 AS devicetype,'' AS devicename,'' AS TYPE,'' AS blackname,sbid,ssdz,'其他' AS xltype,0.0 AS xl_length,0 AS ROWS FROM (SELECT oid,sbzlx FROM zn_cet WHERE devicetype=7 GROUP BY oid,sbzlx HAVING COUNT (1)> 1) A LEFT JOIN zn_cet b ON A.oid=b.oid AND A.sbzlx=b.sbzlx UNION ALL SELECT '{1}' AS dwxh,to_char(CURRENT_DATE,'yyyy') :: INT AS YEAR,cxkg,cxkglx,typeid,oid,start_conn,NULL AS end_conn,sbzlx,ST_PointN (shape,2) AS shape,5 AS devicetype,sbmc AS devicename,'' AS TYPE,'' AS blackname,sbid,ssdz,'其他' AS xltype,0.0 AS xl_length,0 AS ROWS FROM pd_cet;"; } }
        public static string PG_Query_XDDA_OLD { get { return "WITH cet AS (SELECT 2022 AS 年份,cxkg,equips,typeid,oid,(((0 :: BIT (64)) | get_byte (CONNECTION,1) :: BIT (64)<< 0) | (get_byte (CONNECTION,2) :: BIT (64)<< 8) | (get_byte (CONNECTION,3) :: BIT (64)<< 16) | (get_byte (CONNECTION,4) :: BIT (64)<< 24) | (get_byte (CONNECTION,5) :: BIT (64)<< 32) | (get_byte (CONNECTION,6) :: BIT (64)<< 40) | (get_byte (CONNECTION,7) :: BIT (64)<< 48) | (get_byte (CONNECTION,8) :: BIT (64)<< 56)) :: int8 AS start_conn,(((0 :: BIT (64)) | get_byte (CONNECTION,9) :: BIT (64)<< 0) | (get_byte (CONNECTION,10) :: BIT (64)<< 8) | (get_byte (CONNECTION,11) :: BIT (64)<< 16) | (get_byte (CONNECTION,12) :: BIT (64)<< 24) | (get_byte (CONNECTION,13) :: BIT (64)<< 32) | (get_byte (CONNECTION,14) :: BIT (64)<< 40) | (get_byte (CONNECTION,15) :: BIT (64)<< 48) | (get_byte (CONNECTION,16) :: BIT (64)<< 56)) :: int8 AS end_conn,sbzlx,type,shape,devicetype,(CASE WHEN kgzt=536870912 THEN 0 ELSE 1 END) AS kgzt,sbid,xlcd,pdts,pdrl,pdfh,ssdz FROM (SELECT a.cxkg,a.equips,typeid,a.oid,b.connection,b.sbzlx,'柱上-断路器' AS type,3 AS devicetype,b.shape,b.kgzt,CAST (NULL AS bigint) AS ssdz,b.sbid,0.0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=111000) a INNER JOIN dwzy.T_TX_ZWYC_ZSDLQ b ON a.oid =b.oid AND b.connection IS NOT NULL UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,CONNECTION,sbzlx,'柱上-负荷开关' AS type,3 AS devicetype,shape,kgzt,NULL AS ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=112000) a INNER JOIN dwzy.T_TX_ZWYC_ZSFHKG b ON a.oid =b.oid AND b.connection IS NOT NULL UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,CONNECTION,sbzlx,'站外-超连接线' AS type,2 AS devicetype,shape,NULL AS kgzt,NULL AS ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=140000) a INNER JOIN dwzy.T_TX_ZWYC_ZWCLJX b ON a.oid =b.oid AND b.connection IS NOT NULL UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,CONNECTION,sbzlx,'站外-连接线' AS type,2 AS devicetype,shape,NULL AS kgzt,NULL AS ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=130000) a INNER JOIN dwzy.T_TX_ZWYC_ZWLJX b ON a.oid =b.oid AND b.connection IS NOT NULL UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,CONNECTION,sbzlx,'站外-电缆段' AS type,2 AS devicetype,shape,NULL AS kgzt,NULL AS ssdz,b.sbid,ST_Length (shape) AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=201000) a INNER JOIN dwzy.T_TX_ZWYC_DLD b ON a.oid =b.oid AND b.connection IS NOT NULL UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,CONNECTION,sbzlx,'导线段' AS type,2 AS devicetype,shape,NULL AS kgzt,NULL AS ssdz,b.sbid,ST_Length (shape) AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=101000) a INNER JOIN dwzy.T_TX_ZWYC_DXD b ON a.oid =b.oid AND b.connection IS NOT NULL UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,CONNECTION,sbzlx,'柱上-隔离开关' AS type,2 AS devicetype,shape,NULL AS kgzt,NULL AS ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=113000) a INNER JOIN dwzy.T_TX_ZWYC_ZSGLKG b ON a.oid =b.oid AND b.connection IS NOT NULL UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,CONNECTION,sbzlx,'柱上-跌落式熔断器' AS type,2 AS devicetype,shape,NULL AS kgzt,NULL AS ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=115000) a INNER JOIN dwzy.T_TX_ZWYC_ZSDLSRDQ b ON a.oid =b.oid AND b.connection IS NOT NULL UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,b.connection,b.sbzlx,'站内-连接线' AS type,2 AS devicetype,b.shape,NULL AS kgzt,b.ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=360000) a INNER JOIN dwzy.T_TX_ZNYC_ZNLJX b ON a.oid =b.oid AND b.connection IS NOT NULL UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,b.connection,b.sbzlx,'站内-断路器' AS type,(CASE WHEN C.sbzlx IN (30000000,30000005,30000006,34300000) THEN 2 ELSE 7 END) AS devicetype,b.shape,NULL AS kgzt,b.ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=305000) a INNER JOIN dwzy.T_TX_ZNYC_DLQ b ON a.oid =b.oid AND b.connection IS NOT NULL LEFT JOIN dwzy.T_TX_ZNYC_DZ c ON b.ssdz =c.oid UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,b.connection,b.sbzlx,'站内-隔离开关' AS type,2 AS devicetype,b.shape,kgzt,b.ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=306000) a INNER JOIN dwzy.T_TX_ZNYC_GLKG b ON a.oid =b.oid AND (b.sbzlx =36000000 OR b.sbzlx =30600000) AND b.connection IS NOT NULL AND length (b.connection)> 9 UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,b.connection,b.sbzlx,'站内-负荷开关' AS type,(CASE WHEN C.sbzlx IN (30000000,30000005,30000006,34300000) THEN 2 ELSE 7 END) AS devicetype,b.shape,kgzt,b.ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=307000) a INNER JOIN dwzy.t_tx_znyc_fhkg b ON a.oid =b.oid AND b.sbzlx =30700000 AND b.connection IS NOT NULL LEFT JOIN dwzy.T_TX_ZNYC_DZ c ON b.ssdz =c.oid UNION ALL SELECT a.cxkg,a.equips,typeid,a.oid,CONNECTION,b.sbzlx,'站外-柱上变压器' AS type,5 AS devicetype,b.shape,NULL AS kgzt,NULL AS ssdz,b.sbid,0 AS xlcd,1 AS pdts,300 AS pdrl,1.1 pdfh FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=110000) a INNER JOIN dwzy.t_tx_zwyc_zsbyq b ON a.oid =b.oid AND b.connection IS NOT NULL) c) select 2022 as 年份, cxkg, equips, typeid, oid, start_conn, end_conn, sbzlx, type,'LINESTRING(1 1, 2 2)' as shape, (case when devicetype = 3 then 2 when devicetype = 7 then 2 else devicetype end) as devicetype,cast(null as varchar(200)) devicename,cast(null as varchar(200)) blackname, kgzt, sbid, xlcd, pdts, pdrl, pdfh, ssdz from cet union all select 2022 as 年份, cxkg, equips, typeid, oid, (case when start_count < 3 then start_conn else end_conn end) as start_conn,null end_conn, sbzlx, type,'POINT(1 1)' as shape,3 devicetype,'开关'|| right(cast(oid as varchar),4) as devicename,'未配置终端分段开关' as blackname,kgzt, sbid, xlcd, pdts, pdrl, pdfh, ssdz from (select *, count(oid) over (partition by start_conn) as start_count, count(oid) over (partition by end_conn) as end_count from (select cxkg, equips, typeid, oid, sbzlx, start_conn, end_conn, type, shape,2 as devicetype,kgzt, sbid, xlcd, pdts, pdrl, pdfh,ssdz from cet  union all select cxkg, equips, typeid, oid, sbzlx, end_conn, start_conn, type, shape, devicetype,kgzt, sbid, xlcd, pdts, pdrl, pdfh,ssdz from cet where devicetype = 3) a) b where b.devicetype = 3 union all select 2022 as 年份, cxkg, equips, typeid, oid, start_conn,null end_conn, sbzlx, type,'POINT(1 1)' as shape, 7 as devicetype,cast(null as varchar(200)) devicename,cast(null as varchar(200)) blackname, kgzt, sbid, xlcd, pdts, pdrl, pdfh, ssdz from cet where equips = 'lastequips' and devicetype = 7;"; } }
        public static string Oracle_Query_XDDA { get { return "SELECT dwzy_id,dxjm,xlcd,zll FROM (SELECT A.SBID AS dwzy_id,sectional AS dxjm,length as xlcd,zll,row_number () over (partition BY A.SBID ORDER BY A.SBID) AS num FROM (SELECT SBID FROM TOPO_SB_LINE_SBID WHERE TYPE=2 AND SBID IS NOT NULL) A INNER JOIN equ_te_line_seg B ON B.SG_CODE='{0}' AND A.SBID=B.dwzy_id AND VOLT_LEVEL IN ('AC00201','AC00101','AC00061')) A WHERE num= 1"; } }


        #region Oracle
        /// <summary>

        public static string Oracle_QuerySubSql { get { return "SELECT A.dwzy_id, A.run_trans_num, A.OBJ_ID, A.zrl, A.rlgc, C.max_load FROM ( SELECT A.dwzy_id, A.run_trans_num, A.VOLT_LEVEL, A.OBJ_ID, SUM (B.HVC) AS zrl, listagg ( rtrim( to_char (B.HVC, 'FM9999990.9999'), '.' ), '+' ) within GROUP (ORDER BY B.HVC) AS rlgc FROM EQU_PI_SUBSTATION A INNER JOIN EQU_TE_TRANSFORMER B ON A.dwzy_id IS NOT NULL AND A.OBJ_ID = B.STATION_ID AND A.VOLT_LEVEL IN ( 'AC00351', 'AC01101', 'AC02201' ) AND A.ASSET_TYPE = 30 GROUP BY A.dwzy_id, A.run_trans_num, A.VOLT_LEVEL, A.OBJ_ID ) A LEFT JOIN ieq_te_st_data_detail C ON A.OBJ_ID = C.DEVICE_ID AND periods = 2015"; } }

        public static string Oracle_QueryFeederSql { get { return "SELECT A.dwzy_id,A.obj_id,A.xlsx,A.xedl,C.MAX_LOAD AS LOAD,to_char(max_app_power_time,'YYYY-MM-DD HH24:mi:ss') AS time_max FROM (SELECT dwzy_id,obj_id,(CASE WHEN ASSET_TYPE=80 THEN '专用' ELSE '公用' END) AS xlsx,rated_ele AS xedl,RANK () OVER (PARTITION BY B.dwzy_id ORDER BY B.dwzy_id) AS num FROM (SELECT SBID FROM TOPO_SB_LINE_SBID WHERE TYPE=1 AND sbid IS NOT NULL) A INNER JOIN equ_te_line B ON B.SG_CODE='{0}' AND A.sbid=B.DWZY_ID) A LEFT JOIN ieq_pde_line_data_detail C ON A.obj_id=C.Device_id AND C.PERIODS=to_char(add_months (trunc(sysdate),-1),'yyyymm') WHERE num= 1"; } }

        public static string Oracle_Query_BDZDACX = "SELECT A.dwzy_id,(CASE A.STATION_USAGE WHEN '02' THEN '专用' ELSE '公用' END) sbsx,(CASE A.SETUP_KIND WHEN '01' THEN '户外' WHEN '02' THEN '户内' WHEN '03' THEN '地下' WHEN '04' THEN '半地下' WHEN '05' THEN '半户内' ELSE '' END) AS sblx,A.run_trans_num zbts,A.zrl zbrl,A.rlgc,A.OBJ_ID FROM (SELECT A.dwzy_id,A.STATION_USAGE,A.SETUP_KIND,A.run_trans_num,A.VOLT_LEVEL,A.OBJ_ID,SUM (B.HVC) AS zrl,listagg (rtrim(to_char(B.HVC,'FM9999990.9999'),'.'),'+') WITHIN GROUP (ORDER BY B.HVC) AS rlgc,RANK() OVER (PARTITION BY A.dwzy_id ORDER BY A.dwzy_id) AS num FROM (SELECT SBID FROM TOPO_SB_LINE_SBID WHERE TYPE=0) C INNER JOIN EQU_PI_SUBSTATION A ON A.SG_CODE='{0}' AND C.SBID=A.dwzy_id INNER JOIN EQU_TE_TRANSFORMER B ON B.SG_CODE='{0}' AND A.dwzy_id IS NOT NULL AND A.OBJ_ID=B.STATION_ID AND A.VOLT_LEVEL IN ('AC00351','AC00661','AC01101','AC02201') GROUP BY A.dwzy_id,A.STATION_USAGE,A.SETUP_KIND,A.run_trans_num,A.VOLT_LEVEL,A.OBJ_ID) A WHERE num=1";
        #endregion
        #region 结构对照
        /// <summary>
        /// 变电站字段对照
        /// </summary>
        public static Dictionary<Dictionary<string, Type>, string> dicContrastTopoBdz = new Dictionary<Dictionary<string, Type>, string> {
            { new Dictionary<string,Type>{ { "oid", typeof(string) } },"oid" },
            { new Dictionary<string,Type>{ { "id", typeof(string) } },"id" },
            { new Dictionary<string,Type>{ { "sbmc", typeof(string) } },"sbmc" },
             { new Dictionary<string,Type>{ { "dwxh", typeof(string) } },"dwxh" },
              { new Dictionary<string,Type>{ { "year", typeof(int) } },"year" },
            { new Dictionary<string,Type>{ { "dm_id", typeof(long) } },"bdz_id" },
            { new Dictionary<string,Type>{ { "dwzy_id", typeof(string) } },"sbid" },
            { new Dictionary<string,Type>{ { "sbsx", typeof(string) } },"SBSX" },
            { new Dictionary<string,Type>{ { "sblx", typeof(string) } },"SBLX" },
            { new Dictionary<string,Type>{ { "dydj", typeof(string) } },"DYDJ" },
            { new Dictionary<string,Type>{ { "zbts", typeof(int) } },"ZBTS" },
            { new Dictionary<string,Type>{ { "rlgc", typeof(string) } },"RLGC" },
            { new Dictionary<string,Type>{ { "shape_id", typeof(string) } },"oid" },
            { new Dictionary<string,Type>{ { "zbrl", typeof(decimal) } },"ZBRL" }
        };
        public static Dictionary<Dictionary<string, Type>, string> dicContrastOracleTempTable
        {
            get
            {
                return new Dictionary<Dictionary<string, Type>, string> {
            { new Dictionary<string,Type>{ { "sbid", typeof(string) } },"sbid" },
            { new Dictionary<string,Type>{ { "type", typeof(int) } },"devicetype" }
        };
            }
        }
        public static Dictionary<Dictionary<string, Type>, string> dicContrastOracleTempTableXDXX
        {
            get
            {
                return new Dictionary<Dictionary<string, Type>, string> {
            { new Dictionary<string,Type>{ { "sbid", typeof(string) } },"sbid" },
            { new Dictionary<string,Type>{ { "type", typeof(int) } },"devicetype" }
        };
            }
        }
        /// <summary>
        /// 中压线路字段对照
        /// </summary>
        public static Dictionary<Dictionary<string, Type>, string> dicContrastTopoZyxl = new Dictionary<Dictionary<string, Type>, string>
        {
            { new Dictionary<string,Type>{ { "oid", typeof(string) } },"oid" },
            { new Dictionary<string,Type>{ { "id", typeof(string) } },"id" },
            { new Dictionary<string,Type>{ { "sbmc", typeof(string) } },"sbmc" },
            { new Dictionary<string,Type>{ { "ssbdz", typeof(string) } },"sbid" },
             { new Dictionary<string,Type>{ { "dwxh", typeof(string) } },"dwxh" },
              { new Dictionary<string,Type>{ { "year", typeof(int) } },"year" },
            { new Dictionary<string,Type>{ { "cxkgid", typeof(long) } },"xl_cxkg" },
            { new Dictionary<string,Type>{ { "dm_id", typeof(long) } },"xl_oid" },
            { new Dictionary<string,Type>{ { "mxh", typeof(string) } },"mx_mc" },
            { new Dictionary<string,Type>{ { "dydj", typeof(string) } },"DYDJ" },
            { new Dictionary<string,Type>{ { "xedl", typeof(decimal) } },"XEDL" },
            { new Dictionary<string,Type>{ { "dwzy_id", typeof(string) } },"oid" },
            { new Dictionary<string,Type>{ { "xlsx", typeof(string) } },"XLSX" }
        }; 
        /// <summary>
        /// 开关设施字段对照
        /// </summary>
        public static Dictionary<Dictionary<string, Type>, string> dicContrastTopoKgss
        {
            get
            {
                return new Dictionary<Dictionary<string, Type>, string>
        {
            { new Dictionary<string,Type>{ { "oid", typeof(string) } },"oid" },
            { new Dictionary<string,Type>{ { "year", typeof(int) } },"year" },
            { new Dictionary<string,Type>{ { "sbmc", typeof(string) } },"devicename" },
            { new Dictionary<string,Type>{ { "kglx", typeof(string) } },"type" },
            { new Dictionary<string,Type>{ { "zzhfs", typeof(string) } },"type" },
            { new Dictionary<string,Type>{ { "id", typeof(string) } },"sbid" },
            { new Dictionary<string,Type>{ { "dm_id", typeof(long) } },"dm_id" },
            { new Dictionary<string,Type>{ { "ssxl", typeof(string) } },"ssxl" },
            { new Dictionary<string,Type>{ { "dwzy_id", typeof(string) } },"sbid" },
            //{ new Dictionary<string,Type>{ { "task_id", typeof(long) } },"task_id" },
            //{ new Dictionary<string,Type>{ { "xlsx", typeof(string) } },"XLSX" }
        };
            }
        }
        /// <summary>
        /// 配电设施字段对照
        /// </summary>
        public static Dictionary<Dictionary<string, Type>, string> dicContrastTopoPdss
        {
            get
            {
                return new Dictionary<Dictionary<string, Type>, string>
        {
            { new Dictionary<string,Type>{ { "oid", typeof(long) } },"oid" },
            //{ new Dictionary<string,Type>{ { "cxkg", typeof(string) } },"cxkg" },
            { new Dictionary<string,Type>{ { "sbmc", typeof(string) } },"devicename" },
            //{ new Dictionary<string,Type>{ { "pdsx", typeof(string) } },"pdsx" },
            //{ new Dictionary<string,Type>{ { "cxkgid", typeof(long) } },"xl_cxkg" },
            //{ new Dictionary<string,Type>{ { "dm_id", typeof(long) } },"xl_oid" },
            //{ new Dictionary<string,Type>{ { "mxh", typeof(string) } },"mx_mc" },
            //{ new Dictionary<string,Type>{ { "dydj", typeof(string) } },"DYDJ" },
            //{ new Dictionary<string,Type>{ { "xedl", typeof(decimal) } },"XEDL" },
            //{ new Dictionary<string,Type>{ { "task_id", typeof(long) } },"task_id" },
            //{ new Dictionary<string,Type>{ { "xlsx", typeof(string) } },"XLSX" }
        };
            }
        }

        public static string PG_Query_Switch { get { return "SELECT to_char(current_date,'yyyy') || C.sbzlx || A.oid AS oid,''||C.sbzlx || A.oid AS id,C.oid as dm_id,'{1}' AS dwxh,to_char(current_date,'yyyy') :: int AS year,A.cxkg,A.cxkglx,''||A.cxkglx || A.cxkg AS ssxl,A.typeid,C.sbzlx,(((0 :: bit (64)) | get_byte (B.connection,1) :: bit (64)<< 0) | (get_byte (B.connection,2) :: bit (64)<< 8) | (get_byte (B.connection,3) :: bit (64)<< 16) | (get_byte (B.connection,4) :: bit (64)<< 24) | (get_byte (B.connection,5) :: bit (64)<< 32) | (get_byte (B.connection,6) :: bit (64)<< 40) | (get_byte (B.connection,7) :: bit (64)<< 48) | (get_byte (B.connection,8) :: bit (64)<< 56)) :: int8 AS start_conn,B.ssdz,(CASE WHEN C.sbzlx IN (30000004,32400000,20400000) THEN 4 ELSE 5 END) AS devicetype,(CASE WHEN C.sbzlx=30000004 THEN '开关站' WHEN C.sbzlx=32400000 THEN '环网单元' WHEN C.sbzlx=20400000 THEN '电缆分支箱' WHEN C.sbzlx=32300000 THEN '箱变' ELSE '配电室' END) AS TYPE,(CASE WHEN C.sbzlx=30000004 THEN '三遥开关站' WHEN C.sbzlx=32400000 THEN '三遥环网单元' WHEN C.sbzlx=20400000 THEN '电缆分支箱' WHEN C.sbzlx=32300000 THEN '箱变' ELSE '配电室' END) AS blackname,C.sbmc AS devicename,c.sbid,D.pdts,D.pdrl,row_number () over (partition BY B.ssdz) AS ROWS FROM (SELECT*FROM topo_sb_line_oid WHERE typeid=311000) A INNER JOIN (SELECT oid,connection,ssdz FROM sxgis.v_t_tx_znyc_mx WHERE data_flag !=3 AND {0}) B ON A.oid=B.oid INNER JOIN (SELECT oid,sbzlx,sbmc,sbid FROM sxgis.v_t_tx_znyc_DZ WHERE sbzlx IN (30000004,32400000,20400000,32300000,30000005,30000006,34300000) AND data_flag !=3 AND {0}) C ON B.ssdz=C.oid LEFT JOIN (SELECT ssdz,sum(pdrl) AS pdrl,count(ssdz) AS pdts FROM topo_pdss WHERE ssdz> 0 GROUP BY ssdz) D ON C.oid=D.ssdz;"; } }
        public static string Oracle_Query_Switch = "SELECT DISTINCT dwzy_id,(CASE WHEN PDAI_TYPE='3' THEN '三遥' WHEN PDAI_TYPE='2' THEN '动作型二遥' ELSE '未配置终端' END) AS ZDHFS,(CASE WHEN ASSET_TYPE=80 OR SWITCH_FUNC=4 THEN 1 ELSE 0 END) AS YHFJ FROM (SELECT SBID FROM topo_sb_line_sbid WHERE TYPE=3 AND SBID IS NOT NULL) A INNER JOIN equ_te_breaker B ON B.SG_CODE='{0}' AND A.SBID=B.dwzy_id UNION ALL SELECT DISTINCT dwzy_id,(CASE WHEN PDAI_TYPE='3' THEN '三遥' WHEN PDAI_TYPE='2' THEN '动作型二遥' ELSE '未配置终端' END) AS ZDHFS,(CASE WHEN ASSET_TYPE=80 OR SWITCH_FUNC=4 THEN 1 ELSE 0 END) AS YHFJ FROM (SELECT SBID FROM topo_sb_line_sbid WHERE TYPE=3 AND SBID IS NOT NULL) A INNER JOIN equ_te_dis_switch B ON B.SG_CODE='{0}' AND A.SBID=B.dwzy_id UNION ALL SELECT DISTINCT dwzy_id,(CASE WHEN PDAI_TYPE='3' THEN '三遥' WHEN PDAI_TYPE='2' THEN '动作型二遥' ELSE '未配置终端' END) AS ZDHFS,0 AS YHFJ FROM (SELECT SBID FROM topo_sb_line_sbid WHERE TYPE=4 AND SBID IS NOT NULL) A INNER JOIN equ_pi_dn_room B ON B.SG_CODE='{0}' AND A.SBID=B.dwzy_id";

        public static string PG_Insert_Trans = "INSERT INTO topo_zyxl.topo_pdss (oid,dwxh,year,id,sbmc,pdsx,pdlx,pdts,pdrl,dm_id,dwzy_id) SELECT to_char(current_date,'yyyy') || sbzlx || oid AS oid,dwxh,year,'' || sbzlx || oid AS id,devicename,pdsx,'柱上变' AS pdlx,1 AS pdts,pdrl,oid AS dm_id,sbid AS dwzy_id FROM topo_pdss WHERE ssdz=0 UNION ALL SELECT to_char(current_date,'yyyy') || B.sbzlx || B.oid AS oid,dwxh,year,'' || B.sbzlx || B.oid AS id,B.sbmc,(CASE WHEN sbzlx=30000006 THEN '专用' ELSE '公用' END),'配电室' AS pdlx,pbts,pbrl,B.oid AS dm_id,B.sbid AS dwzy_id FROM (SELECT dwxh,year,ssdz,sum(pdrl) AS pbrl,count(pdrl) AS pbts FROM topo_pdss WHERE ssdz> 0 GROUP BY ssdz,dwxh,year) A INNER JOIN (SELECT oid,sbzlx,sbmc,sbid FROM sxgis.v_T_TX_ZNYC_DZ WHERE (sbzlx=30000006 OR sbzlx=30000005) AND data_flag !=3 AND {0}) B ON A.ssdz=B.oid UNION ALL SELECT to_char(current_date,'yyyy') || B.sbzlx || B.oid AS oid,dwxh,year,'' || B.sbzlx || B.oid AS id,B.sbmc,'公用','箱变' AS pdlx,pbts,pbrl,B.oid AS dm_id,B.sbid AS dwzy_id FROM (SELECT dwxh,year,ssdz,sum(pdrl) AS pbrl,count(pdrl) AS pbts FROM topo_pdss WHERE ssdz> 0 GROUP BY ssdz,dwxh,year) A INNER JOIN (SELECT oid,sbzlx,sbmc,sbid FROM sxgis.v_T_TX_ZNYC_DZ B WHERE sbzlx=32300000 AND data_flag !=3 AND {0}) B ON A.ssdz=B.oid";

        /// <summary>
        /// 参数：task_id
        /// </summary>
        public static string PG_Update_ZWYC_XL = "UPDATE wjfx.t_tx_zwyc_xl SET dwjg=(CASE WHEN llzlx=1 THEN '开关站接线' WHEN zgjkxcd>=zgdlxcd AND lllx=0 THEN '单辐射' WHEN zgjkxcd>=zgdlxcd AND (lllx=1 OR lllx=2) THEN '单联络' WHEN zgjkxcd>=zgdlxcd AND (lllx=3 OR lllx=4) THEN '两联络' WHEN zgjkxcd>=zgdlxcd AND (lllx=5 OR lllx=6) THEN '三联络' WHEN zgjkxcd>=zgdlxcd THEN '复杂联络' WHEN lllx=0 AND llzlx=0 THEN '单射' WHEN lllx=0 AND llzlx=2 THEN '双射' WHEN lllx=0 AND llzlx=3 THEN '对射' WHEN lllx IN (1,2) AND llzlx IN (2,3) THEN '单环网' WHEN lllx> 2 AND (gbts+zbts=0 OR B.llpdts=0) THEN 'N供一备' WHEN llzlx IN (6,7) THEN '双环网' ELSE '其他' END) FROM (SELECT A.oid,MIN (B.pbts) AS llpdts FROM (SELECT oid,(regexp_split_to_table(llzxl,',')) AS llzxl_oid FROM wjfx.t_tx_zwyc_xl WHERE task_id='{0}') A LEFT JOIN (SELECT gbts+zbts AS pbts,oid FROM wjfx.t_tx_zwyc_xl WHERE gbts+gbrl=0 AND task_id='{0}') B ON A.llzxl_oid=CAST (B.oid AS VARCHAR (200)) GROUP BY A.oid,B.pbts) B WHERE t_tx_zwyc_xl.oid=B.oid AND t_tx_zwyc_xl.task_id='{0}'";
        /// <summary>
        /// 参数：
        /// 1、task_id
        /// 2、parameter
        /// </summary>
        public static string PG_Insert_ZNYC_DZ = "INSERT INTO wjfx.T_TX_ZNYC_DZ (oid,sbzlx,ssdkx,sfzg,sfzclj,ssfd,ssfz,task_id) SELECT ssdz,sbzlx,ssdkx,sfzg,sfzclj,ssfd,ssfz,'{0}' AS task_id FROM (SELECT A.ssdz,b.sbzlx,A.ssdkx,A.sfzg,A.sfzclj,A.ssfd,A.ssfz,ROW_NUMBER () OVER (PARTITION BY A.ssdz ORDER BY num DESC) AS ROWS FROM (SELECT ssdz,ssdkx,sfzg,sfzclj,ssfd,ssfz,COUNT (oid) num FROM temp_znyc_pdbyq GROUP BY ssdz,ssdkx,sfzg,sfzclj,ssfd,ssfz) A INNER JOIN (SELECT oid,sbzlx FROM sxgis.V_T_TX_ZNYC_DZ WHERE sbzlx IN (32300000,30000005,30000006,34300000) AND data_flag !=3 AND {1}) b ON A.ssdz=b.oid) A WHERE ROWS= 1";
        #endregion
    }
}
