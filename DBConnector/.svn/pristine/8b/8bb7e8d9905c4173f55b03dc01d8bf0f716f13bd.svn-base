using Oracle.ManagedDataAccess.Client;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DBConnector
{
    public class ConfigClass
    {
        public static OracleConnection OracleCon = new OracleConnection(OracleConString);
        public static OracleConnection GetOracleConnection
        { 
            get
            {
                if (OracleCon.State != System.Data.ConnectionState.Open)
                    OracleCon.Open(); 
                return OracleCon; 
            } 
        }
        public static string ServerDataIp { get { return "http://172.16.144.246/mygisserver/?request=SearchByConditionBatch&equipparams={%22equip%22:[{%22typeid%22:305000,%22oid%22:130000108631},{%22typeid%22:305000,%22oid%22:130000120112}]}&condition=%28sbtype%20=%20311000%20and%20fsbzlx%20in%20%2830000000%29%20%29%20&topoState=3"; } }
        #region PG
        /// <summary>
        /// PG连接字符串
        /// </summary>
        public static string PGConString
        {
            get
            {
                return "Server=172.16.144.252;Port=19200;UserId=gis;Password=GIS20_sig;Database=fzgis;Encoding=UTF8";
            }
        }
        public static string PGGHConString
        {
            get
            {
                return "Server=172.16.144.252;Port=19200;UserId=gis;Password=GIS20_sig;Database=fzgis_ghdw;Encoding=UTF8";
            }
        }
        public static string PG_GHDW_ConString
        {
            get
            {
                return "Server=172.16.144.252;Port=19200;UserId=gis;Password=GIS20_sig;Database=fzgis_ghdw;Encoding=UTF8";
            }
        }
        public static string PG_QuerySql
        {
            get
            {
                return "WITH line_id AS ( SELECT 130000108631 AS cxkg UNION ALL SELECT 130000120112 AS cxkg ) SELECT * FROM ( SELECT 2022 AS 年份, cxkg, equips, oid, start_conn, end_conn, sbzlx, type, ST_asText (shape) AS shape, devicetype, ( CASE WHEN devicetype = 3 THEN '开关' || RIGHT (CAST(oid AS VARCHAR), 4) ELSE NULL END ) AS devicename, ( CASE WHEN devicetype = 3 THEN '未配置终端分段开关' ELSE NULL END ) AS blackname, ( CASE WHEN kgzt = 536870912 THEN 0 ELSE 1 END ) AS kgzt, sbid, xlcd FROM ( SELECT a.cxkg, a.equips, a.oid, split_part ( get_conn_str (CONNECTION), ',', 2 ) AS start_conn, split_part ( get_conn_str (CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-断路器' AS type, 3 AS devicetype, shape, kgzt, CAST (NULL AS bigint) AS ssdz, b.sbid, 0.0 AS xlcd FROM ( SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 111000 AND cxkg IN (SELECT cxkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSDLQ b ON a.oid = b.oid UNION ALL SELECT a.cxkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '站外-超连接线' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 140000 AND cxkg IN(SELECT cxkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZWCLJX b ON a.oid = b.oid UNION ALL SELECT a.cxkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '站外-连接线' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 130000 AND cxkg IN(SELECT cxkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZWLJX b ON a.oid = b.oid UNION ALL SELECT a.cxkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '站外-电缆段' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, ST_Length(shape) AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 201000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_DLD b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '导线段' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, ST_Length(shape) AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 101000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_DXD b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-隔离开关' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 113000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSGLKG b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-负荷开关' AS type, 3 AS devicetype, shape, kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 112000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSFHKG b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-跌落式熔断器' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 115000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSDLSRDQ b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-连接线' AS type, 2 AS devicetype, b.shape, NULL AS kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 360000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZNYC_ZNLJX b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-断路器' AS type, ( CASE WHEN C.sbzlx = 30000000 THEN 2 ELSE 7 END ) AS devicetype, b.shape, NULL AS kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 305000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZNYC_DLQ b ON a.oid = b.oid LEFT JOIN dwzy.T_TX_ZNYC_DZ c ON b.ssdz = c.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-隔离开关' AS type, 2 AS devicetype, b.shape, kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 306000 AND chkg IN(SELECT chkg FROM line_id)) a INNER JOIN dwzy.T_TX_ZNYC_GLKG b ON a.oid = b.oid AND(b.sbzlx = 36000000 OR b.sbzlx = 30600000) UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-负荷开关' AS type, 7 AS devicetype, b.shape, kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 307000 AND chkg IN(SELECT chkg FROM line_id)) a INNER JOIN dwzy.t_tx_znyc_fhkg b ON a.oid = b.oid AND b.sbzlx = 30700000 UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站外-柱上变压器' AS type, 5 AS devicetype, b.shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 110000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.t_tx_zwyc_zsbyq b ON a.oid = b.oid ) c ) e";
            }
        }
        /// <summary>
        /// 查询变电站
        /// </summary>
        public static string PG_QuerySql_Substation
        {
            get
            {
                return "WITH bdz_info AS (SELECT oid,sbmc,sbid,st_centroid (shape) AS shape,sbzlx FROM dwzy.T_TX_ZNYC_DZ WHERE sbzlx=30000000 AND st_intersects (shape,(SELECT shape FROM wbsj.city_tree_base_gdqy WHERE dept_code='21311018110111010')) AND dydj NOT IN (21,22,24,8) AND oid IN (130000226176,130000226140)) SELECT A.oid AS bdz_id,A.sbmc AS bdz_mc,A.sbid AS bdz_sbid,B.oid AS xl_oid,B.cxkg AS xl_cxkg,B.cxkglx AS xl_cxkglx,B.sbmc AS xl_mc,B.sbid AS xl_sbid,CAST (NULL AS TEXT) AS shape,B.sbzlx,1 AS devicetype,111111111133 AS task_id FROM bdz_info A INNER JOIN dwzy.T_TX_ZWYC_XL B ON A.oid=B.qsdz AND B.dydj IN (21,22,24,8) AND B.cxkg IN (130000119004,130000119008,130000119005,130000119007,130000119446,130000116038,130000119447,130000119445,130000119450,130000119460,130000119006,130000119452,130000119455,130000119456,130000119451,130000119009) UNION ALL SELECT oid AS bdz_id,sbmc AS bdz_mc,sbid AS bdz_sbid,NULL AS xl_oid,NULL AS xl_cxkg,NULL AS xl_cxkglx,NULL AS xl_mc,NULL AS xl_sbid,st_astext (st_centroid (shape)) AS shape,sbzlx,0 AS devicetype,111111111133 AS task_id FROM bdz_info;";
            }

            //return "with bdz_info as (select oid,sbmc,sbid,st_centroid(shape) as shape,sbzlx from dwzy.T_TX_ZNYC_DZ where sbzlx = 30000000 and st_intersects(shape,(select shape from wbsj.city_tree_base_gdqy where dept_code = '21311018110111010')) and dydj not in (21,22,24,8)) select B.dydj,A.oid as bdz_id,A.sbmc as bdz_mc,A.sbid as bdz_sbid,B.oid as xl_oid,B.cxkg as xl_cxkg,B.cxkglx as xl_cxkglx,B.cxjg as xl_cxjg,B.sbmc as xl_mc,B.sbid as xl_sbid,cast(null as text) as shape,B.sbzlx,1 as devicetype  from bdz_info A inner join dwzy.T_TX_ZWYC_XL B on A.oid = B.qsdz and B.dydj in (21,22,24,8) union all select null,oid as bdz_id,sbmc as bdz_mc,sbid as bdz_sbid,null as xl_oid,null as xl_cxkg,null as xl_cxkglx,null as xl_cxjg,null as xl_mc,null as xl_sbid,st_astext(st_centroid(shape)) as shape,sbzlx,0 as devicetype from bdz_info;";
        }
        /// <summary>
        /// 查询馈线
        /// </summary>
        public static string PG_QuerySql_Feeder
        {
            get
            {
                return "WITH line_info AS (SELECT oid,cxkg,cxkglx,cxjg,sbmc,qsdz,sbid FROM dwzy.T_TX_ZWYC_XL WHERE dydj=22 AND cxkg IN (120000109511,120000097278,120000097369)) SELECT B.oid AS bdz_id,B.sbmc AS bdz_mc,B.sbid AS bdz_sbid,NULL AS xl_oid,NULL AS xl_cxkg,NULL AS xl_cxkglx,NULL AS xl_mc,NULL AS xl_sbid,st_centroid (shape) AS shape,0 AS devicetype,111111111133 AS task_id FROM (SELECT DISTINCT qsdz FROM line_info) A INNER JOIN dwzy.T_TX_ZNYC_DZ B ON A.qsdz=B.oid UNION ALL SELECT B.oid AS bdz_id,B.sbmc AS bdz_mc,B.sbid AS bdz_sbid,A.oid AS xl_oid,A.cxkg AS xl_cxkg,A.cxkglx AS xl_cxkglx,A.sbmc AS xl_mc,A.sbid AS xl_sbid,NULL AS shape,1 AS devicetype,111111111133 AS task_id FROM line_info A INNER JOIN dwzy.T_TX_ZNYC_DZ B ON A.qsdz=B.oid;";
            }
        }
        public static string PG_InsertSql
        {
            get
            {
                return "INSERT INTO topo_zyxl.topo_sb_oid (oid,equips,typeid,cxkg)VALUES('{0}','{1}','{2}','{3}')";
            }
        }
        public static string PG_Query_CXMXH { get { return " SELECT B.ssdz AS bdz_id,B.oid AS mx_id,B.sbmc AS mx_mc,A.cxkg FROM (SELECT*FROM topo_sb_line_oid WHERE equips='stopequips') A LEFT JOIN dwzy.t_tx_znyc_mx B ON A.oid=B.oid"; } }
        /// <summary>
        /// 创建临时表
        /// </summary>
        public static string PG_CreateTempTable
        {
            get
            {
                return "create temporary table topo_sb_line_oid(oid bigint,equips varchar(200),typeid bigint,cxkg bigint) ;";
            }
        }
        
        public static string Query_Columns { get { return "SELECT *  FROM {0} LIMIT 1"; } }
        public static string PG_Qurey_XDXX { get {
                return "H4sIAAAAAAAEABWaxbKrQBRFP4gBbkPc3ZkhF3eHr39506SqQ7pP771WJTEQxqxmQ+fZ0Vv0CSxToC8q6ifLXnCqRrSw9Hxo4ABJezSB7Peq03QGjQrsQzjbzBh71KDI0wtZlICC2ZGobGD/PXijGuBHajuKuiZbHwPWhtqZLDH1tSfhrJ+r7XXV6K9/1rpH6BGc9pV26UCH6xcHi20qzQu8KHs80zfJmBa1mGBmqUnNzTOAlSng8inZzU/CSaf0wkD4tRPy9B7zcd9k+X+MGZv41LXdkCHm+oS9Xk3YHSMYAOUOpuxAQ4X6RbSqeaEg24Gnk7CNVsyGLJzlFkt1H+VYLgq4DZU+mjgJwVKdL+aQSxyGw4X7enir6aGvnzzpZ0RGECWRtv5WUBVGfOMlZ+U/SjUCJY29OKMK9jjEv+rJ2NjckZmzqWjKkq+cAx6Ex9kmnsx7HCsNasZb653qXU6QOyB3QBEsMV1kgvCcpFlSJjOKS/ys5r155TbdTB2tYT92TpNogaJbiOZMsu2cycVpl65BqxAR5SIu921n7feDC0wEU0CHR0kBUNbrTaHwRYjTc+2Z7C2JiIUHW3uuFs4yuCY/ZX1ajIRJrb7jIqzKP1U/SMwjl0J9zLoOAKbiQKiUzkFm8+Gh+rPhPTiX3YtAD/7goOPe+DF9ooqWcHb/G8CL0S2cjEhBaxBmmYdjB5K7mf8kC/SgAiBwbUSc8YAHW7nYQ84ciWitVPlYJBLisi8dxsJnPXTAWr7KlzjCCwZBBomJlYqR17Q16o7t4EYWLhsTUQpiZpoRWy/H793lt1P11X2dEF4utu5R+7BF+48/Nbgg2EbSoJIh7hqo7bF4/vAXXCpnaEZhw5A/u6aCDcCfIvrDYegTPJVyrSNepm170GJM7reVIPrT7iXiO8LZg2mpJ8T55gozTcXXK4nVAEMatJOagcts4uI4pp1OFuU3hrM4kJG1eK7lcnQxVtFp67ruNnG9LtPqEV5aQlpu756YP6UvxBXPGZIAXIPoHeZO4BdID2X7ivPiSUoTYO2ohbidyWkCVTzbXMQkHnOAf4KBG4LNK+/5Wa7+J2XswYbpetVEtm6b3zE5sj9FryPa3ZIxv5y09zfdlFi1NTMOOyrPf4SGNuTfY9HjOOZoiVqFY4tlGu112rAN4H7Fn27MsWsLekxhjdUEYWydNI4nkoAGSmIiBxYXJoWye6+LYzRmNBuR5eu1q7JjAKMFrmGjB7cgG03OfwpgdGr6pm2zZZqZ6LlVPeqRz9Of0WknlgYNCtJEQVWVzWSYo7bSAN8XMOpljpBiubIEmbgRlnJYLK5C796hbq457IP1gCWeB6kk+ZQgqa+KeIkw4N6eJcqH1vh4fYjljGseRTCc+DYHQ359UJ3p9JV5Cr8m/0x7t8OgACjz8SJudwaYuv4VNwZ7KMOpFeu8R7Q0SPeEhaBwvzHMgnlco9ngQcBbch9/mRLTsr/db8lKVdNDY26mUcbf6ZEVZlAoaLsMwyRpEpoM70122VfYQPAj52FTx/111R+l5DDB7d4jDL9cVgsMbUClFvomQvHlUCPT420Ip47aSn+X9IId3PWzP+PCVQHYagcpqAu+vjWS+UUgL5Wwp7+zYZTpLuVSkqqvFhR7HO4+L1BT8AGTWmnRJWobyhL3Lo9YyBFho5y7V21IoNy0crQZQdxsv6orsGFK0Ypc5gE8UO36vETgdexVoyXGewFL1uRu+hgk8biO09IiZKAp6KKzFkvMIRFYCx+j5kgwsfNTaYTcgqXLbH/3vz+c9kGPPnah/jiB9iaPcHWv84lD/Rye5BSGDegtf11RgRFAo0zC2y0CyahUEi+jo/FnmIy7EIduTdShFUcIcOReyZiBMD1/serx0cKncCv2NIjpyWAQf3VfozSSDJDx1NOW4muOYfAiUr6CM+DiY8Haei1PWBfHpY3i113Cf7+ZhGFCODGIViJMVvYXlhaJiL1XskmpbDkKxeN5tt1yp/7U6sBJBQ1TkmZTf2SzdxLKRW4RvaPGWTjUP24DJcTzyW/RmytYjJdd+VmWiT+u3nQssiG2PKuqPf9AxN/tZw5PrBXeeuBmFzII+8X8DTrFG0ee6NkmRuL1ut4Gu8fSzvhg74nC8zL+2m8YQ5RPgLYN834/d5TDFInH70b93YR+szXTI6S3YYKYbVQbVQf3NX+l2LlP3/cp3oSQ5gZ1Fm4AU+wWVIen2gq09ZdPfhWc+FgffODYmeCLJEpzWpXJnLOkN8OF0Xwnl3hP55oWt53YEITZkIGuyDqlx8UUhnOzyEK51ToKYnbPYW78SAPhJQDovY0GcvYvIwIJQG18HqOND/elNPM/n7BbWXtjb6JBCqybGtM0ThD/1JZxZnIGIfACM+zoc6Fas1MVOxfBRWPKDQC4wceLx0J7h5OdVuNoSK5YoCFsZdoqyIqokhn08KspALcpsFEvwtd0/w7W2O4DX276DdG2lA4Cl2GSVgo6YGRDa75kAdgoMnzDvqrvxFj6HZYzRHL3pUxJjF7pDzDeU9eWOUxdRK5W+6At4tirMGKeDfNQBFP56Gpr8QkU/cY1OvF0R/e3+pCOv/SPFa6V14j2R3HXXQryn8TopagjLIUOM9EOQnEoAkoAGhWkDgoG4NmSVA5N9ObcEeMh5PoL0AYyHHUaNTVal8oI2tUdxmzgA/rzsnJ7xe3R2mJET6VDchnHuwRRKhEDvhveE/hd0QnLROSWvTD2GAYaei+q9m8LlXsl/7ApO0BNyXyjfAtS/ioPsM8cqlqxFKsuM/Hc+nXfEVS7Smd2lZbK+GoikYj5bWj9jIpT/Z7tCyC9hCzv6zfkfc5akQjk8ofCcdRPtMULpT705aOGyvfeC/gEi6f0GRBEAAvF7kzeCvfaM24EZ3zRyRMDy30XOUWXrbq57qNbWi83wZ3iF2lK9vu89mCuVfI3U9qieTd9zQwDg7W/6NAM6rpZybtFVeaw7Z9COIGqnP1MZ1EiNIuzO1z39tPr0sRiialQWu+ZJJVCgXPtqoKg6n/QRm+L5Z7okV1Ais8Zlf4uiYmwf0cTX7J6r8HUPyhln/4kNDPDEbVruM62oY5dz9C+bB197X71t1eWMpIkTF1FDEbHs6s3AbEZYFVCwAZqz6IOh1J9ww9D4IcJVX3Swv6ovzyiw+h+l3RTFsArR1qA/4S9T1W5zednAhf1b041UJ5vl2qJStNY91zJ+2MA9/p+Cd/X6iKgRVXQ2wbAn5vIW8h39Pt9eJYe94yO2rc5rpVSGH9NPAPUS9kbpotz7aDLIS410a+jXw/e9JRCC9veKtGVhn75hCO5hh+IkEIft813II7qsfzZ1cwXCwRHMMIx6uhZFqcuxk91F8/JCACKS/5f+rAavQLOYiEaNXlZE1olXrbM7hM0GuypqT6IZWCjzKrCorcTNuulZzGKi2DQphP4r1sTIwBAq2s6PsO8MDeb0pN5pWrT38a38V37o1uy0pLDOBp+BzZMy4K4H9rji+r1jKF4EDxLp3uglYlT8oCHv1s3DSRQxm7GYjK0ANWdkjwd3VYSFKiQE5jFs90f/dcWGnYAWxf/8Vd/Lhj2wubsQf486stnVuScZO5aPm7d9ualN3g2uxT7e1pV7Be/O1c6WGeemXro+7R87RfxA45imEZ2ZWIC8lAjCtK4Rf+uDG1G/LMp198ClX/M3AuJOdm1ybd5gSnCSHN4oDnKexx17niKJulGgeV/kF7Sww1Hotc0v2G5TTHiA1RxyWpD1OevmFP19qPbj6+S2S5jp33dE47wKbPoSTuARcqjAiyMkWnEK5wL+uMJNvMTY10MORIeubjChKDn3AM0P8jSgSz2epahlnT+ApvwTOA3LviVK4vMKDWUmHh6p+M5eEtrbSc52AIORKw+/ygflEXt03oWwBa/x/e/ORfBwbn3Yyx4jXQnhm4AXlItUf/a6Fy6skyMDAIgQEnk2H/r8NIkuqjDqpEmXldnM+td+hmtn1Lt033/UfTOO6Jqtib7vSjDmgkOvHqzCY33wm//tzdBh+K8VmKtJ7r6/GeJjiFy0jbwwgvX9fFc5r5/uEaejVpjQU/Qt3nDQvcC7ugGt8QZ5kgksTpT3NKDhRCj5K+CKCjWbPT+GUVn1GDQt7+4ytkKeLpcbaaCkcjP73kpkjm2ivOgAVc5W5peDyi+7HD5rZA/WpZYXrI09kma7/w9fjIv1M1fykS80Hn/jes6ZxxfXFVdDePm4muJ9iB/tt0kigpuSPeCGPDfMDjbkXR9/kgyJCb1TfIPv2qKhdoUUMhgXmOV3LN9b6rM4Itr6PHaameMSizJvdJ8JteFSPwtOKhRJ/Genpp2mKCdcbbCPxGry1UBw3h7f6g2D6/pPKdgbWKWD82ikoUovF1A1KF6BOv1YoQB8IM6oSBFmW97ysRR0+Vm/I73yc8/xsi9+fcVRNoGQ8QvqEQtmdiSh8hBuD8JBJgFIA7wdSQzfIX725th1TDSOtOf/HiV+l0x17/jFrtqGMRUeLxUoSIHaBu3McbOu7O0XamerUrnTmjlZ3TwEXwFs1e/7QRse/RLYcOZ/TapkIi2rjhdPYy4Ru2pp6uVMBiyVGQwWyJx+3ptaCAa6Xvu8aUMllSRH2WXWcsY3XvHydmRYuzqVZA9ofMD4dSuK1LMa8OaGimG509gaRhBMAvaBK/qWa+DVohlkZ3LZ9AoIHTAnMBxpdFcev2u3RzqDuNhu0AixRS9pqnm5/OcIRvDnegHW1QYq73FelUz4aolF04F4Ra9BbBeseVxLo5+7Rng+grC8s7t/5J6+HMtXnKxh8pM03PX2UHOXyoW+XxPcLT02e0wM7LmxpeRg9OOzEi9QvIDn+0dPk38GVyLZo144SHBiM47xPWOGvhvGFLSKINe21h5NrZMcpKUOEdD1e8E4Qr90LaBoZ76spxk52AYxsmYrqvpwzjImvRuYhctewqgA8wSZCEYztA6OBjZe5aRy0eAYNMO52Qs+w2eE3qnU6ULmqZhI+4YfSQ/RhBd0dDSX7mhudNEz1CYyLTgTwsMQaLazqQx7O0HX2og2CCKOdWmUEBV3B/qde8ZCEt7u28qF5pSh6Cg0VFmw4FpePRHCpIhrRj3MfyiAT/5fa6IUMcu22070LfQBBsotoawQVJEVcC69r2raq+jCCcu8iNJpEo0YLW39kLOGc3V/bqnRHcYgT98h9/qb9WrfJL6RbJ78NVhuaV7VmaY4jMsgF49vjcnzhubkr0pTZrMDMWt5RO92V+Vt6+mF3hqCe69v/0uabOvvLUs5P03756n+lOz11jIs+eT4CF4ND1ORVSrZhh2B+P0nWcYND76SXzetl65ftNYCEy398/Z3Rg+8nPmwGDcWJaVyqCrq1/1u2RBgicmayqw4TZ0ihuX0DuOeFJcyh4bThRdccHq5Ki7yPhDpF5TQRefjrrhRA/aJq5xJCTEc8XH43OaA0UVZr3SN6ssWPi5cP4qEPIvrpnd+7y4qBnvin+Kldzu9/ux8lkuNVo7h8kUUk+++FQ9Eh1evFj0HEhD+4gPOrvb8X3xcLdwfzdSmpD6omtgjcmIHEBGaiVP/v3J2x0zrcYKRXsJi5A2cClO61H/mZDU6ku25yzx8YIrTIpRRTdFjnwwmQvpdmIRhb6Bcc9G7bFHQHf/Oy6Bu1RVNL1ZSlVQAelamVN4QLR7ZavR5rfgmwXCvzzu9fFlfr7ir3zqplAFuxNr8Hqm9MK+4/xLVLlhCz8afjXSRL5w/VVY0acuZI8VUGZ7wvK/YCXb2/lxXs21qmXnoFccVoCE2A66PDq3LlzAKusrGjO22zB+m4glaeXSP8pmAjgAYWqOvxIQYxNMrfD4rVeVYDcnF9ZiHg4w7xUCY8iRyT6fvtcKuIg53Vjsv1xRIYRhtInJiZG6YCfXf3BPugZ4FTZ6rTGpNg/+KbyoFZ0DEd4FV+aP88j6W7D3lbUJUWpGZ+x5GtO71+cfQZnDrSIL7r3AtvlBH8ExhWCOZ99dGx6kmMn5IAAV59ZeRh4SlVE1W46yXhtQ/nLGNSkz791CeazDGCjpLCkAIqehiuxzNd4NCfnru5yGH0hmtdFEiSxBRIh5GadWs9s1lAk0Xj4JhpIIukx3vSOVgPzWxBUH6FR3ZvGOUVlTs4i35myapmEyolCMYeynHnAgr/8qP0ULtP/C92AzM/MlT6G86uOZEEm0nzHbCnyIMDvX2hf6loX7zMgk1VMIoF4W3sUqpVvV0lb+XT3X/52D5PE6Nbj1CkzCkUlBlIzzBZaTgNZE7h5xMgSIHYP2CHQSkNoYpnm/SsgB6+GczSETr/G9Sj6TA1/xxGGVK6bi6U+e0EQl1RWesx9vNrkP8oqIksf3IqaRCSz0xSolqn/URr8jkIEa2mHAqCXjGHk2z1jwoeckrvGglRIsftGtRiUjtjPnmaVLPdqdWz9GLT/wB40bMLHIPPmX4vHcHBLyLuFQWB8D0aWxfw8RH67rZ13mQaf0iyHKpqTFVZa+KFVkYieEXRtRzP8lgoTlE2YQJN8/25/Tq5mkgzljJDMMWOjx1QCOk902AtIxqjhL0IBvmLj+MdqhjVRkFP4fyP9wFUoTLQfrPLKdfXlBu6dhSa1BoMGhQLEQl39dp77sbTd/ogikZ41XqoSL9++tcGvnysnwc1kXwXqii1s84CnMrJ0OeejRlADwQfyPyTxr/+KUBEUdahr6w/m9TJSyMwaW7EYQJZfsHnAe95GWEeEOhmluUhN/zEYPM7G+ZQXI+04l+empQmrw9ze8n6zT2z6od7D8bUCJcTwNkSkDPK7l58mactmzlN6P237JfFRfp8k5m9cp8CeYFYZerDrKqkRNcvvDY+2FctXPCLk23voqtHrNrcAMm7naRw0TnAy7HQdLkLgwbjbPdCU0ohoX0wOV9l7ZIx6uOL8LzJQ0XRUMuiXJungsx+rV4JE3bXnbxsgmUcFID0NusnIeFCQdndLEH0Gdi+734e2fhRsi6FdAR0wuGRbc75KbKb7trtbfKs7Fp1e+HeB7kGZMYuIuYmKDly4DAz2eebRi13O9zZejZ8QbWXy3sA7ZgJGHUWLzwbyE8WDmnJEtSjsV+oSoeFifXOf8ugOX7IhsA+tVJvRpI/xhj6M6IgJ2xMXWMQG1Lq/eIhj7nHk9EljAGEv6bATZHD4FcofuhhwkYrWo7lFqX9FcckYYYF1xjocojc2z2++v8cABlbYqcUVRuo3wj3GyUFoHr1sNhGfa6bJ3w2i3daD79Ifcp3oYgCa5shzDP1/ce6xgyHebftqnH8+bmdy+1gUDvBt7N+0Tz6Qq/PjMB2wfhWU85Ht+BCyp4lWcd2gUgGizJEzzCdbH69Sd6Vab+2k7kGNxeApFzd1c/ZlGlwpVhPlGlWxdBd3gadm7R/42ZS/CxNDuUS3v4HUQGINjHkG5PUYJ/ir1ILrmCbicvkEeekprvIl0/ZZqhb7gh3Y8K5dpDMs4V+PxCUsHz4s0DLy9D5nm/bByPlZDZ7M/pcofClyjueGVuKEx7xY1bf6Vei5OYS4SM9B8tvX3kiSZEMYYmWaJ90DBUr02S3R7K6A3dINru+iRQpocQIkIUbucxqGuMOyR/hKV1CE2KxgO7MxJ7HYoKFe9nsZJa3N8Ouo41UR1n0DIZ3stjJ66PDhFDR9HI167IKhayg6CaeBILyqp8vKur1W0RH13xGj0FwoUpzdHxgT1jB/ZNHAamhxGhcG3RFRjj+PFIx0x+RiYGFk/dH7AOwvPlaqx20fdzGpSsGp4vOkJ4BsnnhQi2zezTkXNogwMnV7IWc7LO5947hCQlSpcI+bNvbHF/AhBsP/l1PM7xGnH8ntrAVU+nLhD1dKOpKb0xyr9M0pklzPir2vCt4TsTNwMRyJ1WkeH0kbo80CApxSibhGYaZaQsNbJIcSNSg0KBYSU7PadbRhwl5YGOBfqIe9ougIFgSjvJvxp2BB4rjlo2b17WLs5S7u1D9BZI6MjkIKCBbghMea7XpLZkLpN2TUL2Qwh3IERhTWY/K+ArCILzjjdwfvxomt7TpThW4Kn9irI4d4NJSsVmGjFlSfjyQjLZqBAXaGhicKm8dVvoJHVvYIUR/lQUKmaQrVL/eXz5Ewak9V9rTqKJHJCsps8zQ7Vb/HG5xH81WKiRdojf+cmBYLIPIuy420wwATKUFWdAFUiUWuJ8J8WT8qlcvRbCbOx5G3qPKGi1GWJkpxGqb6b/ZkPDs2byTb5umXJeYWrQneO/ZrunV2JIpes+ef/NPjv2S8zJPW8o85IcqAy57m3b3aRJK40gjv9r0CDZoFG96sQebOxxb9mLyyTcxKAmNnzYWtASP/FIVLTIphA66W/eHHZ7vXZDiXD5Z7qinCyy0/uQAtcBe88brDDgbip/TlffXX2p7TPa+uS3Iao3S6m+nHRg+4XtkxJvRse5mMmbS2jk7Z6k4/vbqFg1NxZVkQlKpc4jhw8GZ2WKUZ9tWPby5b2IU5NlTbGsFb9/OHaZY0q+PnV0SgupxOtX29hOh/D5g/XDOOCqzKzF5FWONIPtiuTAMNxC6sAwp1D8xIhFmSXCNgJf6+JS50bvx1QaEEcu+whtDT5XXqLHtp/kc/FJbHGzN9LffJNzUDQwFeJjjal5j8xl74VDiXqM5tanSOxxKJ29394jqNwNelKH+5jVVw/CBPHLyoVT6wZxfzEZhs7dOSAhSySSc5PwLNE//Ck7xXEG/V7T9x2Wn1N5ETKp3+GF32Z7U9zsV8I9Pc0NYxDVDfYDrt+dQAyKCt4UfdbhJGr7u0tk/iHDY1Ux4bSGqbL6ilNeVjakwmiJsfndMZX3SFqn96FpmKYH4zGpatdhQGTUu73/Lpz/BKxRXCQ/qXvphHf/gruj7nceOrCTRWZQI7JVzcx+XCrDJAwoXimjC16qbbM9HidH/1KmKN56bI0FmBlyC05VuDsAHu3R8BW3kL3kes8sh0znLrIvf6kIPJLxptxdYpKMamQSY0+84ZbI0hmsdzhi7+IaGQeQI70si36Is4GRItKjjdRdm9wFt1GjDSL9zAHRWFp3dtE5xW7HglcN3aY5OpuE2uE8N45xWF8gTq/PLlrfbLoWqC5hW3O+7tvn6GoQ+slj+1u30ckEKCe+y9DSLFVeX8Uu6mKqxDaGf7WidTdB+RGfDb1KfwVRofQ/6KVvOGU7LPIH9dfW8yz8YfE+G/7QwLVaH6InhOcf2lMW9T8jlFVMH9UP2WLCCcNsEu+MgryhBEHxW+05/J80insVRDr3zKFDPg4kHuaPyZDmNSDSbZug79XRa5wTDxf3zEgCgYebHKKnu4qYnjv+sIvC0i6gj5+dEyJ54ceUrMJ3J/+yhWiVWTqkL/mj80ZL8VXxxfCn1FBm/+ARqv3an0x2AXGqkZsov6LUyYqFOrn5uoaBCdOEDjxIw8UjX3Cx3pSK7Ievuuahmmgbql3tvdTZmwU6f8oRQm1ABhnjpeLEy+P3sxXNoUlXx3+4htIzkBGKA4iG8KZr7/mUOKa0JOUlV2BaShv37crK3O3EFex0fxfmSY86tr01fyBWTuW3Y+9hYKOQhuG6Pc22roXkUhUS/U3nJRQchavLvmfZqSmkUZ8p8Q0S1MaXINtGlvPoAPqEmG041qmgwIfxVbEnWBjt8XyFudyO+d6vac5M8gtTOOhQXamtEcX3oi1Fw02N+UX/G2BYnsIzbbGrG6yZukV5jZti7R4W8PmtqwMsf3ZuKjS93XDMui8XVPH0DvHvwJWY284OQps6CyvE++dyvv89MGkwAwxVTdg9i4c1I2iqmJM6N+XDgj1OMwZbrIXK79M4z1ZrSmDmScX9wxDxzfdiEKAAFk3oI62bN05/UNRi/5NhP813pss/B3+YUUulsXJz4iHCNq+sBIvlGRsUV+feFsRLdG36sHKFGXu//G1ASyOADXUnjTxznjRjR5tLf5ekLz1SUrzhiTvm7+pKgQYe6XOEp1lqpVA/xkiL3GxhEa7SR7odH3YG/2VwiXpzEeHv9bSx7/mVUF8jAI+IPauFW2rKvyf48P7OCCJBcLOvJTsAp4nVExqnxQXTyk0Qkd4jaSsetgkBocDXStZYnXklKmU13NBGDEKMP61GsCuJ/ApOvwa4WO3QwDjZjQMo/kTuhxw1ADbGFACxV6k7Jl15BzBCiuMiuwKeeLP3xyX98NdG5B3WtWo12g//P4UNGst3UOgUx5260p0X3K+bhJLPr7xlfD4p20p4uQfxF8vSRmfsolOVYWjF2X81OnX+N4dI1Zk9zocCh/aYsSHcEif7pNJfXhJalxeZe0IOub364quNPsrcmd+VEC1wgkwqw46TDd9VJ0AR1vr3jot8zz+Edxhong+9vYFmgzvs0oO8RtxgdxYWYQY5DWbjY7HEiCG7nEfAdfAMubJE+wlosD8tyrWxw8tgDXiybWTq9PdulrbIqb8k72J3oY1EBTvdvDPHwTDJyJ6f5gM3ttgJunXf3NxUVRLnPpjGl6QqooI8mgSQ5xr21AHukawUq8fFgf1akq0MJuEOFNEVlaP6WJCcFVp3xpXjT7tMDAX+gH9JKYPDQy0MGfM8dA55qyvC0TmskbZ/6zZxXlIW///4yz++9wO/fuLEGkUtVlrcMcHPfi9f+kaNCojRjEV3glXYtLwgc9n0BWR16YtRiykzCfTsNfE0H/NuuVRmCrPKN00q5cQx61+KrZYBqTobKtV4tG/iZmdQ8fjU5LWP03cmYEAn5AUdYN61PoRZRtEwYdopQjon+z7qV7lsrge4lbbagRwdOmRPlDgaTUmYC5pZ3z4mkKWDY0u4JVOjk1Ubvw0rr390LDFSdSDYz99ORpXF2eoZKY/aBHbU4vveDH7iCkZLes8a55IyI6Fj1vpJyboyCVcGfGkV49M3PSO5O+HxEe21ToV3LfMzcmxC5y4hqiUkgrksdaGqVE8axs1LRq9mr5Yl+kfXtWcPluwGUU0YL2VgiGJXBPMglmenlqJiVvGoban2EENMf212I8aWaHj7LYdO7zRrzOIgz6HG/4e66GZdHdWKP8BWtyR44UPwqmu2Q7LBT5qL8mCilkcTAdxgzVPK+W62ErYfPvaonXMmuhS3DfO7g3w+V9ZbH3q6cKhsBI2Q7P+c9vt1xLO2cMDG10DwccRySl0uTl0KLvuKn3Gh0jy7bwMLJckxB5Y8FqODV9OliECXPvXUrnlqUzL51rBswUgu+mB3DdorUClhqJRw/pbehEFK5LKfafEUTkgUuGAL9U7CNm2liFneDCCVm8y2DVog2nu15K9BhBpvc3utxmxs+2iWahyjcK71/E9A9hZaUJKuaxiHQPHAy0K82TKZQ6kFWQmaHLdEqmYKKaa3VUe1cvpyzQAiYN9ZxKlCAMp7NcLTxdcIPzB93fBHsrFdciriQUhummdMzHe7R7ApB1TxKyTMm6jIuG6HWXU+yVVAd4oQGEkRSQcu67w7N92ypvfW84Z3vIV04+9J8PWU3/c8CM471E3Re1gkYMzRFOUtVUNtkzi7tVQJ+e6gTTp/z+J8wU9A0IyC7Td8uskTrURVDYAndASkzCTnKa1fPXj5JhpPInG5BjdiH04PNLWFbxXWHyL4wvNQbvwK5pNWyTPelCu0QuG7RSh8sqFM7gip3uUIsWjU/OmW/a+Hmm446KcOZITwXPAtIIwgbSbRGIbUTmR/RB427y/yeixDzYviMZVpNMIwRF/sHb0iBp4bNBxSKrb8RlRWdI53iOOvvfJZS42Nm588CT/RdZzdzDVZX9psdYsSm/VD5WsuVScgBStUvrAGd6+ey5/IP07L+/MoFLZaaDXUoV8pzzstfuD8+B13sUChpvEmlzcl6XMSUzBx7++po2PsA6VaWNNfGIKKVUkCx6GbubzWyhUZA6mqBs08aqyrwmz3eZv6b6fqjr0hX6KD30zrgEaKbKeBHO+DrMuY51oWbU0tfzKB7cImZF9fUNBE2hciCnbEhJ4+9l8oj9DhJpc4rxsrRnWxy1rHBMLYLDXc6BU24W1qFZRib/e+besq1VL8ytxDPjRN1WPMfgD8XAjuXXKiWUOnqVdR3VctnDpDkwIWgRCDmK0ofJJq29PNV3Fhp92QVJWF6xi5pxQhubiYI9Q+EMXfzFeGqEpuAvNIAEgY7tpOxnhAr/2a0rX/IUGXLmI+HJNEEnUnGemPRwCdN2SSoCXkDOUtXh3Ov6Jv356szhLCcQdQ6V808t7qkEHtay4Hy+lbpYEnPz9LBo8WTTCM8/2upG2kDdLTfjLU/gsNtFdw2E4O3XZz0I3CzoEutAZ0qpK3jiRUcFgJdQQW0qdB+1Hb6yuWhsJjfodA1SLWf6uQ9MNvJ2AMu1H97aSbwdJfzK2/l1QIx7Tr1UL2wt69Jst3I2cLOg3dEaIXpWRp6xYGWlMaNksilm4PfzLILwZgOgFvd5s/gGgFuopADAAAA==";
                //return ""; 
            } }
        public static string PG_Qurey_KGXX { get { return "H4sIAAAAAAAEAA2TNZaEUAAED0SAy4S4y3ycDB3c/fS7B+igql73i4pDy/WVP4E1gXLsTziYQlE8wVepeM/IZ8d/LFxbZaKxf03XnMGDVRXsCxTmcG7BxNOJNE+zc6+8sSurtLfHCaoXYAe/cHj9QVfzALOcxFn7y3p7CKRO86j6Gy6KG1bcyXL2I+rgNzKbIGg8xd+vJ9eDT9Pztu5NHNyZi/sIddwpT5VfRh6YOyEXriPikMFBfffVUyMd1PJz8ButIlgSKp2chtloydLaKQ8g4kHp+Z5wBxFB/pj5PFpQ74275K4EQ0d2uU2LLc9aqSSmaOJAvK8lLaMpDV5bNbVZWOJ3oWiTb3Fho9XevY8UUpb4y+9XzZm3KJOL+Hg0njBCJughFbxDeNqGnpxEMuqbUJ6GjwkAUPL6G1HiQdAbwC5E01TjRGBzzlqjDwtRZ5xRNJ5GB2vLZAWpn1MRdWZyXhuUt2qe7qOaWxOyXY07oRMUVtO5bcaqiaEA+ropoxesHtVHcgy0OhoIVWVnSezd9HY/+Q5IzNc6Cwmw1C6MWkXpvg+KnILOOwRoRACfkCrwQzyQNmVHuHPlUOkvdncDQl77NxqjDqtR4PDI+StY0Q0q3IgGk6T6euzVEMqx4KVc/PV2PtKrhl6XtNoh/gcpOJi7/bFthrMNqRITPtJMk2oxiVbJNAq7u5quzjM2efweFubaYFiutM2Lq4l+83yrp31eAWgP8fzN/sq2emnmu7ETsPXA79Y23RSR4xvnvLLvJqq18Gd7afA/pfdmpt5Zh75JSBXFm/4zsFt18yWT5owtwTDDRF55nDIqWpCM9P3jefPA1tDxtCbPknjNU/TQFuGixanhwCl8F/mna/L6E2FgHQI77pNpF4DTqMvQcrEeq2agTNjNgzIAhKy9iIzZxQdaTV2Kx8Yr05NzNl/yUDsuvqSsKG63h1IVpmyrBt2e/8z9iGjpE6OYON/LHEHoqhGfkcDbHlNzJWZMaxAQH0JsnIgzGdvUspEGzs7coJuMIw6eNUuVUPPGxBxWGUDtf/AQkekgyT2Ol1gK0sXMx9U4rSh7XT7vrpDKYZCQLX0TQjETTEA48GZRkNm7wYGJ67dT1g4j67yvVIpKq2T2PXNT4337mJ3j+t5ypAMNif7/CcvaNvnYyNhcWK4eA7sXhZAiq80t+hVh7E9bP9BF7V94JjEF11mJy9mlRIZUkIFGRW3eNyrbQAYYiUciFfxZgQJp7ORfYFAh9oVosOJJcW8ElZJGpWcepj2TtSo87j4WspUrZUp4EgYC56DkctqOFi34CcWHn02JN611bD06gGUCiukviIHm4HV1NeljoWl3MyD/IpXYVxOz6Mzs/EatYzxTJXQ35f1VgKo4Kt+6S4gTu8hku/nLWPJsi8AxrjtiFA8OcP419aJZh/zxpNbAbaUzjoMsIXRy+p7vpeosITezHDlJWGazChxhG18x6SbUX9eLRJX2rjzHs49jYAMYpuN2b3aG68n3fAD/6+bqzuVZLmpi8Fm+aSgrb2Q3DqLZfMK3Ys/m0XxZ9G515E6cGTaweIxA0CpxBe6uCvt2g+FYn/UPMtjiWwAGAAA="; } }
        public static string PG_Query_Trans { get { return "SELECT a.cxkg,a.oid,(CASE b.sbzlx WHEN 11000001 THEN '专用' WHEN 11000000 THEN '公用' ELSE '' END) 属性,b.sbzlx,a.oid AS ssdz,b.sbid,0 AS type FROM ( SELECT* FROM topo_sb_line_oid WHERE typeid = 110000) a INNER JOIN dwzy.T_TX_ZWYC_ZSBYQ b ON a.oid = b.oid AND b.sbzlx = '83020005' UNION ALL SELECT a.cxkg,a.oid,(CASE WHEN b.sbzlx IN(30200000,30200001,30200002) THEN '公用' ELSE '专用' END) 属性,b.sbzlx,b.ssdz,b.sbid,1 AS type FROM( SELECT * FROM topo_sb_line_oid WHERE typeid = 302000) a INNER JOIN dwzy.T_TX_ZNYC_PDBYQ b ON a.oid = b.oid"; } }
        public static string Oracle_Query_Trans { get { return "select dwzy_id,obj_id,ratedmva as pdrl,(case when pub_priv_flag=1 then '公用' else '专用' end) as pdsx from equ_te_dist_trans where VOLT_LEVEL in ('AC00101','AC00201','AC00061') and dwzy_id is not null"; } }
        #endregion  
        public static string DestinationTableName { get { return "topo_zyxl.topo_xl_ceshi"; } }

        public static string PG_Query_XDDA { get { return "WITH cet AS ( SELECT 2022 AS 年份, cxkg, equips, oid,(((0 :: BIT(64)) | get_byte(CONNECTION, 1) :: BIT(64) << 0) | (get_byte(CONNECTION, 2) :: BIT(64) << 8) | (get_byte(CONNECTION, 3) :: BIT(64) << 16) | (get_byte(CONNECTION, 4) :: BIT(64) << 24) | (get_byte(CONNECTION, 5) :: BIT(64) << 32) | (get_byte(CONNECTION, 6) :: BIT(64) << 40) | (get_byte(CONNECTION, 7) :: BIT(64) << 48) | (get_byte(CONNECTION, 8) :: BIT(64) << 56)) ::int8 AS start_conn,(((0 :: BIT(64)) | get_byte(CONNECTION, 9) :: BIT(64) << 0) | (get_byte(CONNECTION, 10) :: BIT(64) << 8) | (get_byte(CONNECTION, 11) :: BIT(64) << 16) | (get_byte(CONNECTION, 12) :: BIT(64) << 24) | (get_byte(CONNECTION, 13) :: BIT(64) << 32) | (get_byte(CONNECTION, 14) :: BIT(64) << 40) | (get_byte(CONNECTION, 15) :: BIT(64) << 48) | (get_byte(CONNECTION, 16) :: BIT(64) << 56)) :: int8 AS end_conn, sbzlx, TYPE, shape, devicetype,(CASE WHEN kgzt = 536870912 THEN 0 ELSE 1 END) AS kgzt, sbid, xlcd, pdts, pdrl, pdfh, ssdz FROM(                             SELECT A.cxkg, A.equips, A.oid, b.CONNECTION, b.sbzlx, '柱上-断路器' AS TYPE, 3 AS devicetype, b.shape, b.kgzt, CAST(NULL AS BIGINT) AS ssdz, b.sbid, 0.0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 111000) A INNER JOIN dwzy.T_TX_ZWYC_ZSDLQ b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '柱上-负荷开关' AS TYPE, 3 AS devicetype, shape, kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 112000) A INNER JOIN dwzy.T_TX_ZWYC_ZSFHKG b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '站外-超连接线' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 140000) A INNER JOIN dwzy.T_TX_ZWYC_ZWCLJX b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '站外-连接线' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 130000) A INNER JOIN dwzy.T_TX_ZWYC_ZWLJX b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '站外-电缆段' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, ST_Length(shape) AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 201000) A INNER JOIN dwzy.T_TX_ZWYC_DLD b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '导线段' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, ST_Length(shape) AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 101000) A INNER JOIN dwzy.T_TX_ZWYC_DXD b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '柱上-隔离开关' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 113000) A INNER JOIN dwzy.T_TX_ZWYC_ZSGLKG b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '柱上-跌落式熔断器' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 115000) A INNER JOIN dwzy.T_TX_ZWYC_ZSDLSRDQ b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, b.CONNECTION, b.sbzlx, '站内-连接线' AS TYPE, 2 AS devicetype, b.shape, NULL AS kgzt, b.ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 360000) A INNER JOIN dwzy.T_TX_ZNYC_ZNLJX b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, b.CONNECTION, b.sbzlx, '站内-断路器' AS TYPE, (CASE WHEN C.sbzlx = 30000000 THEN 2 ELSE 7 END) AS devicetype, b.shape,NULL AS kgzt,b.ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM(                                      SELECT* FROM topo_sb_line_oid WHERE typeid= 305000) A INNER JOIN dwzy.T_TX_ZNYC_DLQ b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL LEFT JOIN dwzy.T_TX_ZNYC_DZ C ON b.ssdz = C.oid UNION ALL SELECT A.cxkg,A.equips,A.oid,CONNECTION,b.sbzlx,'站内-隔离开关' AS TYPE,2 AS devicetype, b.shape,kgzt,b.ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM(  SELECT* FROM topo_sb_line_oid WHERE typeid= 306000) A INNER JOIN dwzy.T_TX_ZNYC_GLKG b ON A.oid = b.oid AND(b.sbzlx = 36000000 OR b.sbzlx = 30600000) AND b.CONNECTION IS NOT NULL AND LENGTH(b.CONNECTION)> 9 UNION ALL SELECT A.cxkg,A.equips,A.oid,CONNECTION,b.sbzlx,'站内-负荷开关' AS TYPE,7 AS devicetype, b.shape,kgzt,b.ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM(  SELECT* FROM topo_sb_line_oid WHERE typeid= 307000) A INNER JOIN dwzy.t_tx_znyc_fhkg b ON A.oid = b.oid AND b.sbzlx = 30700000 AND b.CONNECTION IS NOT NULL UNION ALL SELECT A.cxkg,A.equips,A.oid,CONNECTION,b.sbzlx,'站外-柱上变压器' AS TYPE,5 AS devicetype, b.shape,NULL AS kgzt,NULL AS ssdz,b.sbid,0 AS xlcd,1 AS pdts,300 AS pdrl,1.1 pdfh FROM(  SELECT* FROM topo_sb_line_oid WHERE typeid= 110000) A INNER JOIN dwzy.t_tx_zwyc_zsbyq b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL) C) SELECT 2022 AS 年份, cxkg, equips, oid, start_conn, end_conn, sbzlx, TYPE,'LINESTRING(1 1, 2 2)' AS shape,(CASE WHEN devicetype = 3 THEN 2 WHEN devicetype = 7 THEN 2 ELSE devicetype END) AS devicetype, CAST (NULL AS VARCHAR(200)) devicename,CAST(NULL AS VARCHAR(200)) blackname,kgzt,sbid,xlcd,pdts,pdrl,pdfh,ssdz FROM cet UNION ALL          SELECT 2022 AS 年份, cxkg, equips, oid,(CASE WHEN start_count < 3 THEN start_conn ELSE end_conn END) AS start_conn, NULL end_conn,sbzlx,TYPE,'POINT(1 1)' AS shape,3 devicetype,'开关' || RIGHT(CAST(oid AS VARCHAR), 4) AS devicename,'未配置终端分段开关' AS blackname, kgzt, sbid, xlcd, pdts, pdrl, pdfh, ssdz FROM(                     SELECT *, COUNT(oid) OVER(PARTITION BY start_conn) AS start_count, COUNT(oid) OVER(PARTITION BY end_conn) AS end_count FROM(                     SELECT cxkg, equips, oid, sbzlx, start_conn, end_conn, TYPE, shape, 2 AS devicetype, kgzt, sbid, xlcd, pdts, pdrl, pdfh, ssdz FROM cet UNION ALL                     SELECT cxkg, equips, oid, sbzlx, end_conn, start_conn, TYPE, shape, devicetype, kgzt, sbid, xlcd, pdts, pdrl, pdfh, ssdz FROM cet WHERE devicetype = 3) A) b WHERE b.devicetype = 3 UNION ALL SELECT 2022 AS 年份, cxkg, equips, oid, start_conn, NULL end_conn,sbzlx,TYPE,'POINT(1 1)' AS shape,7 AS devicetype, CAST (NULL AS VARCHAR(200)) devicename,CAST(NULL AS VARCHAR(200)) blackname,kgzt,sbid,xlcd,pdts,pdrl,pdfh,ssdz FROM cet WHERE equips = 'lastequips' AND devicetype = 7; "; } }
        public static string Oracle_Query_XDDA { get { return "select dwzy_id,obj_id,sectional as dxjm,length as xlcd,(case when type = 1 then '中压架空' else '中压电缆' end) as xllx,zll from equ_te_line_seg where VOLT_LEVEL in ('AC00201', 'AC00101', 'AC00061') and dwzy_id is not null"; } }


        #region Oracle
        /// <summary>
        /// Oracle连接字符串
        /// </summary>
        public static string OracleConString
        {
            get
            {
                //return "Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=172.16.144.251)(PORT=11521)))(CONNECT_DATA=(SERVICE_NAME=pis)));User ID=pis;Password=New_2#4dba;";

                return "Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.16.144.251)(PORT=11521))(CONNECT_DATA=(SERVICE_NAME=pis)));Persist Security Info=True;User ID=pis;Password=New_2#4dba;";

            }
        }
        public static string Oracle_QuerySubSql { get { return "SELECT A.dwzy_id, A.run_trans_num, A.OBJ_ID, A.zrl, A.rlgc, C.max_load FROM ( SELECT A.dwzy_id, A.run_trans_num, A.VOLT_LEVEL, A.OBJ_ID, SUM (B.HVC) AS zrl, listagg ( rtrim( to_char (B.HVC, 'FM9999990.9999'), '.' ), '+' ) within GROUP (ORDER BY B.HVC) AS rlgc FROM EQU_PI_SUBSTATION A INNER JOIN EQU_TE_TRANSFORMER B ON A.dwzy_id IS NOT NULL AND A.OBJ_ID = B.STATION_ID AND A.VOLT_LEVEL IN ( 'AC00351', 'AC01101', 'AC02201' ) AND A.ASSET_TYPE = 30 GROUP BY A.dwzy_id, A.run_trans_num, A.VOLT_LEVEL, A.OBJ_ID ) A LEFT JOIN ieq_te_st_data_detail C ON A.OBJ_ID = C.DEVICE_ID AND periods = 2015"; } }

        public static string Oracle_QueryFeederSql { get { return "SELECT dwzy_id,obj_id,(CASE VOLT_LEVEL WHEN 'AC00201' THEN '20' WHEN 'AC00101' THEN '10' WHEN 'AC00061' THEN '6' ELSE '' END) AS dydj,(CASE WHEN ASSET_TYPE=80 THEN '专用' ELSE '公用' END) AS xlsx,rated_ele AS xedl FROM equ_te_line WHERE VOLT_LEVEL IN ('AC00201','AC00101','AC00061') AND dwzy_id IS NOT NULL"; } }

        public static string Oracle_Query_BDZDACX { get { return "SELECT A.dwzy_id,(CASE A.VOLT_LEVEL WHEN 'AC00351' THEN '35' WHEN 'AC00661' THEN '66' WHEN 'AC01101' THEN '110' WHEN 'AC02201' THEN '220' ELSE NULL END) AS dydj,(CASE A.STATION_USAGE WHEN '02' THEN '专用' ELSE '公用' END) sbsx,(CASE A.SETUP_KIND WHEN '01' THEN '户外' WHEN '02' THEN '户内' WHEN '03' THEN '地下' WHEN '04' THEN '半地下' WHEN '05' THEN '半户内' ELSE '' END) AS sblx,A.run_trans_num zbts,A.zrl zbrl,A.rlgc FROM (SELECT A.dwzy_id,A.STATION_USAGE,A.SETUP_KIND,A.run_trans_num,A.VOLT_LEVEL,A.OBJ_ID,sum(B.HVC) AS zrl,listagg (rtrim(to_char(B.HVC,'FM9999990.9999'),'.'),'+') within GROUP (ORDER BY B.HVC) AS rlgc FROM EQU_PI_SUBSTATION A INNER JOIN EQU_TE_TRANSFORMER B ON A.dwzy_id IS NOT NULL AND A.OBJ_ID=B.STATION_ID AND A.VOLT_LEVEL IN ('AC00351','AC00661','AC01101','AC02201') AND A.STATION_USAGE != '02' GROUP BY A.dwzy_id,A.STATION_USAGE,A.SETUP_KIND,A.run_trans_num,A.VOLT_LEVEL,A.OBJ_ID) A"; } }
        #endregion
        #region 结构对照
        /// <summary>
        /// 变电站字段对照
        /// </summary>
        public static Dictionary<Dictionary<string, Type>, string> dicContrastTopoBdz
        {
            get
            {
                return new Dictionary<Dictionary<string, Type>, string> {
            { new Dictionary<string,Type>{ { "oid", typeof(long) } },"bdz_id" },
            { new Dictionary<string,Type>{ { "id", typeof(string) } },"bdz_sbid" },
            { new Dictionary<string,Type>{ { "sbmc", typeof(string) } },"bdz_mc" },
            { new Dictionary<string,Type>{ { "dm_id", typeof(long) } },"bdz_id" },
            { new Dictionary<string,Type>{ { "task_id", typeof(long) } },"task_id" },
            { new Dictionary<string,Type>{ { "sbsx", typeof(string) } },"SBSX" },
            { new Dictionary<string,Type>{ { "sblx", typeof(string) } },"SBLX" },
            { new Dictionary<string,Type>{ { "dydj", typeof(string) } },"DYDJ" },
            { new Dictionary<string,Type>{ { "zbts", typeof(int) } },"ZBTS" },
            { new Dictionary<string,Type>{ { "rlgc", typeof(string) } },"RLGC" },
            { new Dictionary<string,Type>{ { "zbrl", typeof(decimal) } },"ZBRL" }
        };
            }
        }
        /// <summary>
        /// 中压线路字段对照
        /// </summary>
        public static Dictionary<Dictionary<string, Type>, string> dicContrastTopoZyxl
        {
            get
            {
                return new Dictionary<Dictionary<string, Type>, string>
        {
            { new Dictionary<string,Type>{ { "oid", typeof(long) } },"xl_oid" },
            { new Dictionary<string,Type>{ { "id", typeof(string) } },"xl_sbid" },
            { new Dictionary<string,Type>{ { "sbmc", typeof(string) } },"xl_mc" },
            { new Dictionary<string,Type>{ { "ssbdz", typeof(string) } },"bdz_sbid" },
            { new Dictionary<string,Type>{ { "cxkgid", typeof(long) } },"xl_cxkg" },
            { new Dictionary<string,Type>{ { "dm_id", typeof(long) } },"xl_oid" },
            { new Dictionary<string,Type>{ { "mxh", typeof(string) } },"mx_mc" },
            { new Dictionary<string,Type>{ { "dydj", typeof(string) } },"DYDJ" },
            { new Dictionary<string,Type>{ { "xedl", typeof(decimal) } },"XEDL" },
            { new Dictionary<string,Type>{ { "xlsx", typeof(string) } },"XLSX" }
        };
            }
        }



        #endregion
    }
}
