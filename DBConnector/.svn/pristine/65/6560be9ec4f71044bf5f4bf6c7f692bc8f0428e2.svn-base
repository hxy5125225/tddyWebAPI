using Oracle.ManagedDataAccess.Client;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DBConnector
{
    public class ConfigClass
    {
        public static OracleConnection OracleCon = new OracleConnection(OracleConString);
        public static OracleConnection GetOracleConnection
        { 
            get
            {
                if (OracleCon.State != System.Data.ConnectionState.Open)
                    OracleCon.Open(); 
                return OracleCon; 
            } 
        }
        public static string ServerDataIp { get { return "http://172.16.144.246/mygisserver/?request=SearchByConditionBatch&equipparams={%22equip%22:[{%22typeid%22:305000,%22oid%22:130000108631},{%22typeid%22:305000,%22oid%22:130000120112}]}&condition=%28sbtype%20=%20311000%20and%20fsbzlx%20in%20%2830000000%29%20%29%20&topoState=3"; } }
        #region PG
        /// <summary>
        /// PG连接字符串
        /// </summary>
        public static string PGConString
        {
            get
            {
                return "Server=172.16.144.252;Port=19200;UserId=gis;Password=GIS20_sig;Database=fzgis;Encoding=UTF8";
            }
        }
        public static string PGGHConString
        {
            get
            {
                return "Server=172.16.144.252;Port=19200;UserId=gis;Password=GIS20_sig;Database=fzgis_ghdw;Encoding=UTF8";
            }
        }
        public static string PG_GHDW_ConString
        {
            get
            {
                return "Server=172.16.144.252;Port=19200;UserId=gis;Password=GIS20_sig;Database=fzgis_ghdw;Encoding=UTF8";
            }
        }
        public static string PG_QuerySql
        {
            get
            {
                return "WITH line_id AS ( SELECT 130000108631 AS cxkg UNION ALL SELECT 130000120112 AS cxkg ) SELECT * FROM ( SELECT 2022 AS 年份, cxkg, equips, oid, start_conn, end_conn, sbzlx, type, ST_asText (shape) AS shape, devicetype, ( CASE WHEN devicetype = 3 THEN '开关' || RIGHT (CAST(oid AS VARCHAR), 4) ELSE NULL END ) AS devicename, ( CASE WHEN devicetype = 3 THEN '未配置终端分段开关' ELSE NULL END ) AS blackname, ( CASE WHEN kgzt = 536870912 THEN 0 ELSE 1 END ) AS kgzt, sbid, xlcd FROM ( SELECT a.cxkg, a.equips, a.oid, split_part ( get_conn_str (CONNECTION), ',', 2 ) AS start_conn, split_part ( get_conn_str (CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-断路器' AS type, 3 AS devicetype, shape, kgzt, CAST (NULL AS bigint) AS ssdz, b.sbid, 0.0 AS xlcd FROM ( SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 111000 AND cxkg IN (SELECT cxkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSDLQ b ON a.oid = b.oid UNION ALL SELECT a.cxkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '站外-超连接线' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 140000 AND cxkg IN(SELECT cxkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZWCLJX b ON a.oid = b.oid UNION ALL SELECT a.cxkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '站外-连接线' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 130000 AND cxkg IN(SELECT cxkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZWLJX b ON a.oid = b.oid UNION ALL SELECT a.cxkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '站外-电缆段' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, ST_Length(shape) AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 201000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_DLD b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '导线段' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, ST_Length(shape) AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 101000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_DXD b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-隔离开关' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 113000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSGLKG b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-负荷开关' AS type, 3 AS devicetype, shape, kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 112000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSFHKG b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(CONNECTION), ',', 3 ) end_conn, sbzlx, '柱上-跌落式熔断器' AS type, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 115000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZWYC_ZSDLSRDQ b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-连接线' AS type, 2 AS devicetype, b.shape, NULL AS kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 360000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZNYC_ZNLJX b ON a.oid = b.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-断路器' AS type, ( CASE WHEN C.sbzlx = 30000000 THEN 2 ELSE 7 END ) AS devicetype, b.shape, NULL AS kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 305000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.T_TX_ZNYC_DLQ b ON a.oid = b.oid LEFT JOIN dwzy.T_TX_ZNYC_DZ c ON b.ssdz = c.oid UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-隔离开关' AS type, 2 AS devicetype, b.shape, kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 306000 AND chkg IN(SELECT chkg FROM line_id)) a INNER JOIN dwzy.T_TX_ZNYC_GLKG b ON a.oid = b.oid AND(b.sbzlx = 36000000 OR b.sbzlx = 30600000) UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站内-负荷开关' AS type, 7 AS devicetype, b.shape, kgzt, b.ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 307000 AND chkg IN(SELECT chkg FROM line_id)) a INNER JOIN dwzy.t_tx_znyc_fhkg b ON a.oid = b.oid AND b.sbzlx = 30700000 UNION ALL SELECT a.chkg, a.equips, a.oid, split_part(get_conn_str(b.CONNECTION), ',', 2) AS start_conn, split_part ( get_conn_str(b.CONNECTION), ',', 3 ) end_conn, b.sbzlx, '站外-柱上变压器' AS type, 5 AS devicetype, b.shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd FROM(SELECT * FROM topo_zyxl.topo_sb_oid WHERE typeid = 110000 AND chkg IN(SELECT chkg FROM line_id)) a LEFT JOIN dwzy.t_tx_zwyc_zsbyq b ON a.oid = b.oid ) c ) e";
            }
        }
        /// <summary>
        /// 查询变电站
        /// </summary>
        public static string PG_QuerySql_Substation
        {
            get
            {
                return "WITH bdz_info AS (SELECT oid,sbmc,sbid,st_centroid (shape) AS shape,sbzlx FROM dwzy.T_TX_ZNYC_DZ WHERE sbzlx=30000000 AND st_intersects (shape,(SELECT shape FROM wbsj.city_tree_base_gdqy WHERE dept_code='21311018110111010')) AND dydj NOT IN (21,22,24,8) AND oid IN (130000226176,130000226140)) SELECT A.oid AS bdz_id,A.sbmc AS bdz_mc,A.sbid AS bdz_sbid,B.oid AS xl_oid,B.cxkg AS xl_cxkg,B.cxkglx AS xl_cxkglx,B.sbmc AS xl_mc,B.sbid AS xl_sbid,CAST (NULL AS TEXT) AS shape,B.sbzlx,1 AS devicetype,111111111133 AS task_id FROM bdz_info A INNER JOIN dwzy.T_TX_ZWYC_XL B ON A.oid=B.qsdz AND B.dydj IN (21,22,24,8) AND (A.oid=130000226176 OR B.cxkg IN (130000116038,130000116028,130000116050,130000116029,130000116046,130000116030,130000116047,130000116020,130000116036,130000116043,130000116039,130000116035)) UNION ALL SELECT oid AS bdz_id,sbmc AS bdz_mc,sbid AS bdz_sbid,NULL AS xl_oid,NULL AS xl_cxkg,NULL AS xl_cxkglx,NULL AS xl_mc,NULL AS xl_sbid,st_astext (st_centroid (shape)) AS shape,sbzlx,0 AS devicetype,111111111133 AS task_id FROM bdz_info;";
            }

            //return "with bdz_info as (select oid,sbmc,sbid,st_centroid(shape) as shape,sbzlx from dwzy.T_TX_ZNYC_DZ where sbzlx = 30000000 and st_intersects(shape,(select shape from wbsj.city_tree_base_gdqy where dept_code = '21311018110111010')) and dydj not in (21,22,24,8)) select B.dydj,A.oid as bdz_id,A.sbmc as bdz_mc,A.sbid as bdz_sbid,B.oid as xl_oid,B.cxkg as xl_cxkg,B.cxkglx as xl_cxkglx,B.cxjg as xl_cxjg,B.sbmc as xl_mc,B.sbid as xl_sbid,cast(null as text) as shape,B.sbzlx,1 as devicetype  from bdz_info A inner join dwzy.T_TX_ZWYC_XL B on A.oid = B.qsdz and B.dydj in (21,22,24,8) union all select null,oid as bdz_id,sbmc as bdz_mc,sbid as bdz_sbid,null as xl_oid,null as xl_cxkg,null as xl_cxkglx,null as xl_cxjg,null as xl_mc,null as xl_sbid,st_astext(st_centroid(shape)) as shape,sbzlx,0 as devicetype from bdz_info;";
        }
        /// <summary>
        /// 查询馈线
        /// </summary>
        public static string PG_QuerySql_Feeder
        {
            get
            {
                return "WITH line_info AS (SELECT oid,cxkg,cxkglx,cxjg,sbmc,qsdz,sbid FROM dwzy.T_TX_ZWYC_XL WHERE dydj=22 AND cxkg IN (120000109511,120000097278,120000097369)) SELECT B.oid AS bdz_id,B.sbmc AS bdz_mc,B.sbid AS bdz_sbid,NULL AS xl_oid,NULL AS xl_cxkg,NULL AS xl_cxkglx,NULL AS xl_mc,NULL AS xl_sbid,st_centroid (shape) AS shape,0 AS devicetype,111111111133 AS task_id FROM (SELECT DISTINCT qsdz FROM line_info) A INNER JOIN dwzy.T_TX_ZNYC_DZ B ON A.qsdz=B.oid UNION ALL SELECT B.oid AS bdz_id,B.sbmc AS bdz_mc,B.sbid AS bdz_sbid,A.oid AS xl_oid,A.cxkg AS xl_cxkg,A.cxkglx AS xl_cxkglx,A.sbmc AS xl_mc,A.sbid AS xl_sbid,NULL AS shape,1 AS devicetype,111111111133 AS task_id FROM line_info A INNER JOIN dwzy.T_TX_ZNYC_DZ B ON A.qsdz=B.oid;";
            }
        }
        public static string PG_InsertSql
        {
            get
            {
                return "INSERT INTO topo_zyxl.topo_sb_oid (oid,equips,typeid,cxkg)VALUES('{0}','{1}','{2}','{3}')";
            }
        }
        public static string PG_Query_CXMXH { get { return " SELECT B.ssdz AS bdz_id,B.oid AS mx_id,B.sbmc AS mx_mc,A.cxkg FROM (SELECT*FROM topo_sb_line_oid WHERE equips='stopequips') A LEFT JOIN dwzy.t_tx_znyc_mx B ON A.oid=B.oid"; } }
        /// <summary>
        /// 创建临时表
        /// </summary>
        public static string PG_CreateTempTable
        {
            get
            {
                return "create temporary table topo_sb_line_oid(oid bigint,equips varchar(200),typeid bigint,cxkg bigint) ;";
            }
        }
        
        public static string Query_Columns { get { return "SELECT *  FROM {0} LIMIT 1"; } }
        public static string PG_Qurey_XDXX { get {
                return "";
                //return ""; 
            } }
        public static string PG_Qurey_KGXX { get { return "H4sIAAAAAAAEAA2TNZaEUAAED0SAy4S4y3ycDB3c/fS7B+igql73i4pDy/WVP4E1gXLsTziYQlE8wVepeM/IZ8d/LFxbZaKxf03XnMGDVRXsCxTmcG7BxNOJNE+zc6+8sSurtLfHCaoXYAe/cHj9QVfzALOcxFn7y3p7CKRO86j6Gy6KG1bcyXL2I+rgNzKbIGg8xd+vJ9eDT9Pztu5NHNyZi/sIddwpT5VfRh6YOyEXriPikMFBfffVUyMd1PJz8ButIlgSKp2chtloydLaKQ8g4kHp+Z5wBxFB/pj5PFpQ74275K4EQ0d2uU2LLc9aqSSmaOJAvK8lLaMpDV5bNbVZWOJ3oWiTb3Fho9XevY8UUpb4y+9XzZm3KJOL+Hg0njBCJughFbxDeNqGnpxEMuqbUJ6GjwkAUPL6G1HiQdAbwC5E01TjRGBzzlqjDwtRZ5xRNJ5GB2vLZAWpn1MRdWZyXhuUt2qe7qOaWxOyXY07oRMUVtO5bcaqiaEA+ropoxesHtVHcgy0OhoIVWVnSezd9HY/+Q5IzNc6Cwmw1C6MWkXpvg+KnILOOwRoRACfkCrwQzyQNmVHuHPlUOkvdncDQl77NxqjDqtR4PDI+StY0Q0q3IgGk6T6euzVEMqx4KVc/PV2PtKrhl6XtNoh/gcpOJi7/bFthrMNqRITPtJMk2oxiVbJNAq7u5quzjM2efweFubaYFiutM2Lq4l+83yrp31eAWgP8fzN/sq2emnmu7ETsPXA79Y23RSR4xvnvLLvJqq18Gd7afA/pfdmpt5Zh75JSBXFm/4zsFt18yWT5owtwTDDRF55nDIqWpCM9P3jefPA1tDxtCbPknjNU/TQFuGixanhwCl8F/mna/L6E2FgHQI77pNpF4DTqMvQcrEeq2agTNjNgzIAhKy9iIzZxQdaTV2Kx8Yr05NzNl/yUDsuvqSsKG63h1IVpmyrBt2e/8z9iGjpE6OYON/LHEHoqhGfkcDbHlNzJWZMaxAQH0JsnIgzGdvUspEGzs7coJuMIw6eNUuVUPPGxBxWGUDtf/AQkekgyT2Ol1gK0sXMx9U4rSh7XT7vrpDKYZCQLX0TQjETTEA48GZRkNm7wYGJ67dT1g4j67yvVIpKq2T2PXNT4337mJ3j+t5ypAMNif7/CcvaNvnYyNhcWK4eA7sXhZAiq80t+hVh7E9bP9BF7V94JjEF11mJy9mlRIZUkIFGRW3eNyrbQAYYiUciFfxZgQJp7ORfYFAh9oVosOJJcW8ElZJGpWcepj2TtSo87j4WspUrZUp4EgYC56DkctqOFi34CcWHn02JN611bD06gGUCiukviIHm4HV1NeljoWl3MyD/IpXYVxOz6Mzs/EatYzxTJXQ35f1VgKo4Kt+6S4gTu8hku/nLWPJsi8AxrjtiFA8OcP419aJZh/zxpNbAbaUzjoMsIXRy+p7vpeosITezHDlJWGazChxhG18x6SbUX9eLRJX2rjzHs49jYAMYpuN2b3aG68n3fAD/6+bqzuVZLmpi8Fm+aSgrb2Q3DqLZfMK3Ys/m0XxZ9G515E6cGTaweIxA0CpxBe6uCvt2g+FYn/UPMtjiWwAGAAA="; } }
        public static string PG_Query_Trans { get { return "SELECT a.cxkg,a.oid,(CASE b.sbzlx WHEN 11000001 THEN '专用' WHEN 11000000 THEN '公用' ELSE '' END) 属性,b.sbzlx,a.oid AS ssdz,b.sbid,0 AS type FROM ( SELECT* FROM topo_sb_line_oid WHERE typeid = 110000) a INNER JOIN dwzy.T_TX_ZWYC_ZSBYQ b ON a.oid = b.oid AND b.sbzlx = '83020005' UNION ALL SELECT a.cxkg,a.oid,(CASE WHEN b.sbzlx IN(30200000,30200001,30200002) THEN '公用' ELSE '专用' END) 属性,b.sbzlx,b.ssdz,b.sbid,1 AS type FROM( SELECT * FROM topo_sb_line_oid WHERE typeid = 302000) a INNER JOIN dwzy.T_TX_ZNYC_PDBYQ b ON a.oid = b.oid"; } }
        public static string Oracle_Query_Trans { get { return "select dwzy_id,obj_id,ratedmva as pdrl,(case when pub_priv_flag=1 then '公用' else '专用' end) as pdsx from equ_te_dist_trans where VOLT_LEVEL in ('AC00101','AC00201','AC00061') and dwzy_id is not null"; } }
        #endregion  
        public static string DestinationTableName { get { return "topo_zyxl.topo_xl_ceshi"; } }

        public static string PG_Query_XDDA { get { return "WITH cet AS ( SELECT 2022 AS 年份, cxkg, equips, oid,(((0 :: BIT(64)) | get_byte(CONNECTION, 1) :: BIT(64) << 0) | (get_byte(CONNECTION, 2) :: BIT(64) << 8) | (get_byte(CONNECTION, 3) :: BIT(64) << 16) | (get_byte(CONNECTION, 4) :: BIT(64) << 24) | (get_byte(CONNECTION, 5) :: BIT(64) << 32) | (get_byte(CONNECTION, 6) :: BIT(64) << 40) | (get_byte(CONNECTION, 7) :: BIT(64) << 48) | (get_byte(CONNECTION, 8) :: BIT(64) << 56)) ::int8 AS start_conn,(((0 :: BIT(64)) | get_byte(CONNECTION, 9) :: BIT(64) << 0) | (get_byte(CONNECTION, 10) :: BIT(64) << 8) | (get_byte(CONNECTION, 11) :: BIT(64) << 16) | (get_byte(CONNECTION, 12) :: BIT(64) << 24) | (get_byte(CONNECTION, 13) :: BIT(64) << 32) | (get_byte(CONNECTION, 14) :: BIT(64) << 40) | (get_byte(CONNECTION, 15) :: BIT(64) << 48) | (get_byte(CONNECTION, 16) :: BIT(64) << 56)) :: int8 AS end_conn, sbzlx, TYPE, shape, devicetype,(CASE WHEN kgzt = 536870912 THEN 0 ELSE 1 END) AS kgzt, sbid, xlcd, pdts, pdrl, pdfh, ssdz FROM(                             SELECT A.cxkg, A.equips, A.oid, b.CONNECTION, b.sbzlx, '柱上-断路器' AS TYPE, 3 AS devicetype, b.shape, b.kgzt, CAST(NULL AS BIGINT) AS ssdz, b.sbid, 0.0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 111000) A INNER JOIN dwzy.T_TX_ZWYC_ZSDLQ b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '柱上-负荷开关' AS TYPE, 3 AS devicetype, shape, kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 112000) A INNER JOIN dwzy.T_TX_ZWYC_ZSFHKG b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '站外-超连接线' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 140000) A INNER JOIN dwzy.T_TX_ZWYC_ZWCLJX b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '站外-连接线' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 130000) A INNER JOIN dwzy.T_TX_ZWYC_ZWLJX b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '站外-电缆段' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, ST_Length(shape) AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 201000) A INNER JOIN dwzy.T_TX_ZWYC_DLD b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '导线段' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, ST_Length(shape) AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 101000) A INNER JOIN dwzy.T_TX_ZWYC_DXD b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '柱上-隔离开关' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 113000) A INNER JOIN dwzy.T_TX_ZWYC_ZSGLKG b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, CONNECTION, sbzlx, '柱上-跌落式熔断器' AS TYPE, 2 AS devicetype, shape, NULL AS kgzt, NULL AS ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 115000) A INNER JOIN dwzy.T_TX_ZWYC_ZSDLSRDQ b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, b.CONNECTION, b.sbzlx, '站内-连接线' AS TYPE, 2 AS devicetype, b.shape, NULL AS kgzt, b.ssdz, b.sbid, 0 AS xlcd, 0 AS pdts, 0 AS pdrl, 0 pdfh FROM(                             SELECT * FROM topo_sb_line_oid WHERE typeid = 360000) A INNER JOIN dwzy.T_TX_ZNYC_ZNLJX b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL UNION ALL                             SELECT A.cxkg, A.equips, A.oid, b.CONNECTION, b.sbzlx, '站内-断路器' AS TYPE, (CASE WHEN C.sbzlx = 30000000 THEN 2 ELSE 7 END) AS devicetype, b.shape,NULL AS kgzt,b.ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM(                                      SELECT* FROM topo_sb_line_oid WHERE typeid= 305000) A INNER JOIN dwzy.T_TX_ZNYC_DLQ b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL LEFT JOIN dwzy.T_TX_ZNYC_DZ C ON b.ssdz = C.oid UNION ALL SELECT A.cxkg,A.equips,A.oid,CONNECTION,b.sbzlx,'站内-隔离开关' AS TYPE,2 AS devicetype, b.shape,kgzt,b.ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM(  SELECT* FROM topo_sb_line_oid WHERE typeid= 306000) A INNER JOIN dwzy.T_TX_ZNYC_GLKG b ON A.oid = b.oid AND(b.sbzlx = 36000000 OR b.sbzlx = 30600000) AND b.CONNECTION IS NOT NULL AND LENGTH(b.CONNECTION)> 9 UNION ALL SELECT A.cxkg,A.equips,A.oid,CONNECTION,b.sbzlx,'站内-负荷开关' AS TYPE,7 AS devicetype, b.shape,kgzt,b.ssdz,b.sbid,0 AS xlcd,0 AS pdts,0 AS pdrl,0 pdfh FROM(  SELECT* FROM topo_sb_line_oid WHERE typeid= 307000) A INNER JOIN dwzy.t_tx_znyc_fhkg b ON A.oid = b.oid AND b.sbzlx = 30700000 AND b.CONNECTION IS NOT NULL UNION ALL SELECT A.cxkg,A.equips,A.oid,CONNECTION,b.sbzlx,'站外-柱上变压器' AS TYPE,5 AS devicetype, b.shape,NULL AS kgzt,NULL AS ssdz,b.sbid,0 AS xlcd,1 AS pdts,300 AS pdrl,1.1 pdfh FROM(  SELECT* FROM topo_sb_line_oid WHERE typeid= 110000) A INNER JOIN dwzy.t_tx_zwyc_zsbyq b ON A.oid = b.oid AND b.CONNECTION IS NOT NULL) C) SELECT 2022 AS 年份, cxkg, equips, oid, start_conn, end_conn, sbzlx, TYPE,'LINESTRING(1 1, 2 2)' AS shape,(CASE WHEN devicetype = 3 THEN 2 WHEN devicetype = 7 THEN 2 ELSE devicetype END) AS devicetype, CAST (NULL AS VARCHAR(200)) devicename,CAST(NULL AS VARCHAR(200)) blackname,kgzt,sbid,xlcd,pdts,pdrl,pdfh,ssdz FROM cet UNION ALL          SELECT 2022 AS 年份, cxkg, equips, oid,(CASE WHEN start_count < 3 THEN start_conn ELSE end_conn END) AS start_conn, NULL end_conn,sbzlx,TYPE,'POINT(1 1)' AS shape,3 devicetype,'开关' || RIGHT(CAST(oid AS VARCHAR), 4) AS devicename,'未配置终端分段开关' AS blackname, kgzt, sbid, xlcd, pdts, pdrl, pdfh, ssdz FROM(                     SELECT *, COUNT(oid) OVER(PARTITION BY start_conn) AS start_count, COUNT(oid) OVER(PARTITION BY end_conn) AS end_count FROM(                     SELECT cxkg, equips, oid, sbzlx, start_conn, end_conn, TYPE, shape, 2 AS devicetype, kgzt, sbid, xlcd, pdts, pdrl, pdfh, ssdz FROM cet UNION ALL                     SELECT cxkg, equips, oid, sbzlx, end_conn, start_conn, TYPE, shape, devicetype, kgzt, sbid, xlcd, pdts, pdrl, pdfh, ssdz FROM cet WHERE devicetype = 3) A) b WHERE b.devicetype = 3 UNION ALL SELECT 2022 AS 年份, cxkg, equips, oid, start_conn, NULL end_conn,sbzlx,TYPE,'POINT(1 1)' AS shape,7 AS devicetype, CAST (NULL AS VARCHAR(200)) devicename,CAST(NULL AS VARCHAR(200)) blackname,kgzt,sbid,xlcd,pdts,pdrl,pdfh,ssdz FROM cet WHERE equips = 'lastequips' AND devicetype = 7; "; } }
        public static string Oracle_Query_XDDA { get { return "select dwzy_id,obj_id,sectional as dxjm,length as xlcd,(case when type = 1 then '中压架空' else '中压电缆' end) as xllx,zll from equ_te_line_seg where VOLT_LEVEL in ('AC00201', 'AC00101', 'AC00061') and dwzy_id is not null"; } }


        #region Oracle
        /// <summary>
        /// Oracle连接字符串
        /// </summary>
        public static string OracleConString
        {
            get
            {
                //return "Data Source=(DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=172.16.144.251)(PORT=11521)))(CONNECT_DATA=(SERVICE_NAME=pis)));User ID=pis;Password=New_2#4dba;";

                return "Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=172.16.144.251)(PORT=11521))(CONNECT_DATA=(SERVICE_NAME=pis)));Persist Security Info=True;User ID=pis;Password=New_2#4dba;";

            }
        }
        public static string Oracle_QuerySubSql { get { return "SELECT A.dwzy_id, A.run_trans_num, A.OBJ_ID, A.zrl, A.rlgc, C.max_load FROM ( SELECT A.dwzy_id, A.run_trans_num, A.VOLT_LEVEL, A.OBJ_ID, SUM (B.HVC) AS zrl, listagg ( rtrim( to_char (B.HVC, 'FM9999990.9999'), '.' ), '+' ) within GROUP (ORDER BY B.HVC) AS rlgc FROM EQU_PI_SUBSTATION A INNER JOIN EQU_TE_TRANSFORMER B ON A.dwzy_id IS NOT NULL AND A.OBJ_ID = B.STATION_ID AND A.VOLT_LEVEL IN ( 'AC00351', 'AC01101', 'AC02201' ) AND A.ASSET_TYPE = 30 GROUP BY A.dwzy_id, A.run_trans_num, A.VOLT_LEVEL, A.OBJ_ID ) A LEFT JOIN ieq_te_st_data_detail C ON A.OBJ_ID = C.DEVICE_ID AND periods = 2015"; } }

        public static string Oracle_QueryFeederSql { get { return "SELECT dwzy_id,obj_id,(CASE VOLT_LEVEL WHEN 'AC00201' THEN '20' WHEN 'AC00101' THEN '10' WHEN 'AC00061' THEN '6' ELSE '' END) AS dydj,(CASE WHEN ASSET_TYPE=80 THEN '专用' ELSE '公用' END) AS xlsx,rated_ele AS xedl FROM equ_te_line WHERE VOLT_LEVEL IN ('AC00201','AC00101','AC00061') AND dwzy_id IS NOT NULL"; } }

        public static string Oracle_Query_BDZDACX { get { return "SELECT A.dwzy_id,(CASE A.VOLT_LEVEL WHEN 'AC00351' THEN '35' WHEN 'AC00661' THEN '66' WHEN 'AC01101' THEN '110' WHEN 'AC02201' THEN '220' ELSE NULL END) AS dydj,(CASE A.STATION_USAGE WHEN '02' THEN '专用' ELSE '公用' END) sbsx,(CASE A.SETUP_KIND WHEN '01' THEN '户外' WHEN '02' THEN '户内' WHEN '03' THEN '地下' WHEN '04' THEN '半地下' WHEN '05' THEN '半户内' ELSE '' END) AS sblx,A.run_trans_num zbts,A.zrl zbrl,A.rlgc FROM (SELECT A.dwzy_id,A.STATION_USAGE,A.SETUP_KIND,A.run_trans_num,A.VOLT_LEVEL,A.OBJ_ID,sum(B.HVC) AS zrl,listagg (rtrim(to_char(B.HVC,'FM9999990.9999'),'.'),'+') within GROUP (ORDER BY B.HVC) AS rlgc FROM EQU_PI_SUBSTATION A INNER JOIN EQU_TE_TRANSFORMER B ON A.dwzy_id IS NOT NULL AND A.OBJ_ID=B.STATION_ID AND A.VOLT_LEVEL IN ('AC00351','AC00661','AC01101','AC02201') AND A.STATION_USAGE != '02' GROUP BY A.dwzy_id,A.STATION_USAGE,A.SETUP_KIND,A.run_trans_num,A.VOLT_LEVEL,A.OBJ_ID) A"; } }
        #endregion
        #region 结构对照
        /// <summary>
        /// 变电站字段对照
        /// </summary>
        public static Dictionary<Dictionary<string, Type>, string> dicContrastTopoBdz
        {
            get
            {
                return new Dictionary<Dictionary<string, Type>, string> {
            { new Dictionary<string,Type>{ { "oid", typeof(long) } },"bdz_id" },
            { new Dictionary<string,Type>{ { "id", typeof(string) } },"bdz_sbid" },
            { new Dictionary<string,Type>{ { "sbmc", typeof(string) } },"bdz_mc" },
            { new Dictionary<string,Type>{ { "dm_id", typeof(long) } },"bdz_id" },
            { new Dictionary<string,Type>{ { "task_id", typeof(long) } },"task_id" },
            { new Dictionary<string,Type>{ { "sbsx", typeof(string) } },"SBSX" },
            { new Dictionary<string,Type>{ { "sblx", typeof(string) } },"SBLX" },
            { new Dictionary<string,Type>{ { "dydj", typeof(string) } },"DYDJ" },
            { new Dictionary<string,Type>{ { "zbts", typeof(int) } },"ZBTS" },
            { new Dictionary<string,Type>{ { "rlgc", typeof(string) } },"RLGC" },
            { new Dictionary<string,Type>{ { "zbrl", typeof(decimal) } },"ZBRL" }
        };
            }
        }
        /// <summary>
        /// 中压线路字段对照
        /// </summary>
        public static Dictionary<Dictionary<string, Type>, string> dicContrastTopoZyxl
        {
            get
            {
                return new Dictionary<Dictionary<string, Type>, string>
        {
            { new Dictionary<string,Type>{ { "oid", typeof(long) } },"xl_oid" },
            { new Dictionary<string,Type>{ { "id", typeof(string) } },"xl_sbid" },
            { new Dictionary<string,Type>{ { "sbmc", typeof(string) } },"xl_mc" },
            { new Dictionary<string,Type>{ { "ssbdz", typeof(string) } },"bdz_sbid" },
            { new Dictionary<string,Type>{ { "cxkgid", typeof(long) } },"xl_cxkg" },
            { new Dictionary<string,Type>{ { "dm_id", typeof(long) } },"xl_oid" },
            { new Dictionary<string,Type>{ { "mxh", typeof(string) } },"mx_mc" },
            { new Dictionary<string,Type>{ { "dydj", typeof(string) } },"DYDJ" },
            { new Dictionary<string,Type>{ { "xedl", typeof(decimal) } },"XEDL" },
            { new Dictionary<string,Type>{ { "xlsx", typeof(string) } },"XLSX" }
        };
            }
        }



        #endregion
    }
}
