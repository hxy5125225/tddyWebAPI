using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks; 

namespace DBConnector
{
    public class DataTableClass
    {
        /// <summary>
        /// 合并表格
        /// </summary>
        /// <param name="dt1"></param>
        /// <param name="dt2"></param>
        /// <returns></returns>
        public static System.Data.DataTable JoinTable(DataTable dt1, System.Data.DataTable dt2,string field1,string field2)
        {
            System.Data.DataTable dt = new DataTable();
            GetColumns(dt1.Columns, ref dt);
            GetColumns(dt2.Columns, ref dt);
            if ( dt1.Rows.Count == 0) return dt; 
            try
            {
                var query = from tab1 in dt1.AsEnumerable()
                            join rowRight in dt2.AsEnumerable() on tab1[field1] equals rowRight[field2] into gj
                            from tab2 in gj.DefaultIfEmpty()
                            select tab1.ItemArray.Concat((tab2 == null) ? (dt2.NewRow().ItemArray) : tab2.ItemArray).ToArray();
                foreach (object[] values in query)
                {
                    dt.Rows.Add(values);
                }
                dt.Columns.Remove(field2);
            }
            catch (Exception ex)
            {

                throw new Exception(ex.StackTrace);
            }
            return dt;
        }        public System.Data.DataTable
        public static System.Data.DataTable JoinTable(DataTable dt1, System.Data.DataTable dt2, List<string> field1, List<string> field2)
        {
            System.Data.DataTable dt = new DataTable();
            GetColumns(dt1.Columns, ref dt);
            GetColumns(dt2.Columns, ref dt);
            try
            {
                var query = from tab1 in dt1.AsEnumerable()
                            join rowRight in dt2.AsEnumerable() on new { A = tab1.Field<long>(field1[0]), B = tab1.Field<long>(field1[1]) } equals new { A = rowRight.Field<long>(field2[0]), B = rowRight.Field<long>(field2[1]) }
                 into gj
                            from tab2 in gj.DefaultIfEmpty()
                            select tab1.ItemArray.Concat((tab2 == null) ? (dt2.NewRow().ItemArray) : tab2.ItemArray).ToArray();
                //var query = from tab1 in dt1.AsEnumerable()
                //            join rowRight in dt2.AsEnumerable() on getObj1(tab1, field1) equals getObj1(rowRight, field2) into gj
                //            from tab2 in gj.DefaultIfEmpty()
                //            select tab1.ItemArray.Concat((tab2 == null) ? (dt2.NewRow().ItemArray) : tab2.ItemArray).ToArray();
                foreach (object[] values in query)
                {
                    dt.Rows.Add(values);
                }
                //for (int i = 0; i < field2.Count; i++)
                //{
                //    dt.Columns.Remove(field2[i]);
                //} 
            }
            catch (Exception ex)
            { 
                throw new Exception(ex.StackTrace);
            }
            return dt;
        } 
        public static object[] getObj(DataRow dr,List<string> list)
        {
            object[] obj = new object[list.Count];
            for (int i = 0; i < list.Count; i++)
            {
                obj[i] = dr[ list[i]];
            }
            return obj;
        }
        public static dynamic getObj1(DataRow dr, Dictionary<string,Type> dic)
        {
            List<string> list = new List<string>() {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };
            Dictionary<object, object> dics = new Dictionary<object, object>();
            int count = 0;
            foreach (var item in dic)
            {
                dics.Add(list[count],dr[item.Key]);
                count++;
            }
            string json=Newtonsoft.Json.JsonConvert.SerializeObject(dics);
            dynamic dy = Newtonsoft.Json.JsonConvert.DeserializeObject(json);
            return dy;
        }  

        public static void GetColumns(DataColumnCollection columns, ref DataTable dtAll)
        {
            foreach (System.Data.DataColumn column in columns)
            {
                string columnName = column.ColumnName;
                if (dtAll.Columns.Contains(columnName))
                {
                    columnName = columnName + "_1";
                }
                dtAll.Columns.Add(columnName, column.DataType);
            }
        }
        /// <summary>
        /// 创建负荷DataTable
        /// </summary>
        /// <returns></returns>
        public static DataTable CreateTransLoadTable() 
        { 
            DataTable dt = new DataTable();
            dt.Columns.Add("oid", typeof(long));
            dt.Columns.Add("sbzlx", typeof(long));
            dt.Columns.Add("load", typeof(double));
            dt.Columns.Add("task_id", typeof(string));
            return dt;
        }

    }
}
